<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I AM SLOW WALKER, BUT I NEVER WALK BACK</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lmwtuedu.cn/"/>
  <updated>2019-09-16T08:56:55.179Z</updated>
  <id>http://lmwtuedu.cn/</id>
  
  <author>
    <name>darker</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo operator</title>
    <link href="http://lmwtuedu.cn/2019/09/12/2019_09_12_hexo_operator/"/>
    <id>http://lmwtuedu.cn/2019/09/12/2019_09_12_hexo_operator/</id>
    <published>2019-09-12T09:48:59.154Z</published>
    <updated>2019-09-16T08:56:55.179Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>燕十八的MYSQL练习</title>
    <link href="http://lmwtuedu.cn/2018/10/17/2018-10-17-%E7%87%95%E5%8D%81%E5%85%ABMYSQL%E7%BB%83%E4%B9%A0/"/>
    <id>http://lmwtuedu.cn/2018/10/17/2018-10-17-燕十八MYSQL练习/</id>
    <published>2018-10-16T16:00:00.000Z</published>
    <updated>2019-08-15T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="燕十八的MYSQL练习"><a href="#燕十八的MYSQL练习" class="headerlink" title="燕十八的MYSQL练习"></a>燕十八的MYSQL练习</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">create table goods (</span><br><span class="line">  goods_id mediumint(8) unsigned primary key auto_increment,</span><br><span class="line">  goods_name varchar(120) not null default &apos;&apos;,</span><br><span class="line">  cat_id smallint(5) unsigned not null default &apos;0&apos;,</span><br><span class="line">  brand_id smallint(5) unsigned not null default &apos;0&apos;,</span><br><span class="line">  goods_sn char(15) not null default &apos;&apos;,</span><br><span class="line">  goods_number smallint(5) unsigned not null default &apos;0&apos;,</span><br><span class="line">  shop_price decimal(10,2) unsigned not null default &apos;0.00&apos;,</span><br><span class="line">  market_price decimal(10,2) unsigned not null default &apos;0.00&apos;,</span><br><span class="line">  click_count int(10) unsigned not null default &apos;0&apos;</span><br><span class="line">) engine=myisam default charset=utf8;</span><br><span class="line"></span><br><span class="line">insert into `goods` </span><br><span class="line">values </span><br><span class="line">(1,&apos;kd876&apos;,4,8,&apos;ecs000000&apos;,1,1388.00,1665.60,9),</span><br><span class="line">(4,&apos;诺基亚n85原装充电器&apos;,8,1,&apos;ecs000004&apos;,17,58.00,69.60,0),</span><br><span class="line">(3,&apos;诺基亚原装5800耳机&apos;,8,1,&apos;ecs000002&apos;,24,68.00,81.60,3),</span><br><span class="line">(5,&apos;索爱原装m2卡读卡器&apos;,11,7,&apos;ecs000005&apos;,8,20.00,24.00,3),</span><br><span class="line">(6,&apos;胜创kingmax内存卡&apos;,11,0,&apos;ecs000006&apos;,15,42.00,50.40,0),</span><br><span class="line">(7,&apos;诺基亚n85原装立体声耳机hs-82&apos;,8,1,&apos;ecs000007&apos;,20,100.00,120.00,0),</span><br><span class="line">(8,&apos;飞利浦9@9v&apos;,3,4,&apos;ecs000008&apos;,1,399.00,478.79,10),</span><br><span class="line">(9,&apos;诺基亚e66&apos;,3,1,&apos;ecs000009&apos;,4,2298.00,2757.60,20),</span><br><span class="line">(10,&apos;索爱c702c&apos;,3,7,&apos;ecs000010&apos;,7,1328.00,1593.60,11),</span><br><span class="line">(11,&apos;索爱c702c&apos;,3,7,&apos;ecs000011&apos;,1,1300.00,0.00,0),</span><br><span class="line">(12,&apos;摩托罗拉a810&apos;,3,2,&apos;ecs000012&apos;,8,983.00,1179.60,13),</span><br><span class="line">(13,&apos;诺基亚5320 xpressmusic&apos;,3,1,&apos;ecs000013&apos;,8,1311.00,1573.20,13),</span><br><span class="line">(14,&apos;诺基亚5800xm&apos;,4,1,&apos;ecs000014&apos;,1,2625.00,3150.00,6),</span><br><span class="line">(15,&apos;摩托罗拉a810&apos;,3,2,&apos;ecs000015&apos;,3,788.00,945.60,8),</span><br><span class="line">(16,&apos;恒基伟业g101&apos;,2,11,&apos;ecs000016&apos;,0,823.33,988.00,3),</span><br><span class="line">(17,&apos;夏新n7&apos;,3,5,&apos;ecs000017&apos;,1,2300.00,2760.00,2),</span><br><span class="line">(18,&apos;夏新t5&apos;,4,5,&apos;ecs000018&apos;,1,2878.00,3453.60,0),</span><br><span class="line">(19,&apos;三星sgh-f258&apos;,3,6,&apos;ecs000019&apos;,12,858.00,1029.60,7),</span><br><span class="line">(20,&apos;三星bc01&apos;,3,6,&apos;ecs000020&apos;,12,280.00,336.00,14),</span><br><span class="line">(21,&apos;金立 a30&apos;,3,10,&apos;ecs000021&apos;,40,2000.00,2400.00,4),</span><br><span class="line">(22,&apos;多普达touch hd&apos;,3,3,&apos;ecs000022&apos;,1,5999.00,7198.80,16),</span><br><span class="line">(23,&apos;诺基亚n96&apos;,5,1,&apos;ecs000023&apos;,8,3700.00,4440.00,17),</span><br><span class="line">(24,&apos;p806&apos;,3,9,&apos;ecs000024&apos;,100,2000.00,2400.00,35),</span><br><span class="line">(25,&apos;小灵通/固话50元充值卡&apos;,13,0,&apos;ecs000025&apos;,2,48.00,57.59,0),</span><br><span class="line">(26,&apos;小灵通/固话20元充值卡&apos;,13,0,&apos;ecs000026&apos;,2,19.00,22.80,0),</span><br><span class="line">(27,&apos;联通100元充值卡&apos;,15,0,&apos;ecs000027&apos;,2,95.00,100.00,0),</span><br><span class="line">(28,&apos;联通50元充值卡&apos;,15,0,&apos;ecs000028&apos;,0,45.00,50.00,0),</span><br><span class="line">(29,&apos;移动100元充值卡&apos;,14,0,&apos;ecs000029&apos;,0,90.00,0.00,0),</span><br><span class="line">(30,&apos;移动20元充值卡&apos;,14,0,&apos;ecs000030&apos;,9,18.00,21.00,1),</span><br><span class="line">(31,&apos;摩托罗拉e8 &apos;,3,2,&apos;ecs000031&apos;,1,1337.00,1604.39,5),</span><br><span class="line">(32,&apos;诺基亚n85&apos;,3,1,&apos;ecs000032&apos;,4,3010.00,3612.00,9);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fwb97u6yzmj30sb0fjnek.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><p>1.0 查询主键微32的商品</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from goods where goods_id = 32;</span><br></pre></td></tr></table></figure><p>1.1 不属于第3栏目的所有商品</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *from goods where cat_id !=3;</span><br></pre></td></tr></table></figure><p>1.2 本店价格高于3000元的商品</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *from goods where shop_price &gt; 3000;</span><br></pre></td></tr></table></figure><p>1.3 本店价格低于或等于100元的商品 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *from goods where shop_price &lt;=100;</span><br></pre></td></tr></table></figure><p>1.4 取出第4栏目或第11栏目的商品(不许用or) </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *from goods where cat_id in (4,11);</span><br></pre></td></tr></table></figure><p>1.5 取出100&lt;=价格&lt;=500的商品(不许用and) </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from goods where shop_price between 100 and 500;</span><br></pre></td></tr></table></figure><p>1.6 取出不属于第3栏目且不属于第11栏目的商品(and,或not in分别实现) </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from goods where cat_id !=3 and cat_id != 11;</span><br><span class="line">select * from goods where cat_id not in(3,11);</span><br></pre></td></tr></table></figure><p>1.7 取出价格大于100且小于300,或者大于4000且小于5000的商品() </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from goods where (shop_price &gt; 100 and shop_price &lt; 300) or (shop_price &gt; 4000 and shop_price &lt; 5000);</span><br></pre></td></tr></table></figure><p>1.8 取出第3个栏目下面价格&lt;1000或&gt;3000,并且点击量&gt;5的系列商品</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from goods where cat_id =3 and (shop_price &lt;1000 or shop_price &gt;3000) and click_count &gt; 5;</span><br><span class="line"></span><br><span class="line">select * from goods where cat_id =3 and ( shop_price not between 1000 and 3000) and click_count &gt; 5;</span><br></pre></td></tr></table></figure><p>1.10 取出名字以”诺基亚”开头的商品 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from goods where goods_name like &quot;诺基亚%&quot;;</span><br></pre></td></tr></table></figure><p>1.11 取出名字为”诺基亚Nxx”的手机 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from goods where goods_name like &quot;诺基亚N%&quot;;</span><br></pre></td></tr></table></figure><p>1.12 取出名字不以”诺基亚”开头的商品 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from goods where goods_name not like &quot;诺基亚%&quot;;</span><br></pre></td></tr></table></figure><p>1.13 取出第3个栏目下面价格在1000到3000之间,并且点击量&gt;5 “诺基亚”开头的系列商品</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select *from goods where cat_id =3 and (shop_price between 1000 and 3000 ) and click_count &gt;5 and goods_name like &quot;诺基亚%&quot;;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">&gt; 把good表中商品名为’诺基亚xxxx’的商品,改为’HTCxxxx’, </span><br><span class="line">提示:大胆的把列看成变量,参与运算,甚至调用函数来处理 . </span><br><span class="line">substring(),concat()</span><br></pre></td></tr></table></figure><p>select concat(“HTC”,substring(goods_name,4)) from goods where goods_name like ‘诺基亚%’;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## group</span><br><span class="line"></span><br><span class="line">2.1 查出最贵的商品的价格</span><br></pre></td></tr></table></figure><p>select max(shop_price) from goods;</p><h2 id="查询具体的最贵的商品信息"><a href="#查询具体的最贵的商品信息" class="headerlink" title="#查询具体的最贵的商品信息"></a>#查询具体的最贵的商品信息</h2><p>select goods_id, goods_name,shop_price from goods,(select max(shop_price) as sp from goods) maxp where goods.shop_price = sp;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.2 查出最大(最新)的商品编号</span><br></pre></td></tr></table></figure><p>select max(goods_id) from goods;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.3 查出最便宜的商品的价格</span><br></pre></td></tr></table></figure><p>select min(shop_price) from goods;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.4 查出最旧(最小)的商品编号</span><br></pre></td></tr></table></figure><p>select min(goods_id) from goods;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.5 查询该店所有商品的库存总量</span><br></pre></td></tr></table></figure><p>select sum(goods_number) from goods;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.6 查询所有商品的平均价</span><br></pre></td></tr></table></figure><p>select avg(shop_price) from goods;</p><h2 id="每类商品均价"><a href="#每类商品均价" class="headerlink" title="每类商品均价"></a>每类商品均价</h2><p>select cat_id, avg(shop_price) from goods group by cat_id;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.7 查询该店一共有多少种商品</span><br></pre></td></tr></table></figure><p>select count(*) from goods;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## having与group综合运用</span><br><span class="line"></span><br><span class="line">3.1 查询该店的商品比市场价所节省的价格:</span><br></pre></td></tr></table></figure><p>select goods_id, goods_name, (shop_price - market_price) from goods;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3.2 查询每个商品所积压的货款(提示:库存*单价)</span><br></pre></td></tr></table></figure><p>select goods_id, goods_name ,(shop_price*goods_number) from goods;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3.3 查询该店积压的总货款</span><br></pre></td></tr></table></figure><p>select sum(shop_price*goods_number) from goods;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3.4 查询该店每个栏目下面积压的货款.</span><br></pre></td></tr></table></figure><p>select cat_id, sum(shop_price*goods_number) from goods group by cat_id;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3.5 查询比市场价省钱200元以上的商品及该商品所省的钱(where和having分别实现)</span><br></pre></td></tr></table></figure><h1 id="where-1"><a href="#where-1" class="headerlink" title="where"></a>where</h1><p>select * , (market_price -shop_price) from goods where (market_price -shop_price) &gt; 200;</p><h1 id="having"><a href="#having" class="headerlink" title="having"></a>having</h1><p>select * , (market_price -shop_price) as shengqian from goods having shengqian &gt; 200;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3.6 查询积压货款超过2W元的栏目,以及该栏目积压的货款</span><br></pre></td></tr></table></figure><p>select cat_id, sum(shop_price*goods_number) as sum_cat_price from goods group by cat_id having sum_cat_price &gt; 20000;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 练习</span><br><span class="line"></span><br><span class="line">```mysql</span><br><span class="line">CREATE TABLE `lesson_score` (</span><br><span class="line">  `name` varchar(20) DEFAULT NULL,</span><br><span class="line">  `subject` varchar(20) DEFAULT NULL,</span><br><span class="line">  `score` tinyint(4) DEFAULT NULL</span><br><span class="line">) CHARSET=utf8;</span><br><span class="line">insert into lesson_score</span><br><span class="line">values</span><br><span class="line">(&apos;张三&apos;,&apos;数学&apos;,90),</span><br><span class="line">(&apos;张三&apos;,&apos;语文&apos;,50),</span><br><span class="line">(&apos;张三&apos;,&apos;地理&apos;,40),</span><br><span class="line">(&apos;李四&apos;,&apos;语文&apos;,55),</span><br><span class="line">(&apos;李四&apos;,&apos;政治&apos;,45),</span><br><span class="line">(&apos;王五&apos;,&apos;政治&apos;,30);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fwbclia8d1j308805amxl.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>要求:查询出2门及2门以上不及格者的平均成绩</p><p><strong><font color="red">错误</font></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## 这种写法错误</span><br><span class="line">select name , count(score &lt; 60) as num, avg(score) from lesson_score group by name having num &gt;= 2;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fwbddyq2p0j30op0ctn8u.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>注意： count,是数行数的，其实与里面是啥没有关系，所以 <code>score &lt; 60</code> 没有生效。</p><p>count(score &lt; 60) 只是统计行数。</p><p>所以重新添加数据，注意图片显示。</p><ul><li>平均成绩</li><li>挂科情况</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">## 挂科情况</span><br><span class="line">select name, score &lt; 60 from lesson_score;</span><br><span class="line">## 注意 score&lt;60 的结果只有两种，0和1</span><br><span class="line"></span><br><span class="line">## 那么我们可以统计 name 的总共的挂科情况</span><br><span class="line">select name, sum((score&lt;60)) from lesson_score group by name;</span><br><span class="line">## 此时我们得到总体的挂科数量</span><br><span class="line"></span><br><span class="line">## 挂科 &gt;=2 的人我们是不是可以查询到</span><br><span class="line">select name, sum((score&lt;60))&gt;=2 from lesson_score group by name;</span><br><span class="line"></span><br><span class="line">## 那么我们可以这么写：</span><br><span class="line">select name, avg(score), sum((score&lt;60)) as num from lesson_score group by name having num &gt;=2;</span><br></pre></td></tr></table></figure><h2 id="order-by-与-limit-查询"><a href="#order-by-与-limit-查询" class="headerlink" title="order by 与 limit 查询"></a>order by 与 limit 查询</h2><p>4.1 按价格由高到低排序 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from goods order by shop_price desc;</span><br></pre></td></tr></table></figure><p>4.2 按发布时间由早到晚排序 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from goods order by add_time;</span><br></pre></td></tr></table></figure><p>4.3 接栏目由低到高排序,栏目内部按价格由高到低排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from goods order by cat_id, shop_price desc;</span><br></pre></td></tr></table></figure><p>4.4 取出价格最高的前三名商品 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from goods order by shop_price desc limit 0,3;</span><br></pre></td></tr></table></figure><p>4.5 取出点击量前三名到前5名的商品 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from goods order by click_count desc limit 2,3;</span><br></pre></td></tr></table></figure><p>4.6 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;燕十八的MYSQL练习&quot;&gt;&lt;a href=&quot;#燕十八的MYSQL练习&quot; class=&quot;headerlink&quot; title=&quot;燕十八的MYSQL练习&quot;&gt;&lt;/a&gt;燕十八的MYSQL练习&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
    
    
      <category term="mysql" scheme="http://lmwtuedu.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Java集合06-Deque和ArrayDeque</title>
    <link href="http://lmwtuedu.cn/2018/09/26/2018-09-26-Java%E9%9B%86%E5%90%8806-Deque%E5%92%8CArrayDeque/"/>
    <id>http://lmwtuedu.cn/2018/09/26/2018-09-26-Java集合06-Deque和ArrayDeque/</id>
    <published>2018-09-25T16:00:00.000Z</published>
    <updated>2019-08-15T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java集合06-Deque和ArrayDeque"><a href="#Java集合06-Deque和ArrayDeque" class="headerlink" title="Java集合06-Deque和ArrayDeque"></a>Java集合06-Deque和ArrayDeque</h1><blockquote><p>一般人很少有耐心去阅读英文注解，最近在看斗罗大陆电视剧（PS：以前阅读过小说）；阅读源码也是一种修行，天赋是非常重要，但是 药师说过，基础很重要，树根越扎越深，你的基础就巩固；所以我们需要慢下来细心品读巨人写的代码。</p></blockquote><p>Deque 是不是很眼熟， LinkedList的双向链表里面，继承了Deque ； Deque全称是double ended queue,即双向列表， 它允许在两侧插入和删除元素； 不建议向其插入null值，Deque大多数情况不会限制元素的数量，但这不是必须的。</p><p>Deque中定义的分为四部分： 第一部分：Deque定义所言，提供两侧插入或者删除的方法； 第二部分：继承Queue的实现； 第三部分： 如果基于实现stack 需要实现的方法； 第四部分： 继承Collection方法。</p><h2 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h2><p>注解源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A linear collection that supports element insertion and removal at</span></span><br><span class="line"><span class="comment"> * both ends.  The name &lt;i&gt;deque&lt;/i&gt; is short for "double ended queue"</span></span><br><span class="line"><span class="comment"> * and is usually pronounced "deck".  Most &#123;<span class="doctag">@code</span> Deque&#125;</span></span><br><span class="line"><span class="comment"> * implementations place no fixed limits on the number of elements</span></span><br><span class="line"><span class="comment"> * they may contain, but this interface supports capacity-restricted</span></span><br><span class="line"><span class="comment"> * deques as well as those with no fixed size limit.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This interface defines methods to access the elements at both</span></span><br><span class="line"><span class="comment"> * ends of the deque.  Methods are provided to insert, remove, and</span></span><br><span class="line"><span class="comment"> * examine the element.  Each of these methods exists in two forms:</span></span><br><span class="line"><span class="comment"> * one throws an exception if the operation fails, the other returns a</span></span><br><span class="line"><span class="comment"> * special value (either &#123;<span class="doctag">@code</span> null&#125; or &#123;<span class="doctag">@code</span> false&#125;, depending on</span></span><br><span class="line"><span class="comment"> * the operation).  The latter form of the insert operation is</span></span><br><span class="line"><span class="comment"> * designed specifically for use with capacity-restricted</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Deque&#125; implementations; in most implementations, insert</span></span><br><span class="line"><span class="comment"> * operations cannot fail.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The twelve methods described above are summarized in the</span></span><br><span class="line"><span class="comment"> * following table:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;table BORDER CELLPADDING=3 CELLSPACING=1&gt;</span></span><br><span class="line"><span class="comment"> * &lt;caption&gt;Summary of Deque methods&lt;/caption&gt;</span></span><br><span class="line"><span class="comment"> *  &lt;tr&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td ALIGN=CENTER COLSPAN = 2&gt; &lt;b&gt;First Element (Head)&lt;/b&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td ALIGN=CENTER COLSPAN = 2&gt; &lt;b&gt;Last Element (Tail)&lt;/b&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *  &lt;/tr&gt;</span></span><br><span class="line"><span class="comment"> *  &lt;tr&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td ALIGN=CENTER&gt;&lt;em&gt;Throws exception&lt;/em&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td ALIGN=CENTER&gt;&lt;em&gt;Special value&lt;/em&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td ALIGN=CENTER&gt;&lt;em&gt;Throws exception&lt;/em&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td ALIGN=CENTER&gt;&lt;em&gt;Special value&lt;/em&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *  &lt;/tr&gt;</span></span><br><span class="line"><span class="comment"> *  &lt;tr&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td&gt;&lt;b&gt;Insert&lt;/b&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td&gt;&#123;<span class="doctag">@link</span> Deque#addFirst addFirst(e)&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td&gt;&#123;<span class="doctag">@link</span> Deque#offerFirst offerFirst(e)&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td&gt;&#123;<span class="doctag">@link</span> Deque#addLast addLast(e)&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td&gt;&#123;<span class="doctag">@link</span> Deque#offerLast offerLast(e)&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *  &lt;/tr&gt;</span></span><br><span class="line"><span class="comment"> *  &lt;tr&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td&gt;&lt;b&gt;Remove&lt;/b&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td&gt;&#123;<span class="doctag">@link</span> Deque#removeFirst removeFirst()&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td&gt;&#123;<span class="doctag">@link</span> Deque#pollFirst pollFirst()&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td&gt;&#123;<span class="doctag">@link</span> Deque#removeLast removeLast()&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td&gt;&#123;<span class="doctag">@link</span> Deque#pollLast pollLast()&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *  &lt;/tr&gt;</span></span><br><span class="line"><span class="comment"> *  &lt;tr&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td&gt;&lt;b&gt;Examine&lt;/b&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td&gt;&#123;<span class="doctag">@link</span> Deque#getFirst getFirst()&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td&gt;&#123;<span class="doctag">@link</span> Deque#peekFirst peekFirst()&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td&gt;&#123;<span class="doctag">@link</span> Deque#getLast getLast()&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;td&gt;&#123;<span class="doctag">@link</span> Deque#peekLast peekLast()&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"> *  &lt;/tr&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/table&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>  <table border cellpadding="3" cellspacing="1">  <caption>Summary of Deque methods</caption>   <tr>     <td></td>     <td align="CENTER" colspan="2"> <b>First Element (Head)</b></td>     <td align="CENTER" colspan="2"> <b>Last Element (Tail)</b></td>   </tr>   <tr>     <td></td>     <td align="CENTER"><em>Throws exception</em></td>     <td align="CENTER"><em>Special value</em></td>     <td align="CENTER"><em>Throws exception</em></td>     <td align="CENTER"><em>Special value</em></td>   </tr>   <tr>     <td><b>Insert</b></td>     <td>{@link Deque#addFirst addFirst(e)}</td>     <td>{@link Deque#offerFirst offerFirst(e)}</td>     <td>{@link Deque#addLast addLast(e)}</td>     <td>{@link Deque#offerLast offerLast(e)}</td>   </tr>   <tr>     <td><b>Remove</b></td>     <td>{@link Deque#removeFirst removeFirst()}</td>     <td>{@link Deque#pollFirst pollFirst()}</td>     <td>{@link Deque#removeLast removeLast()}</td>     <td>{@link Deque#pollLast pollLast()}</td>   </tr>   <tr>     <td><b>Examine</b></td>     <td>{@link Deque#getFirst getFirst()}</td>     <td>{@link Deque#peekFirst peekFirst()}</td>     <td>{@link Deque#getLast getLast()}</td>     <td>{@link Deque#peekLast peekLast()}</td>   </tr>  </table><h3 id="第一部分：两侧的插入和删除"><a href="#第一部分：两侧的插入和删除" class="headerlink" title="第一部分：两侧的插入和删除"></a>第一部分：两侧的插入和删除</h3><p>源码分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Inserts the specified element at the front of this deque if it is</span></span><br><span class="line"><span class="comment">    * possible to do so immediately without violating capacity restrictions,</span></span><br><span class="line"><span class="comment">    * throwing an &#123;<span class="doctag">@code</span> IllegalStateException&#125; if no space is currently</span></span><br><span class="line"><span class="comment">    * available.  When using a capacity-restricted deque, it is generally</span></span><br><span class="line"><span class="comment">    * preferable to use method &#123;<span class="doctag">@link</span> #offerFirst&#125;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> e the element to add</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalStateException if the element cannot be added at this</span></span><br><span class="line"><span class="comment">    *         time due to capacity restrictions</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ClassCastException if the class of the specified element</span></span><br><span class="line"><span class="comment">    *         prevents it from being added to this deque</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if the specified element is null and this</span></span><br><span class="line"><span class="comment">    *         deque does not permit null elements</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalArgumentException if some property of the specified</span></span><br><span class="line"><span class="comment">    *         element prevents it from being added to this deque</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Inserts the specified element at the end of this deque if it is</span></span><br><span class="line"><span class="comment">    * possible to do so immediately without violating capacity restrictions,</span></span><br><span class="line"><span class="comment">    * throwing an &#123;<span class="doctag">@code</span> IllegalStateException&#125; if no space is currently</span></span><br><span class="line"><span class="comment">    * available.  When using a capacity-restricted deque, it is generally</span></span><br><span class="line"><span class="comment">    * preferable to use method &#123;<span class="doctag">@link</span> #offerLast&#125;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #add&#125;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> e the element to add</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalStateException if the element cannot be added at this</span></span><br><span class="line"><span class="comment">    *         time due to capacity restrictions</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ClassCastException if the class of the specified element</span></span><br><span class="line"><span class="comment">    *         prevents it from being added to this deque</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if the specified element is null and this</span></span><br><span class="line"><span class="comment">    *         deque does not permit null elements</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalArgumentException if some property of the specified</span></span><br><span class="line"><span class="comment">    *         element prevents it from being added to this deque</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Inserts the specified element at the front of this deque unless it would</span></span><br><span class="line"><span class="comment">    * violate capacity restrictions.  When using a capacity-restricted deque,</span></span><br><span class="line"><span class="comment">    * this method is generally preferable to the &#123;<span class="doctag">@link</span> #addFirst&#125; method,</span></span><br><span class="line"><span class="comment">    * which can fail to insert an element only by throwing an exception.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> e the element to add</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the element was added to this deque, else</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> false&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ClassCastException if the class of the specified element</span></span><br><span class="line"><span class="comment">    *         prevents it from being added to this deque</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if the specified element is null and this</span></span><br><span class="line"><span class="comment">    *         deque does not permit null elements</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalArgumentException if some property of the specified</span></span><br><span class="line"><span class="comment">    *         element prevents it from being added to this deque</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Inserts the specified element at the end of this deque unless it would</span></span><br><span class="line"><span class="comment">    * violate capacity restrictions.  When using a capacity-restricted deque,</span></span><br><span class="line"><span class="comment">    * this method is generally preferable to the &#123;<span class="doctag">@link</span> #addLast&#125; method,</span></span><br><span class="line"><span class="comment">    * which can fail to insert an element only by throwing an exception.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> e the element to add</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the element was added to this deque, else</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> false&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ClassCastException if the class of the specified element</span></span><br><span class="line"><span class="comment">    *         prevents it from being added to this deque</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if the specified element is null and this</span></span><br><span class="line"><span class="comment">    *         deque does not permit null elements</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalArgumentException if some property of the specified</span></span><br><span class="line"><span class="comment">    *         element prevents it from being added to this deque</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">offerLast</span><span class="params">(E e)</span></span>;</span><br><span class="line">   </span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Retrieves and removes the first element of this deque.  This method</span></span><br><span class="line"><span class="comment">    * differs from &#123;<span class="doctag">@link</span> #pollFirst pollFirst&#125; only in that it throws an</span></span><br><span class="line"><span class="comment">    * exception if this deque is empty.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the head of this deque</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchElementException if this deque is empty</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">E <span class="title">removeFirst</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Retrieves and removes the last element of this deque.  This method</span></span><br><span class="line"><span class="comment">    * differs from &#123;<span class="doctag">@link</span> #pollLast pollLast&#125; only in that it throws an</span></span><br><span class="line"><span class="comment">    * exception if this deque is empty.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the tail of this deque</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchElementException if this deque is empty</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">E <span class="title">removeLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Retrieves and removes the first element of this deque,</span></span><br><span class="line"><span class="comment">    * or returns &#123;<span class="doctag">@code</span> null&#125; if this deque is empty.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the head of this deque, or &#123;<span class="doctag">@code</span> null&#125; if this deque is empty</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">E <span class="title">pollFirst</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Retrieves and removes the last element of this deque,</span></span><br><span class="line"><span class="comment">    * or returns &#123;<span class="doctag">@code</span> null&#125; if this deque is empty.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the tail of this deque, or &#123;<span class="doctag">@code</span> null&#125; if this deque is empty</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">E <span class="title">pollLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Retrieves, but does not remove, the first element of this deque.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * This method differs from &#123;<span class="doctag">@link</span> #peekFirst peekFirst&#125; only in that it</span></span><br><span class="line"><span class="comment">    * throws an exception if this deque is empty.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the head of this deque</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchElementException if this deque is empty</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">E <span class="title">getFirst</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Retrieves, but does not remove, the last element of this deque.</span></span><br><span class="line"><span class="comment">    * This method differs from &#123;<span class="doctag">@link</span> #peekLast peekLast&#125; only in that it</span></span><br><span class="line"><span class="comment">    * throws an exception if this deque is empty.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the tail of this deque</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchElementException if this deque is empty</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">E <span class="title">getLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Retrieves, but does not remove, the first element of this deque,</span></span><br><span class="line"><span class="comment">    * or returns &#123;<span class="doctag">@code</span> null&#125; if this deque is empty.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the head of this deque, or &#123;<span class="doctag">@code</span> null&#125; if this deque is empty</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">E <span class="title">peekFirst</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Retrieves, but does not remove, the last element of this deque,</span></span><br><span class="line"><span class="comment">    * or returns &#123;<span class="doctag">@code</span> null&#125; if this deque is empty.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the tail of this deque, or &#123;<span class="doctag">@code</span> null&#125; if this deque is empty</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">E <span class="title">peekLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Removes the first occurrence of the specified element from this deque.</span></span><br><span class="line"><span class="comment">    * If the deque does not contain the element, it is unchanged.</span></span><br><span class="line"><span class="comment">    * More formally, removes the first element &#123;<span class="doctag">@code</span> e&#125; such that</span></span><br><span class="line"><span class="comment">    * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">    * (if such an element exists).</span></span><br><span class="line"><span class="comment">    * Returns &#123;<span class="doctag">@code</span> true&#125; if this deque contained the specified element</span></span><br><span class="line"><span class="comment">    * (or equivalently, if this deque changed as a result of the call).</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> o element to be removed from this deque, if present</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if an element was removed as a result of this call</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ClassCastException if the class of the specified element</span></span><br><span class="line"><span class="comment">    *         is incompatible with this deque</span></span><br><span class="line"><span class="comment">    * (&lt;a href="Collection.html#optional-restrictions"&gt;optional&lt;/a&gt;)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if the specified element is null and this</span></span><br><span class="line"><span class="comment">    *         deque does not permit null elements</span></span><br><span class="line"><span class="comment">    * (&lt;a href="Collection.html#optional-restrictions"&gt;optional&lt;/a&gt;)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">removeFirstOccurrence</span><span class="params">(Object o)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Removes the last occurrence of the specified element from this deque.</span></span><br><span class="line"><span class="comment">    * If the deque does not contain the element, it is unchanged.</span></span><br><span class="line"><span class="comment">    * More formally, removes the last element &#123;<span class="doctag">@code</span> e&#125; such that</span></span><br><span class="line"><span class="comment">    * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">    * (if such an element exists).</span></span><br><span class="line"><span class="comment">    * Returns &#123;<span class="doctag">@code</span> true&#125; if this deque contained the specified element</span></span><br><span class="line"><span class="comment">    * (or equivalently, if this deque changed as a result of the call).</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> o element to be removed from this deque, if present</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if an element was removed as a result of this call</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ClassCastException if the class of the specified element</span></span><br><span class="line"><span class="comment">    *         is incompatible with this deque</span></span><br><span class="line"><span class="comment">    * (&lt;a href="Collection.html#optional-restrictions"&gt;optional&lt;/a&gt;)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if the specified element is null and this</span></span><br><span class="line"><span class="comment">    *         deque does not permit null elements</span></span><br><span class="line"><span class="comment">    * (&lt;a href="Collection.html#optional-restrictions"&gt;optional&lt;/a&gt;)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">removeLastOccurrence</span><span class="params">(Object o)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p>添加队首： addFirst、offerFirst; 注意区别</p></li><li><p>添加队尾巴： addLast 、 offerLast； 注意区别</p></li><li><p>删除队首： removeFirst 、pollFirst; 注意区别</p></li><li><p>删除队尾巴: removeLast、 pollLast; 注意区别</p></li><li><p>获取队头: getFirst、 peekFirst ; 注意区别</p></li><li><p>获取队尾巴： getLast、 peekLast; 注意区别</p></li><li><p>removeFirstOcurrence: 删除掉第一个匹配的元素</p></li><li><p>removeLastOccurrence: 删除掉最后一个匹配的</p></li></ul><p>疑问： removeLastOccurrence怎么知道最后一个呢？ </p><blockquote><p>TODO: 阅读removeLastOccurrence 的实现源码</p></blockquote><h3 id="第二部分：Queue的"><a href="#第二部分：Queue的" class="headerlink" title="第二部分：Queue的"></a>第二部分：Queue的</h3><p>源码上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// *** Queue methods ***</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inserts the specified element into the queue represented by this deque</span></span><br><span class="line"><span class="comment"> * (in other words, at the tail of this deque) if it is possible to do so</span></span><br><span class="line"><span class="comment"> * immediately without violating capacity restrictions, returning</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> true&#125; upon success and throwing an</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> IllegalStateException&#125; if no space is currently available.</span></span><br><span class="line"><span class="comment"> * When using a capacity-restricted deque, it is generally preferable to</span></span><br><span class="line"><span class="comment"> * use &#123;<span class="doctag">@link</span> #offer(Object) offer&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #addLast&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e the element to add</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException if the element cannot be added at this</span></span><br><span class="line"><span class="comment"> *         time due to capacity restrictions</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassCastException if the class of the specified element</span></span><br><span class="line"><span class="comment"> *         prevents it from being added to this deque</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the specified element is null and this</span></span><br><span class="line"><span class="comment"> *         deque does not permit null elements</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if some property of the specified</span></span><br><span class="line"><span class="comment"> *         element prevents it from being added to this deque</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inserts the specified element into the queue represented by this deque</span></span><br><span class="line"><span class="comment"> * (in other words, at the tail of this deque) if it is possible to do so</span></span><br><span class="line"><span class="comment"> * immediately without violating capacity restrictions, returning</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> true&#125; upon success and &#123;<span class="doctag">@code</span> false&#125; if no space is currently</span></span><br><span class="line"><span class="comment"> * available.  When using a capacity-restricted deque, this method is</span></span><br><span class="line"><span class="comment"> * generally preferable to the &#123;<span class="doctag">@link</span> #add&#125; method, which can fail to</span></span><br><span class="line"><span class="comment"> * insert an element only by throwing an exception.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #offerLast&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e the element to add</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the element was added to this deque, else</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> false&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassCastException if the class of the specified element</span></span><br><span class="line"><span class="comment"> *         prevents it from being added to this deque</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the specified element is null and this</span></span><br><span class="line"><span class="comment"> *         deque does not permit null elements</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if some property of the specified</span></span><br><span class="line"><span class="comment"> *         element prevents it from being added to this deque</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves and removes the head of the queue represented by this deque</span></span><br><span class="line"><span class="comment"> * (in other words, the first element of this deque).</span></span><br><span class="line"><span class="comment"> * This method differs from &#123;<span class="doctag">@link</span> #poll poll&#125; only in that it throws an</span></span><br><span class="line"><span class="comment"> * exception if this deque is empty.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #removeFirst()&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the head of the queue represented by this deque</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchElementException if this deque is empty</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">E <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves and removes the head of the queue represented by this deque</span></span><br><span class="line"><span class="comment"> * (in other words, the first element of this deque), or returns</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> null&#125; if this deque is empty.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #pollFirst()&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the first element of this deque, or &#123;<span class="doctag">@code</span> null&#125; if</span></span><br><span class="line"><span class="comment"> *         this deque is empty</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">E <span class="title">poll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves, but does not remove, the head of the queue represented by</span></span><br><span class="line"><span class="comment"> * this deque (in other words, the first element of this deque).</span></span><br><span class="line"><span class="comment"> * This method differs from &#123;<span class="doctag">@link</span> #peek peek&#125; only in that it throws an</span></span><br><span class="line"><span class="comment"> * exception if this deque is empty.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #getFirst()&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the head of the queue represented by this deque</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchElementException if this deque is empty</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">E <span class="title">element</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves, but does not remove, the head of the queue represented by</span></span><br><span class="line"><span class="comment"> * this deque (in other words, the first element of this deque), or</span></span><br><span class="line"><span class="comment"> * returns &#123;<span class="doctag">@code</span> null&#125; if this deque is empty.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #peekFirst()&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the head of the queue represented by this deque, or</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> null&#125; if this deque is empty</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">E <span class="title">peek</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>Queue的解释部分，可以查阅前面一篇介绍。</p><h3 id="第三部分：Stack"><a href="#第三部分：Stack" class="headerlink" title="第三部分：Stack"></a>第三部分：Stack</h3><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// *** Stack methods ***</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Pushes an element onto the stack represented by this deque (in other</span></span><br><span class="line"><span class="comment">    * words, at the head of this deque) if it is possible to do so</span></span><br><span class="line"><span class="comment">    * immediately without violating capacity restrictions, throwing an</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> IllegalStateException&#125; if no space is currently available.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #addFirst&#125;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> e the element to push</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalStateException if the element cannot be added at this</span></span><br><span class="line"><span class="comment">    *         time due to capacity restrictions</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ClassCastException if the class of the specified element</span></span><br><span class="line"><span class="comment">    *         prevents it from being added to this deque</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if the specified element is null and this</span></span><br><span class="line"><span class="comment">    *         deque does not permit null elements</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalArgumentException if some property of the specified</span></span><br><span class="line"><span class="comment">    *         element prevents it from being added to this deque</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Pops an element from the stack represented by this deque.  In other</span></span><br><span class="line"><span class="comment">    * words, removes and returns the first element of this deque.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #removeFirst()&#125;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the element at the front of this deque (which is the top</span></span><br><span class="line"><span class="comment">    *         of the stack represented by this deque)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchElementException if this deque is empty</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">E <span class="title">pop</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="第四部分：Collection"><a href="#第四部分：Collection" class="headerlink" title="第四部分：Collection"></a>第四部分：Collection</h3><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// *** Collection methods ***</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Removes the first occurrence of the specified element from this deque.</span></span><br><span class="line"><span class="comment">    * If the deque does not contain the element, it is unchanged.</span></span><br><span class="line"><span class="comment">    * More formally, removes the first element &#123;<span class="doctag">@code</span> e&#125; such that</span></span><br><span class="line"><span class="comment">    * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">    * (if such an element exists).</span></span><br><span class="line"><span class="comment">    * Returns &#123;<span class="doctag">@code</span> true&#125; if this deque contained the specified element</span></span><br><span class="line"><span class="comment">    * (or equivalently, if this deque changed as a result of the call).</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #removeFirstOccurrence(Object)&#125;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> o element to be removed from this deque, if present</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if an element was removed as a result of this call</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ClassCastException if the class of the specified element</span></span><br><span class="line"><span class="comment">    *         is incompatible with this deque</span></span><br><span class="line"><span class="comment">    * (&lt;a href="Collection.html#optional-restrictions"&gt;optional&lt;/a&gt;)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if the specified element is null and this</span></span><br><span class="line"><span class="comment">    *         deque does not permit null elements</span></span><br><span class="line"><span class="comment">    * (&lt;a href="Collection.html#optional-restrictions"&gt;optional&lt;/a&gt;)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Returns &#123;<span class="doctag">@code</span> true&#125; if this deque contains the specified element.</span></span><br><span class="line"><span class="comment">    * More formally, returns &#123;<span class="doctag">@code</span> true&#125; if and only if this deque contains</span></span><br><span class="line"><span class="comment">    * at least one element &#123;<span class="doctag">@code</span> e&#125; such that</span></span><br><span class="line"><span class="comment">    * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> o element whose presence in this deque is to be tested</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this deque contains the specified element</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ClassCastException if the type of the specified element</span></span><br><span class="line"><span class="comment">    *         is incompatible with this deque</span></span><br><span class="line"><span class="comment">    * (&lt;a href="Collection.html#optional-restrictions"&gt;optional&lt;/a&gt;)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if the specified element is null and this</span></span><br><span class="line"><span class="comment">    *         deque does not permit null elements</span></span><br><span class="line"><span class="comment">    * (&lt;a href="Collection.html#optional-restrictions"&gt;optional&lt;/a&gt;)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Returns the number of elements in this deque.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the number of elements in this deque</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Returns an iterator over the elements in this deque in proper sequence.</span></span><br><span class="line"><span class="comment">    * The elements will be returned in order from first (head) to last (tail).</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> an iterator over the elements in this deque in proper sequence</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Returns an iterator over the elements in this deque in reverse</span></span><br><span class="line"><span class="comment">    * sequential order.  The elements will be returned in order from</span></span><br><span class="line"><span class="comment">    * last (tail) to first (head).</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> an iterator over the elements in this deque in reverse</span></span><br><span class="line"><span class="comment">    * sequence</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">Iterator&lt;E&gt; <span class="title">descendingIterator</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h2 id="ArrayDeque"><a href="#ArrayDeque" class="headerlink" title="ArrayDeque"></a>ArrayDeque</h2><p>为什么学习这个东西？ 请查看源码注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Resizable-array implementation of the &#123;@link Deque&#125; interface.  Array</span></span><br><span class="line"><span class="comment"> * deques have no capacity restrictions; they grow as necessary to support</span></span><br><span class="line"><span class="comment"> * usage.  They are not thread-safe; in the absence of external</span></span><br><span class="line"><span class="comment"> * synchronization, they do not support concurrent access by multiple threads.</span></span><br><span class="line"><span class="comment"> * Null elements are prohibited.  This class is likely to be faster than</span></span><br><span class="line"><span class="comment"> * &#123;@link Stack&#125; when used as a stack, and faster than &#123;@link LinkedList&#125;</span></span><br><span class="line"><span class="comment"> * when used as a queue.</span></span><br><span class="line"><span class="comment"> * /</span></span><br></pre></td></tr></table></figure><blockquote><p>This class is likely to be faster than<br> {@link Stack} when used as a stack, and faster than {@link LinkedList}<br> when used as a queue.</p></blockquote><p><code>Resizable-array implementation of the Deque interface</code> 动态的调整大小的数组实现了Deque，听起来有没有有点像：ArrayList？ </p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDeque</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">                           <span class="keyword">implements</span> <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The array in which the elements of the deque are stored.</span></span><br><span class="line"><span class="comment">    * The capacity of the deque is the length of this array, which is</span></span><br><span class="line"><span class="comment">    * always a power of two. The array is never allowed to become</span></span><br><span class="line"><span class="comment">    * full, except transiently within an addX method where it is</span></span><br><span class="line"><span class="comment">    * resized (see doubleCapacity) immediately upon becoming full,</span></span><br><span class="line"><span class="comment">    * thus avoiding head and tail wrapping around to equal each</span></span><br><span class="line"><span class="comment">    * other.  We also guarantee that all array cells not holding</span></span><br><span class="line"><span class="comment">    * deque elements are always null.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> Object[] elements; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The index of the element at the head of the deque (which is the</span></span><br><span class="line"><span class="comment">    * element that would be removed by remove() or pop()); or an</span></span><br><span class="line"><span class="comment">    * arbitrary number equal to tail if the deque is empty.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> <span class="keyword">int</span> head;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The index at which the next element would be added to the tail</span></span><br><span class="line"><span class="comment">    * of the deque (via addLast(E), add(E), or push(E)).</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> <span class="keyword">int</span> tail;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The minimum capacity that we'll use for a newly created deque.</span></span><br><span class="line"><span class="comment">    * Must be a power of 2.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_INITIAL_CAPACITY = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty array deque with an initial capacity</span></span><br><span class="line"><span class="comment"> * sufficient to hold 16 elements.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayDeque</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    elements = <span class="keyword">new</span> Object[<span class="number">16</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty array deque with an initial capacity</span></span><br><span class="line"><span class="comment"> * sufficient to hold the specified number of elements.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> numElements  lower bound on initial capacity of the deque</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayDeque</span><span class="params">(<span class="keyword">int</span> numElements)</span> </span>&#123;</span><br><span class="line">    allocateElements(numElements);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a deque containing the elements of the specified</span></span><br><span class="line"><span class="comment"> * collection, in the order they are returned by the collection's</span></span><br><span class="line"><span class="comment"> * iterator.  (The first element returned by the collection's</span></span><br><span class="line"><span class="comment"> * iterator becomes the first element, or &lt;i&gt;front&lt;/i&gt; of the</span></span><br><span class="line"><span class="comment"> * deque.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c the collection whose elements are to be placed into the deque</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayDeque</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    allocateElements(c.size());</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析： ArrayDeque的构造函数看默认的 16 长度数组； 分析查看一下allocateElements</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Allocates empty array to hold the given number of elements.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> numElements  the number of elements to hold</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">allocateElements</span><span class="params">(<span class="keyword">int</span> numElements)</span> </span>&#123;</span><br><span class="line">       elements = <span class="keyword">new</span> Object[calculateSize(numElements)];</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateSize</span><span class="params">(<span class="keyword">int</span> numElements)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> initialCapacity = MIN_INITIAL_CAPACITY;</span><br><span class="line">       <span class="comment">// Find the best power of two to hold elements.</span></span><br><span class="line">       <span class="comment">// Tests "&lt;=" because arrays aren't kept full.</span></span><br><span class="line">       <span class="keyword">if</span> (numElements &gt;= initialCapacity) &#123;</span><br><span class="line">           initialCapacity = numElements;</span><br><span class="line">           initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">1</span>);</span><br><span class="line">           initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">2</span>);</span><br><span class="line">           initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">4</span>);</span><br><span class="line">           initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">8</span>);</span><br><span class="line">           initialCapacity |= (initialCapacity &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">           initialCapacity++;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)   <span class="comment">// Too many elements, must back off</span></span><br><span class="line">               initialCapacity &gt;&gt;&gt;= <span class="number">1</span>;<span class="comment">// Good luck allocating 2 ^ 30 elements</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> initialCapacity;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>查阅网上资料分析：calculateSize的实现</p><p>主要解决 <code>&gt;&gt;&gt;</code> 这个是一个啥意思操作？</p><ul><li><code>&gt;&gt;&gt;</code> : 无符号右移，忽略符号位，空位都以0 补齐。</li><li><code>|</code>: 位或运算； 按照位进行操作，逢1为1.</li></ul><p>int java 是 32位；  (-2)^31 到 2^31-1; 最高位是符号为 0正数，1负数</p><p>我们知道，计算机存储任何数据都是采用二进制形式，所以一个int值为80的数在内存中可能是这样的：</p><blockquote><p>0000 0000 0000 0000 0000 0000 0101 0000</p></blockquote><p>比80大的最近的2次幂是128，其值是这样的：</p><blockquote><p>0000 0000 0000 0000 0000 0000 1000 0000</p></blockquote><p>我们多找几组数据就可以发现规律：</p><p>每个2的次幂用二进制表示时，只有一位为 1，其余位均为 0（不包含符合位）</p><p>要找到比一个数大的2的次幂（在正数范围内），只需要将其最高位左移一位（从左往右第一个 1 出现的位置），其余位置 0 即可。</p><p>但从实践上讲，没有可行的方法能够进行以上操作，即使通过&amp;操作符可以将某一位置 0 或置 1，也无法确认最高位出现的位置，也就是基于最高位进行操作不可行。</p><p>但还有一个很整齐的数字可以被我们利用，那就是 2n-1，我们看下128-1=127的表示形式：</p><blockquote><p>0000 0000 0000 0000 0000 0000 0111 1111</p></blockquote><p>把它和80对比一下：</p><blockquote><p>0000 0000 0000 0000 0000 0000 0101 0000 //80<br>0000 0000 0000 0000 0000 0000 0111 1111 //127</p></blockquote><p>可以发现，我们只要把80从最高位起每一位全置为1，就可以得到离它最近且比它大的 2n-1，最后再执行一次+1操作即可。具体操作步骤为（为了演示，这里使用了很大的数字）：<br>原值：</p><blockquote><p>0011 0000 0000 0000 0000 0000 0000 0010</p></blockquote><p>无符号右移1位</p><blockquote><p>0001 1000 0000 0000 0000 0000 0000 0001</p></blockquote><p>与原值|操作：</p><blockquote><p>0011 1000 0000 0000 0000 0000 0000 0011</p></blockquote><p>可以看到最高2位都是1了，也仅能保证前两位为1，这时就可以直接移动两位</p><p>无符号右移2位</p><blockquote><p>0000 1110 0000 0000 0000 0000 0000 0000</p></blockquote><p>与原值|操作：</p><blockquote><p>0011 1110 0000 0000 0000 0000 0000 0011</p></blockquote><p>此时就可以保证前4位为1了，下一步移动4位</p><p>无符号右移4位</p><blockquote><p>0000 0011 1110 0000 0000 0000 0000 0000</p></blockquote><p>与原值|操作：</p><blockquote><p>0011 1111 1110 0000 0000 0000 0000 0011</p></blockquote><p>此时就可以保证前8位为1了，下一步移动8位</p><p>无符号右移8位</p><blockquote><p>0000 0000 0011 1111 1110 0000 0000 0000</p></blockquote><p>与原值|操作：</p><blockquote><p>0011 1111 1111 1111 1110 0000 0000 0011</p></blockquote><p>此时前16位都是1，只需要再移位操作一次，即可把32位都置为1了。</p><p>无符号右移16位</p><blockquote><p>0000 0000 0000 0000 0011 1111 1111 1111</p></blockquote><p>与原值|操作：</p><blockquote><p>0011 1111 1111 1111 1111 1111 1111 1111</p></blockquote><p>进行+1操作：</p><blockquote><p>0100 0000 0000 0000 0000 0000 0000 0000</p></blockquote><p>如此经过11步操作后，我们终于找到了合适的2次幂。写成代码就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">1</span>);</span><br><span class="line">initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">2</span>);</span><br><span class="line">initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">4</span>);</span><br><span class="line">initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">8</span>);</span><br><span class="line">initialCapacity |= (initialCapacity &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">initialCapacity++;</span><br></pre></td></tr></table></figure><p>不过为了防止溢出，导致出现负值（如果把符号位置为1，就为负值了）还需要一次校验：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)   <span class="comment">// Too many elements, must back off</span></span><br><span class="line">     initialCapacity &gt;&gt;&gt;= <span class="number">1</span>;<span class="comment">// Good luck allocating 2 ^ 30 elements</span></span><br></pre></td></tr></table></figure><p>至此，初始化的过程就完毕了。</p><p>这就是为什么效率高的原因：里面包含很多位运算；</p><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Inserts the specified element at the front of this deque.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> e the element to add</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if the specified element is null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       elements[head = (head - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)] = e;</span><br><span class="line">       <span class="keyword">if</span> (head == tail)</span><br><span class="line">           doubleCapacity();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Inserts the specified element at the end of this deque.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #add&#125;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> e the element to add</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if the specified element is null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       elements[tail] = e;</span><br><span class="line">       <span class="keyword">if</span> ( (tail = (tail + <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)) == head)</span><br><span class="line">           doubleCapacity();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>elements[head = (head - 1) &amp; (elements.length - 1)] = e;</p></blockquote><p>完全没搞明白？？？</p><p>很明显这是一个赋值操作，而且应该是给head之前的位置赋值，所以head = (head - 1)是合理的操作，那这个&amp; (elements.length - 1)又表示什么呢？</p><p>在之前的定义与初始化中，elements.length要求为2的次幂，也就是 2n 形式，那这个&amp; (elements.length - 1)也就是 2n-1 了，在内存中用二进制表示就是从最高位起每一位都是1。我们还以之前的127为例：</p><blockquote><p>0000 0000 0000 0000 0000 0000 0111 1111</p></blockquote><p>&amp;就是按位与，全1才为1。那么任意一个正数和127进行按位与操作后，都只有最右侧7位被保留了下来，其他位全部置0（除符号位），而对一个负数而言，则会把它的符号位置为0，&amp;操作后会变成正数。比如-1的值是1111 … 1111（32个1），和127按位操作后结果就变成了127 。所以，*<em>对于正数它就是取模，对于负数，它就是把元素插入了数组的结尾</em>。所以，这个数组并不是向前添加元素就向前扩展，向后添加就向后扩展，它是循环的，类似这样:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tNc79gy1fvmysj8pypj30gq0frgo9.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>初始时，head与tail都指向a[0]，这时候数组是空的。当执行addFirst()方法时，head指针移动一位，指向a[elements.length-1]，并赋值，也就是给a[elements.length-1]赋值。当执行addLast()操作时，先给a[0]赋值，再将tail指针移动一位，指向a[1]。所以执行完之后head指针位置是有值的，而tail位置是没有值的。</p><p>随着添加操作执行，数组总会占满，那么怎么判断它满了然后扩容呢？首先，如果head==tail，则说明数组是空的，所以在添加元素时必须保证head与tail不相等。假如现在只有一个位置可以添加元素了，类似下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tNc79gy1fvmz4l6frzj30gr0g577p.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>此时，tail指向了a[8]，head已经填充到a[9]了，只有a[8]是空闲的。很显然，不管是addFirst还是addLast，再添加一个元素后都会导致head==tail。这时候就不得不扩容了，因为head==tail是判断是否为空的条件。扩容就比较简单了，直接翻倍，我们看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Doubles the capacity of this deque.  Call only when full, i.e.,</span></span><br><span class="line"><span class="comment">    * when head and tail have wrapped around to become equal.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doubleCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 只有head等于tail才扩容</span></span><br><span class="line">       <span class="keyword">assert</span> head == tail;</span><br><span class="line">       <span class="keyword">int</span> p = head;</span><br><span class="line">       <span class="keyword">int</span> n = elements.length;</span><br><span class="line">       <span class="keyword">int</span> r = n - p; <span class="comment">// number of elements to the right of p</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//直接翻倍</span></span><br><span class="line">       <span class="keyword">int</span> newCapacity = n &lt;&lt; <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (newCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Sorry, deque too big"</span>);</span><br><span class="line">       Object[] a = <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">       <span class="comment">// 左侧数据拷贝</span></span><br><span class="line">       System.arraycopy(elements, p, a, <span class="number">0</span>, r);</span><br><span class="line">       <span class="comment">// 右侧数据拷贝</span></span><br><span class="line">       System.arraycopy(elements, <span class="number">0</span>, a, r, p);</span><br><span class="line">       elements = a;</span><br><span class="line">       head = <span class="number">0</span>;</span><br><span class="line">       tail = n;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>ArrayDeque通过循环数组的方式实现的循环队列，并通过位运算来提高效率，容量大小始终是2的次幂。当数据充满数组时，它的容量将翻倍。作为Stack，因为<strong>其非线程安全</strong>所以效率高于java.util.Stack，<strong>而作为队列，因为其不需要结点支持所以更快（LinkedList使用Node存储数据，这个对象频繁的new与clean，使得其效率略低于ArrayDeque）。但队列更多的用来处理多线程问题，所以我们更多的使用BlockingQueue，关于多线程的问题，以后再认真研究。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java集合06-Deque和ArrayDeque&quot;&gt;&lt;a href=&quot;#Java集合06-Deque和ArrayDeque&quot; class=&quot;headerlink&quot; title=&quot;Java集合06-Deque和ArrayDeque&quot;&gt;&lt;/a&gt;Java集合06-De
      
    
    </summary>
    
    
    
      <category term="集合" scheme="http://lmwtuedu.cn/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Java集合04-Iterable和Collection</title>
    <link href="http://lmwtuedu.cn/2018/09/26/2018-09-26-Java%E9%9B%86%E5%90%8804-Iterable_Collection/"/>
    <id>http://lmwtuedu.cn/2018/09/26/2018-09-26-Java集合04-Iterable_Collection/</id>
    <published>2018-09-25T16:00:00.000Z</published>
    <updated>2019-08-15T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java集合04-Iterable和Collection"><a href="#Java集合04-Iterable和Collection" class="headerlink" title="Java集合04-Iterable和Collection"></a>Java集合04-Iterable和Collection</h1><h2 id="Iterable"><a href="#Iterable" class="headerlink" title="Iterable"></a>Iterable</h2><p>注意：Java分析ArrayList的里面提及到Iterable的源码分析。</p><p>我们想要遍历集合时，Java为我们提供了多种选择，通常有以下三种写法：</p><ul><li>for循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,len = strings.size(); i &lt; len; i++)&#123;</span><br><span class="line">Object value = strings.get(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>foreach循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String <span class="keyword">var</span>: strings)&#123;</span><br><span class="line">Object value = <span class="keyword">var</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>iterator</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator iterator = strings.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">Object value = iterator.next();</span><br><span class="line">iterator.remove()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么以上 三种遍历有何区别呢？ for循环我们很熟许，就是根据下标来获取元素，这个特性和数组很吻合； foreach则主要对类似于链表结构的提供支持，例如Linkedlist，链表结构没有下标。 所以使用for循环遍历会大大降低性能。Iterator就是我们今天要讲述的主角，它实际上就是foreach。</p><p>那么，为什么集合可以进行foreach遍历，而我们自己定义的Java对象却不可以呢？有没有办法让任何对象都支持这种遍历方式？下面的内容会告诉我们答案。</p><h3 id="Iterable-1"><a href="#Iterable-1" class="headerlink" title="Iterable"></a>Iterable</h3><p>Iterable是迭代器的意思，作用是为集合类提供for-each循环的支持。由于使用for循环需要通过位置获取元素，而这种获取方式仅有数组支持，其他许多数据结构，比如链表，只能通过查询获取数据，这会大大的降低效率。Iterable就可以让不同的集合类自己提供遍历的最佳方式。</p><p>Iterable的文档声明仅有一句：</p><blockquote><p>Implementing this interface allows an object to be the target of the “for-each loop” statement.</p></blockquote><p>它的作用就是为Java对象提供foreach循环，其主要方法是返回一个Iterator对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>也就是说，如果想让一个Java对象支持foreach，只要实现Iterable接口，然后就可以像集合那样，通过Iterator iterator = strings.iterator()方式，或者使用foreach，进行遍历了。</p><p>Iterator是foreach遍历的主体，它的代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断一个对象集合是否还有下一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取下一个元素</span></span><br><span class="line"><span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除最后一个元素。默认是不支持的，因为在很多情况下其结果不可预测，比如数据集合在此时被修改</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主要将每个元素作为参数发给action来执行特定操作</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>Iterator还有一个子接口，是为需要双向遍历数据时准备的，ArrayList和LinkedList时都会看到它。它主要增加了以下几个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否有前一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取前一个元素</span></span><br><span class="line"><span class="function">E <span class="title">previous</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取下一个元素的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取前一个元素的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换当前元素值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="iterator小结"><a href="#iterator小结" class="headerlink" title="iterator小结"></a>iterator小结</h2><p>在Java中有许多特性都是通过接口来实现的，foreach循环也是。foreach主要是解决for循环依赖下标的问题，为高效遍历更多的数据结构提供了支持。如果你清楚数组和链表的区别，应该就可以回答以下问题了：for与foreach有何区别，哪个更高效？</p><h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://www.jianshu.com/p/8c4dae2c1ae0" target="_blank" rel="noopener">https://www.jianshu.com/p/8c4dae2c1ae0</a></p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>Collection 是List、Queue和Set的超集，它直接继承于 Iterable，也就是所有的Collection集合都支持for-each 循环。 除此之外，Collection也是面向接口编程的典范，通过它可以在多种实现类之间转换，这也是面向编程的魅力之一。</p><p>源码查看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the number of elements in this collection.  If this collection</span></span><br><span class="line"><span class="comment">     * contains more than &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; elements, returns</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the number of elements in this collection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &lt;tt&gt;true&lt;/tt&gt; if this collection contains no elements.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this collection contains no elements</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &lt;tt&gt;true&lt;/tt&gt; if this collection contains the specified element.</span></span><br><span class="line"><span class="comment">     * More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this collection</span></span><br><span class="line"><span class="comment">     * contains at least one element &lt;tt&gt;e&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o element whose presence in this collection is to be tested</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this collection contains the specified</span></span><br><span class="line"><span class="comment">     *         element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException if the type of the specified element</span></span><br><span class="line"><span class="comment">     *         is incompatible with this collection</span></span><br><span class="line"><span class="comment">     *         (&lt;a href="#optional-restrictions"&gt;optional&lt;/a&gt;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified element is null and this</span></span><br><span class="line"><span class="comment">     *         collection does not permit null elements</span></span><br><span class="line"><span class="comment">     *         (&lt;a href="#optional-restrictions"&gt;optional&lt;/a&gt;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an iterator over the elements in this collection.  There are no</span></span><br><span class="line"><span class="comment">     * guarantees concerning the order in which the elements are returned</span></span><br><span class="line"><span class="comment">     * (unless this collection is an instance of some class that provides a</span></span><br><span class="line"><span class="comment">     * guarantee).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an &lt;tt&gt;Iterator&lt;/tt&gt; over the elements in this collection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an array containing all of the elements in this collection.</span></span><br><span class="line"><span class="comment">     * If this collection makes any guarantees as to what order its elements</span></span><br><span class="line"><span class="comment">     * are returned by its iterator, this method must return the elements in</span></span><br><span class="line"><span class="comment">     * the same order.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The returned array will be "safe" in that no references to it are</span></span><br><span class="line"><span class="comment">     * maintained by this collection.  (In other words, this method must</span></span><br><span class="line"><span class="comment">     * allocate a new array even if this collection is backed by an array).</span></span><br><span class="line"><span class="comment">     * The caller is thus free to modify the returned array.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method acts as bridge between array-based and collection-based</span></span><br><span class="line"><span class="comment">     * APIs.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an array containing all of the elements in this collection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object[] toArray();</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Ensures that this collection contains the specified element (optional</span></span><br><span class="line"><span class="comment">     * operation).  Returns &lt;tt&gt;true&lt;/tt&gt; if this collection changed as a</span></span><br><span class="line"><span class="comment">     * result of the call.  (Returns &lt;tt&gt;false&lt;/tt&gt; if this collection does</span></span><br><span class="line"><span class="comment">     * not permit duplicates and already contains the specified element.)&lt;p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Collections that support this operation may place limitations on what</span></span><br><span class="line"><span class="comment">     * elements may be added to this collection.  In particular, some</span></span><br><span class="line"><span class="comment">     * collections will refuse to add &lt;tt&gt;null&lt;/tt&gt; elements, and others will</span></span><br><span class="line"><span class="comment">     * impose restrictions on the type of elements that may be added.</span></span><br><span class="line"><span class="comment">     * Collection classes should clearly specify in their documentation any</span></span><br><span class="line"><span class="comment">     * restrictions on what elements may be added.&lt;p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * If a collection refuses to add a particular element for any reason</span></span><br><span class="line"><span class="comment">     * other than that it already contains the element, it &lt;i&gt;must&lt;/i&gt; throw</span></span><br><span class="line"><span class="comment">     * an exception (rather than returning &lt;tt&gt;false&lt;/tt&gt;).  This preserves</span></span><br><span class="line"><span class="comment">     * the invariant that a collection always contains the specified element</span></span><br><span class="line"><span class="comment">     * after this call returns.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e element whose presence in this collection is to be ensured</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this collection changed as a result of the</span></span><br><span class="line"><span class="comment">     *         call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedOperationException if the &lt;tt&gt;add&lt;/tt&gt; operation</span></span><br><span class="line"><span class="comment">     *         is not supported by this collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException if the class of the specified element</span></span><br><span class="line"><span class="comment">     *         prevents it from being added to this collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified element is null and this</span></span><br><span class="line"><span class="comment">     *         collection does not permit null elements</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if some property of the element</span></span><br><span class="line"><span class="comment">     *         prevents it from being added to this collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalStateException if the element cannot be added at this</span></span><br><span class="line"><span class="comment">     *         time due to insertion restrictions</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes a single instance of the specified element from this</span></span><br><span class="line"><span class="comment">     * collection, if it is present (optional operation).  More formally,</span></span><br><span class="line"><span class="comment">     * removes an element &lt;tt&gt;e&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;, if</span></span><br><span class="line"><span class="comment">     * this collection contains one or more such elements.  Returns</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;true&lt;/tt&gt; if this collection contained the specified element (or</span></span><br><span class="line"><span class="comment">     * equivalently, if this collection changed as a result of the call).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o element to be removed from this collection, if present</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if an element was removed as a result of this call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException if the type of the specified element</span></span><br><span class="line"><span class="comment">     *         is incompatible with this collection</span></span><br><span class="line"><span class="comment">     *         (&lt;a href="#optional-restrictions"&gt;optional&lt;/a&gt;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified element is null and this</span></span><br><span class="line"><span class="comment">     *         collection does not permit null elements</span></span><br><span class="line"><span class="comment">     *         (&lt;a href="#optional-restrictions"&gt;optional&lt;/a&gt;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedOperationException if the &lt;tt&gt;remove&lt;/tt&gt; operation</span></span><br><span class="line"><span class="comment">     *         is not supported by this collection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &lt;tt&gt;true&lt;/tt&gt; if this collection contains all of the elements</span></span><br><span class="line"><span class="comment">     * in the specified collection.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  c collection to be checked for containment in this collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this collection contains all of the elements</span></span><br><span class="line"><span class="comment">     *         in the specified collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException if the types of one or more elements</span></span><br><span class="line"><span class="comment">     *         in the specified collection are incompatible with this</span></span><br><span class="line"><span class="comment">     *         collection</span></span><br><span class="line"><span class="comment">     *         (&lt;a href="#optional-restrictions"&gt;optional&lt;/a&gt;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection contains one</span></span><br><span class="line"><span class="comment">     *         or more null elements and this collection does not permit null</span></span><br><span class="line"><span class="comment">     *         elements</span></span><br><span class="line"><span class="comment">     *         (&lt;a href="#optional-restrictions"&gt;optional&lt;/a&gt;),</span></span><br><span class="line"><span class="comment">     *         or if the specified collection is null.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>    #contains(Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adds all of the elements in the specified collection to this collection</span></span><br><span class="line"><span class="comment">     * (optional operation).  The behavior of this operation is undefined if</span></span><br><span class="line"><span class="comment">     * the specified collection is modified while the operation is in progress.</span></span><br><span class="line"><span class="comment">     * (This implies that the behavior of this call is undefined if the</span></span><br><span class="line"><span class="comment">     * specified collection is this collection, and this collection is</span></span><br><span class="line"><span class="comment">     * nonempty.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c collection containing elements to be added to this collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this collection changed as a result of the call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedOperationException if the &lt;tt&gt;addAll&lt;/tt&gt; operation</span></span><br><span class="line"><span class="comment">     *         is not supported by this collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException if the class of an element of the specified</span></span><br><span class="line"><span class="comment">     *         collection prevents it from being added to this collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection contains a</span></span><br><span class="line"><span class="comment">     *         null element and this collection does not permit null elements,</span></span><br><span class="line"><span class="comment">     *         or if the specified collection is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if some property of an element of the</span></span><br><span class="line"><span class="comment">     *         specified collection prevents it from being added to this</span></span><br><span class="line"><span class="comment">     *         collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalStateException if not all the elements can be added at</span></span><br><span class="line"><span class="comment">     *         this time due to insertion restrictions</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #add(Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes all of this collection's elements that are also contained in the</span></span><br><span class="line"><span class="comment">     * specified collection (optional operation).  After this call returns,</span></span><br><span class="line"><span class="comment">     * this collection will contain no elements in common with the specified</span></span><br><span class="line"><span class="comment">     * collection.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c collection containing elements to be removed from this collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this collection changed as a result of the</span></span><br><span class="line"><span class="comment">     *         call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedOperationException if the &lt;tt&gt;removeAll&lt;/tt&gt; method</span></span><br><span class="line"><span class="comment">     *         is not supported by this collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException if the types of one or more elements</span></span><br><span class="line"><span class="comment">     *         in this collection are incompatible with the specified</span></span><br><span class="line"><span class="comment">     *         collection</span></span><br><span class="line"><span class="comment">     *         (&lt;a href="#optional-restrictions"&gt;optional&lt;/a&gt;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if this collection contains one or more</span></span><br><span class="line"><span class="comment">     *         null elements and the specified collection does not support</span></span><br><span class="line"><span class="comment">     *         null elements</span></span><br><span class="line"><span class="comment">     *         (&lt;a href="#optional-restrictions"&gt;optional&lt;/a&gt;),</span></span><br><span class="line"><span class="comment">     *         or if the specified collection is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #remove(Object)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #contains(Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span></span>;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Retains only the elements in this collection that are contained in the</span></span><br><span class="line"><span class="comment">     * specified collection (optional operation).  In other words, removes from</span></span><br><span class="line"><span class="comment">     * this collection all of its elements that are not contained in the</span></span><br><span class="line"><span class="comment">     * specified collection.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c collection containing elements to be retained in this collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this collection changed as a result of the call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedOperationException if the &lt;tt&gt;retainAll&lt;/tt&gt; operation</span></span><br><span class="line"><span class="comment">     *         is not supported by this collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException if the types of one or more elements</span></span><br><span class="line"><span class="comment">     *         in this collection are incompatible with the specified</span></span><br><span class="line"><span class="comment">     *         collection</span></span><br><span class="line"><span class="comment">     *         (&lt;a href="#optional-restrictions"&gt;optional&lt;/a&gt;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if this collection contains one or more</span></span><br><span class="line"><span class="comment">     *         null elements and the specified collection does not permit null</span></span><br><span class="line"><span class="comment">     *         elements</span></span><br><span class="line"><span class="comment">     *         (&lt;a href="#optional-restrictions"&gt;optional&lt;/a&gt;),</span></span><br><span class="line"><span class="comment">     *         or if the specified collection is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #remove(Object)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #contains(Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes all of the elements from this collection (optional operation).</span></span><br><span class="line"><span class="comment">     * The collection will be empty after this method returns.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedOperationException if the &lt;tt&gt;clear&lt;/tt&gt; operation</span></span><br><span class="line"><span class="comment">     *         is not supported by this collection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Compares the specified object with this collection for equality. &lt;p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * While the &lt;tt&gt;Collection&lt;/tt&gt; interface adds no stipulations to the</span></span><br><span class="line"><span class="comment">     * general contract for the &lt;tt&gt;Object.equals&lt;/tt&gt;, programmers who</span></span><br><span class="line"><span class="comment">     * implement the &lt;tt&gt;Collection&lt;/tt&gt; interface "directly" (in other words,</span></span><br><span class="line"><span class="comment">     * create a class that is a &lt;tt&gt;Collection&lt;/tt&gt; but is not a &lt;tt&gt;Set&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * or a &lt;tt&gt;List&lt;/tt&gt;) must exercise care if they choose to override the</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;Object.equals&lt;/tt&gt;.  It is not necessary to do so, and the simplest</span></span><br><span class="line"><span class="comment">     * course of action is to rely on &lt;tt&gt;Object&lt;/tt&gt;'s implementation, but</span></span><br><span class="line"><span class="comment">     * the implementor may wish to implement a "value comparison" in place of</span></span><br><span class="line"><span class="comment">     * the default "reference comparison."  (The &lt;tt&gt;List&lt;/tt&gt; and</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;Set&lt;/tt&gt; interfaces mandate such value comparisons.)&lt;p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The general contract for the &lt;tt&gt;Object.equals&lt;/tt&gt; method states that</span></span><br><span class="line"><span class="comment">     * equals must be symmetric (in other words, &lt;tt&gt;a.equals(b)&lt;/tt&gt; if and</span></span><br><span class="line"><span class="comment">     * only if &lt;tt&gt;b.equals(a)&lt;/tt&gt;).  The contracts for &lt;tt&gt;List.equals&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * and &lt;tt&gt;Set.equals&lt;/tt&gt; state that lists are only equal to other lists,</span></span><br><span class="line"><span class="comment">     * and sets to other sets.  Thus, a custom &lt;tt&gt;equals&lt;/tt&gt; method for a</span></span><br><span class="line"><span class="comment">     * collection class that implements neither the &lt;tt&gt;List&lt;/tt&gt; nor</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;Set&lt;/tt&gt; interface must return &lt;tt&gt;false&lt;/tt&gt; when this collection</span></span><br><span class="line"><span class="comment">     * is compared to any list or set.  (By the same logic, it is not possible</span></span><br><span class="line"><span class="comment">     * to write a class that correctly implements both the &lt;tt&gt;Set&lt;/tt&gt; and</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;List&lt;/tt&gt; interfaces.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o object to be compared for equality with this collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if the specified object is equal to this</span></span><br><span class="line"><span class="comment">     * collection</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Object#equals(Object)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Set#equals(Object)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> List#equals(Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the hash code value for this collection.  While the</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;Collection&lt;/tt&gt; interface adds no stipulations to the general</span></span><br><span class="line"><span class="comment">     * contract for the &lt;tt&gt;Object.hashCode&lt;/tt&gt; method, programmers should</span></span><br><span class="line"><span class="comment">     * take note that any class that overrides the &lt;tt&gt;Object.equals&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * method must also override the &lt;tt&gt;Object.hashCode&lt;/tt&gt; method in order</span></span><br><span class="line"><span class="comment">     * to satisfy the general contract for the &lt;tt&gt;Object.hashCode&lt;/tt&gt; method.</span></span><br><span class="line"><span class="comment">     * In particular, &lt;tt&gt;c1.equals(c2)&lt;/tt&gt; implies that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;c1.hashCode()==c2.hashCode()&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the hash code value for this collection</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Object#hashCode()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Object#equals(Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>网上有很多人用中文编写的解释，但是我觉得英文可能表达更加清楚。有必要查看一下Collection的源码。</p><p>分析一下 AbstractCollection的类中 ToArray的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;This implementation returns an array containing all the elements</span></span><br><span class="line"><span class="comment">   * returned by this collection's iterator, in the same order, stored in</span></span><br><span class="line"><span class="comment">   * consecutive elements of the array, starting with index &#123;<span class="doctag">@code</span> 0&#125;.</span></span><br><span class="line"><span class="comment">   * The length of the returned array is equal to the number of elements</span></span><br><span class="line"><span class="comment">   * returned by the iterator, even if the size of this collection changes</span></span><br><span class="line"><span class="comment">   * during iteration, as might happen if the collection permits</span></span><br><span class="line"><span class="comment">   * concurrent modification during iteration.  The &#123;<span class="doctag">@code</span> size&#125; method is</span></span><br><span class="line"><span class="comment">   * called only as an optimization hint; the correct result is returned</span></span><br><span class="line"><span class="comment">   * even if the iterator returns a different number of elements.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;This method is equivalent to:</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  &lt;pre&gt; &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">   * List&lt;E&gt; list = new ArrayList&lt;E&gt;(size());</span></span><br><span class="line"><span class="comment">   * for (E e : this)</span></span><br><span class="line"><span class="comment">   *     list.add(e);</span></span><br><span class="line"><span class="comment">   * return list.toArray();</span></span><br><span class="line"><span class="comment">   * &#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">      <span class="comment">// Estimate size of array; be prepared to see more or fewer elements</span></span><br><span class="line">      Object[] r = <span class="keyword">new</span> Object[size()];</span><br><span class="line">      Iterator&lt;E&gt; it = iterator();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 集合元素没有r.length长度，说明数组长度浪费，取i的结束的长度</span></span><br><span class="line">          <span class="keyword">if</span> (! it.hasNext()) <span class="comment">// fewer elements than expected</span></span><br><span class="line">              <span class="keyword">return</span> Arrays.copyOf(r, i);</span><br><span class="line">          r[i] = it.next();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果it还有元素，则用finishToArray继续扩容，否者说明size的大小刚刚好。</span></span><br><span class="line">      <span class="keyword">return</span> it.hasNext() ? finishToArray(r, it) : r;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Reallocates the array being used within toArray when the iterator</span></span><br><span class="line"><span class="comment">   * returned more elements than expected, and finishes filling it from</span></span><br><span class="line"><span class="comment">   * the iterator.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> r the array, replete with previously stored elements</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> it the in-progress iterator over this collection</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> array containing the elements in the given array, plus any</span></span><br><span class="line"><span class="comment">   *         further elements returned by the iterator, trimmed to size</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; T[] finishToArray(T[] r, Iterator&lt;?&gt; it) &#123;</span><br><span class="line">   <span class="comment">// 记录当前数组长度</span></span><br><span class="line">      <span class="keyword">int</span> i = r.length;</span><br><span class="line">      <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">          <span class="keyword">int</span> cap = r.length;</span><br><span class="line">          <span class="comment">// r的长度不够，继续分配</span></span><br><span class="line">          <span class="keyword">if</span> (i == cap) &#123;</span><br><span class="line">             <span class="comment">// 扩充的方式为 cap + cap/2 + 1,也就是1，5倍</span></span><br><span class="line">              <span class="keyword">int</span> newCap = cap + (cap &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">              <span class="comment">// overflow-conscious code</span></span><br><span class="line">              <span class="comment">// 超过了最大的容量，MAX_ARRAY_SIZE = Integer.MAX_VALUE-8</span></span><br><span class="line">              <span class="keyword">if</span> (newCap - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">              <span class="comment">// 重新设置cap的大小</span></span><br><span class="line">                  newCap = hugeCapacity(cap + <span class="number">1</span>);</span><br><span class="line">              <span class="comment">// 对r重新扩容</span></span><br><span class="line">              r = Arrays.copyOf(r, newCap);</span><br><span class="line">          &#125;</span><br><span class="line">          r[i++] = (T)it.next();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// trim if overallocated</span></span><br><span class="line">      <span class="keyword">return</span> (i == r.length) ? r : Arrays.copyOf(r, i);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Arrays.copyOf</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] copyOf(<span class="keyword">int</span>[] original, <span class="keyword">int</span> newLength) &#123;</span><br><span class="line">      <span class="keyword">int</span>[] copy = <span class="keyword">new</span> <span class="keyword">int</span>[newLength];</span><br><span class="line">      System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                       Math.min(original.length, newLength));</span><br><span class="line">      <span class="keyword">return</span> copy;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="转载-1"><a href="#转载-1" class="headerlink" title="转载"></a>转载</h3><p><a href="https://www.jianshu.com/p/9af4ade0910a" target="_blank" rel="noopener">https://www.jianshu.com/p/9af4ade0910a</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java集合04-Iterable和Collection&quot;&gt;&lt;a href=&quot;#Java集合04-Iterable和Collection&quot; class=&quot;headerlink&quot; title=&quot;Java集合04-Iterable和Collection&quot;&gt;&lt;/a&gt;Ja
      
    
    </summary>
    
    
    
      <category term="集合" scheme="http://lmwtuedu.cn/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Java集合05-List 和 Queue</title>
    <link href="http://lmwtuedu.cn/2018/09/26/2018-09-26-Java%E9%9B%86%E5%90%8805-List/"/>
    <id>http://lmwtuedu.cn/2018/09/26/2018-09-26-Java集合05-List/</id>
    <published>2018-09-25T16:00:00.000Z</published>
    <updated>2019-08-15T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java集合05-List-和-Queue"><a href="#Java集合05-List-和-Queue" class="headerlink" title="Java集合05-List 和 Queue"></a>Java集合05-List 和 Queue</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>我们分析过ArrayList和LinkedList的源码；接下来我们回顾一下List的源码。</p><p>List的里面的function源码我们就不用看了，具体可以直接上手ArrayList和LinkedList的类， 我们瞅一瞅AbstractList的类的头注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This class provides a skeletal implementation of the &#123;<span class="doctag">@link</span> List&#125;</span></span><br><span class="line"><span class="comment"> * interface to minimize the effort required to implement this interface</span></span><br><span class="line"><span class="comment"> * backed by a "random access" data store (such as an array).  For sequential</span></span><br><span class="line"><span class="comment"> * access data (such as a linked list), &#123;<span class="doctag">@link</span> AbstractSequentialList&#125; should</span></span><br><span class="line"><span class="comment"> * be used in preference to this class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;To implement an unmodifiable list, the programmer needs only to extend</span></span><br><span class="line"><span class="comment"> * this class and provide implementations for the &#123;<span class="doctag">@link</span> #get(int)&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> List#size() size()&#125; methods.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;To implement a modifiable list, the programmer must additionally</span></span><br><span class="line"><span class="comment"> * override the &#123;<span class="doctag">@link</span> #set(int, Object) set(int, E)&#125; method (which otherwise</span></span><br><span class="line"><span class="comment"> * throws an &#123;<span class="doctag">@code</span> UnsupportedOperationException&#125;).  If the list is</span></span><br><span class="line"><span class="comment"> * variable-size the programmer must additionally override the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #add(int, Object) add(int, E)&#125; and &#123;<span class="doctag">@link</span> #remove(int)&#125; methods.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The programmer should generally provide a void (no argument) and collection</span></span><br><span class="line"><span class="comment"> * constructor, as per the recommendation in the &#123;<span class="doctag">@link</span> Collection&#125; interface</span></span><br><span class="line"><span class="comment"> * specification.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Unlike the other abstract collection implementations, the programmer does</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;not&lt;/i&gt; have to provide an iterator implementation; the iterator and</span></span><br><span class="line"><span class="comment"> * list iterator are implemented by this class, on top of the "random access"</span></span><br><span class="line"><span class="comment"> * methods:</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #get(int)&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #set(int, Object) set(int, E)&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #add(int, Object) add(int, E)&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #remove(int)&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The documentation for each non-abstract method in this class describes its</span></span><br><span class="line"><span class="comment"> * implementation in detail.  Each of these methods may be overridden if the</span></span><br><span class="line"><span class="comment"> * collection being implemented admits a more efficient implementation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This class is a member of the</span></span><br><span class="line"><span class="comment"> * &lt;a href="&#123;<span class="doctag">@docRoot</span>&#125;/../technotes/guides/collections/index.html"&gt;</span></span><br><span class="line"><span class="comment"> * Java Collections Framework&lt;/a&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Josh Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Neal Gafter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>大致意思是说，要实现一个不可修改的集合，只需要复写 <code>get</code> 和 <code>size</code> 就可以了。 要实现一个可以修改的集合， 还需要复写 <code>set</code> 方法， 如果要动态调整大小， 就必须再实现 add 和 remove 方法。</p><p>具体结合 ArrayList的源码分析和LinkedList的源码分析，一起回顾一遍。</p><blockquote><p>东西就是反复 反复 反复 琢磨 琢磨 琢磨 之后慢慢懂得； 阅读源码也是一样的一样的</p></blockquote><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>原先分析LinkedList的说过，队列的实现其实也是一种变相的LinkedList，只管头和尾巴。</p><p>那我们呢一起分析一下Queue的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inserts the specified element into this queue if it is possible to do so</span></span><br><span class="line"><span class="comment"> * immediately without violating capacity restrictions, returning</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> true&#125; upon success and throwing an &#123;<span class="doctag">@code</span> IllegalStateException&#125;</span></span><br><span class="line"><span class="comment"> * if no space is currently available.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e the element to add</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException if the element cannot be added at this</span></span><br><span class="line"><span class="comment"> *         time due to capacity restrictions</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassCastException if the class of the specified element</span></span><br><span class="line"><span class="comment"> *         prevents it from being added to this queue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the specified element is null and</span></span><br><span class="line"><span class="comment"> *         this queue does not permit null elements</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if some property of this element</span></span><br><span class="line"><span class="comment"> *         prevents it from being added to this queue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inserts the specified element into this queue if it is possible to do</span></span><br><span class="line"><span class="comment"> * so immediately without violating capacity restrictions.</span></span><br><span class="line"><span class="comment"> * When using a capacity-restricted queue, this method is generally</span></span><br><span class="line"><span class="comment"> * preferable to &#123;<span class="doctag">@link</span> #add&#125;, which can fail to insert an element only</span></span><br><span class="line"><span class="comment"> * by throwing an exception.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e the element to add</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the element was added to this queue, else</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> false&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassCastException if the class of the specified element</span></span><br><span class="line"><span class="comment"> *         prevents it from being added to this queue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the specified element is null and</span></span><br><span class="line"><span class="comment"> *         this queue does not permit null elements</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if some property of this element</span></span><br><span class="line"><span class="comment"> *         prevents it from being added to this queue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves and removes the head of this queue.  This method differs</span></span><br><span class="line"><span class="comment"> * from &#123;<span class="doctag">@link</span> #poll poll&#125; only in that it throws an exception if this</span></span><br><span class="line"><span class="comment"> * queue is empty.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the head of this queue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchElementException if this queue is empty</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">E <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves and removes the head of this queue,</span></span><br><span class="line"><span class="comment"> * or returns &#123;<span class="doctag">@code</span> null&#125; if this queue is empty.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the head of this queue, or &#123;<span class="doctag">@code</span> null&#125; if this queue is empty</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">E <span class="title">poll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves, but does not remove, the head of this queue.  This method</span></span><br><span class="line"><span class="comment"> * differs from &#123;<span class="doctag">@link</span> #peek peek&#125; only in that it throws an exception</span></span><br><span class="line"><span class="comment"> * if this queue is empty.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the head of this queue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchElementException if this queue is empty</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">E <span class="title">element</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves, but does not remove, the head of this queue,</span></span><br><span class="line"><span class="comment"> * or returns &#123;<span class="doctag">@code</span> null&#125; if this queue is empty.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the head of this queue, or &#123;<span class="doctag">@code</span> null&#125; if this queue is empty</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">E <span class="title">peek</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><ul><li>add: 将元素添加进入队列</li><li>offer： 与add相比较，在容量受限时，使用此方法</li><li>remove： 移除队列的首元素，队列为空异常抛出</li><li>poll： 移除队列的首元素，队列为空时返回null</li><li>element： 获取队列首元素，但不移除； 队列为空抛出异常</li><li>peak： 获取队列首元素，但不移除，队列为空时返回null</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java集合05-List-和-Queue&quot;&gt;&lt;a href=&quot;#Java集合05-List-和-Queue&quot; class=&quot;headerlink&quot; title=&quot;Java集合05-List 和 Queue&quot;&gt;&lt;/a&gt;Java集合05-List 和 Queue&lt;/
      
    
    </summary>
    
    
    
      <category term="集合" scheme="http://lmwtuedu.cn/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Java集合分析03-LinkedList</title>
    <link href="http://lmwtuedu.cn/2018/09/25/2018-09-25-Java%E9%9B%86%E5%90%88%E5%88%86%E6%9E%9003-LinkedList/"/>
    <id>http://lmwtuedu.cn/2018/09/25/2018-09-25-Java集合分析03-LinkedList/</id>
    <published>2018-09-24T16:00:00.000Z</published>
    <updated>2019-08-15T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java集合分析03-LinkedList"><a href="#Java集合分析03-LinkedList" class="headerlink" title="Java集合分析03-LinkedList"></a>Java集合分析03-LinkedList</h1><p>我本人在工作中，其实用到LinkList的比较少，所以对这个类不死很熟悉，只是知道这个类是一个链表类，线性结构； 数组也是线性结构，数组是内存的物理存储上呈线性，逻辑上也是线性，链表只是在逻辑上呈线性。在链表的每一个存储单元中不仅存储有当前的元素，还有下一个存储单元的地址，这样的可以通过地址将所有的存储单元连接在一起。</p><p>具体LinkedList的概念查看01介绍。</p><h2 id="Linkedlist的基本存储单元"><a href="#Linkedlist的基本存储单元" class="headerlink" title="Linkedlist的基本存储单元"></a>Linkedlist的基本存储单元</h2><p>LinkedList存在一个基本存储单元，是Linkedlist的一个内部类，节点元素存在两个属性，分别保存 前一个节点和后一个节点的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"> <span class="comment">// 存储元素属性</span></span><br><span class="line">       E item;</span><br><span class="line">       <span class="comment">// 下一个节点</span></span><br><span class="line">       Node&lt;E&gt; next;</span><br><span class="line">       <span class="comment">// 前一个节点</span></span><br><span class="line">       Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">       Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">           <span class="keyword">this</span>.item = element;</span><br><span class="line">           <span class="keyword">this</span>.next = next;</span><br><span class="line">           <span class="keyword">this</span>.prev = prev;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LinkedList&lt;E&gt;</span><br><span class="line">    extends AbstractSequentialList&lt;E&gt;</span><br><span class="line">    implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><p>定义和ArrayList的差不多，但是要注意的是，LinkList实现了Deque：间接的实现了Queue; Deque是一个双向队列，为LinkedList提供了队列的两端访问元素的方法。</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty list.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a list containing the elements of the specified</span></span><br><span class="line"><span class="comment">     * collection, in the order they are returned by the collection's</span></span><br><span class="line"><span class="comment">     * iterator.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  c the collection whose elements are to be placed into this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>构造函数 里面没有任何操作，所以我们去查看一下属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pointer to first node.</span></span><br><span class="line"><span class="comment"> * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment"> *            (first.prev == null &amp;&amp; first.item != null)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pointer to last node.</span></span><br><span class="line"><span class="comment"> * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment"> *            (last.next == null &amp;&amp; last.item != null)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure><h2 id="add（E-e）"><a href="#add（E-e）" class="headerlink" title="add（E e）"></a>add（E e）</h2><p>源码分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #addLast&#125;.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">      linkLast(e);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Links e as last element.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 将最后的一个元素赋值，引用传递， 给节点l final休息，修饰的属性之后不能修改</span></span><br><span class="line">      <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 调用节点的有参构造方法 创建新的节点， 保存添加的元素</span></span><br><span class="line">      <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 此时的新节点是最后一位元素 将新节点赋值给last</span></span><br><span class="line">      last = newNode;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//如果l是null 意味着这是第一次添加元素 那么将first赋值为新节点  这个list只有一个元素 存储元素 开始元素和最后元素均是同一个元素</span></span><br><span class="line">      <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">          first = newNode;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          l.next = newNode;</span><br><span class="line">      size++;</span><br><span class="line">      modCount++;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>从方法中，我们知道，在调用添加方法之后，并不是马上添加的，而是调用了linkLast方法，新元素直接添加到集合最后。</p><p>从以上代码中我们可以看到其在添加元素的时候并不依赖下标。<br>而其中的处理是，通过一个last（Node对象）保存最后一个节点的信息（实际上就是最后一个节点），每次通过不断的变化最后一个元素实现元素的添加。（想要充分理解此处，需要理解java值传递和引用传递的区别和本质）。</p><h2 id="add（int-index-E-element）"><a href="#add（int-index-E-element）" class="headerlink" title="add（int index , E element）"></a>add（int index , E element）</h2><p>源码分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Inserts the specified element at the specified position in this list.</span></span><br><span class="line"><span class="comment">    * Shifts the element currently at that position (if any) and any</span></span><br><span class="line"><span class="comment">    * subsequent elements to the right (adds one to their indices).</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> index index at which the specified element is to be inserted</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> element element to be inserted</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 检查位置的合法性</span></span><br><span class="line">       checkPositionIndex(index);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 位置在尾部，尾部添加</span></span><br><span class="line">       <span class="keyword">if</span> (index == size)</span><br><span class="line">           linkLast(element);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           linkBefore(element, node(index));</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Returns the (non-null) Node at the specified element index.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 二分查找，如果index小于中间值的index，从头开始找</span></span><br><span class="line"> <span class="comment">// 如果大于中间值的index，从尾巴开始找</span></span><br><span class="line">       <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">           Node&lt;E&gt; x = first;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">               x = x.next;</span><br><span class="line">           <span class="keyword">return</span> x;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           Node&lt;E&gt; x = last;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">               x = x.prev;</span><br><span class="line">           <span class="keyword">return</span> x;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Inserts element e before non-null Node succ.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// assert succ != null;</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">// succ的前一个节点</span></span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 创建一个新的节点，构成参数 前一个节点和后一个节点，e</span></span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line">       <span class="comment">// succ的前一个节点是创建的节点</span></span><br><span class="line">       succ.prev = newNode;</span><br><span class="line">       <span class="comment">// 前一个节点为空那么就是首节点</span></span><br><span class="line">       <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">           first = newNode;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           pred.next = newNode; <span class="comment">// 前一个节点的下一个节点就是新节点</span></span><br><span class="line">       size++;</span><br><span class="line">       modCount++;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tNbRwly1fvlu2wfpokj30ji0il41k.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>上述代码中有一个function： checkPositionIndex</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!isPositionIndex(index))</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Tells if the argument is the index of a valid position for an</span></span><br><span class="line"><span class="comment">    * iterator or an add operation.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= size;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>通过对两个添加方法的分析，我们可以很明显的感受到LinkedList添加元素的效率，不需要扩容，不需要复制数组。</p><h2 id="get（int-index）"><a href="#get（int-index）" class="headerlink" title="get（int index）"></a>get（int index）</h2><p>源码分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Returns the element at the specified position in this list.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> index index of the element to return</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the element at the specified position in this list</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       checkElementIndex(index);</span><br><span class="line">       <span class="keyword">return</span> node(index).item;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Returns the (non-null) Node at the specified element index.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">           Node&lt;E&gt; x = first;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">               x = x.next;</span><br><span class="line">           <span class="keyword">return</span> x;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           Node&lt;E&gt; x = last;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">               x = x.prev;</span><br><span class="line">           <span class="keyword">return</span> x;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>注意 add（int index， Element e） 中也用到了 node(int index).</p><p>在这段代码中充分体现了双向链表的优越性，可以从前也可以从后开始遍历，通过对index范围的判断能够显著的提高效率。但是在遍历的时候也可以很明显的看到LinkedList get方法获取元素的低效率，时间复杂度O(n)。</p><h2 id="remove-int-index"><a href="#remove-int-index" class="headerlink" title="remove(int index)"></a>remove(int index)</h2><p>所谓删除节点，就是把节点的前后引用置为null，并且保证没有任何其他节点指向被删除的节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Removes the element at the specified position in this list.  Shifts any</span></span><br><span class="line"><span class="comment">   * subsequent elements to the left (subtracts one from their indices).</span></span><br><span class="line"><span class="comment">   * Returns the element that was removed from the list.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> index the index of the element to be removed</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the element previously at the specified position</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">      checkElementIndex(index);</span><br><span class="line">      <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the (non-null) Node at the specified element index.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">          Node&lt;E&gt; x = first;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">              x = x.next;</span><br><span class="line">          <span class="keyword">return</span> x;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          Node&lt;E&gt; x = last;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">              x = x.prev;</span><br><span class="line">          <span class="keyword">return</span> x;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Unlinks non-null node x.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// assert x != null;</span></span><br><span class="line">      <span class="comment">// 定义一个Element接受item</span></span><br><span class="line">      <span class="keyword">final</span> E element = x.item;</span><br><span class="line">      <span class="comment">// 下一个节点</span></span><br><span class="line">      <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">      <span class="comment">// 上一个节点</span></span><br><span class="line">      <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 上一个节点为空，说明是头节点</span></span><br><span class="line">      <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="comment">// 头节点换成下一个节点</span></span><br><span class="line">          first = next;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// 上一个节点的下一个节点为下一个节点</span></span><br><span class="line">          prev.next = next;</span><br><span class="line">          x.prev = <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 下一个节点为空，说明是尾巴节点</span></span><br><span class="line">      <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 尾巴节点换成前一个节点</span></span><br><span class="line">          last = prev;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 下一个节点的前一个节点为前一个节点</span></span><br><span class="line">          next.prev = prev;</span><br><span class="line">          x.next = <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      x.item = <span class="keyword">null</span>;</span><br><span class="line">      size--;</span><br><span class="line">      modCount++;</span><br><span class="line">      <span class="keyword">return</span> element;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>注意：prev，item，next均置为null 是为了让虚拟机回收； 我们可以看到LinkedList删除元素的效率也不错。</p><blockquote><p>TDDO 队列分析~: 队列只是LinkedList的变换，只是取头和尾巴。</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>LinkedList的查询速度比较慢，一般是一分为二查找。效率没有ArrayList高</li><li>添加元素效率比ArrayList高，有优势</li><li>实现队列接口。</li></ol><blockquote><p>ArrayList和LinkedList的区别</p></blockquote><blockquote><p>顺序插入，两者速度都很快，但是ArrayList稍快于LinkedList，数组实现，数组是提前创建好的；LinkedList每次都需要重新new新节点<br>LinedList需要维护前后节点，会更耗费内存<br>遍历，LinedList适合用迭代遍历；ArrayList适合用循环遍历</p></blockquote><blockquote><p>不要使用普通for循环遍历LinedList<br>也不要使用迭代遍历遍历ArrayList（具体看上篇文章《ArrayList分析》）<br>删除和插入就不说了，毕竟ArrayList需要复制数组和扩容。</p></blockquote><h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><p><a href="https://juejin.im/post/5a5dee406fb9a01c965826ac" target="_blank" rel="noopener">https://juejin.im/post/5a5dee406fb9a01c965826ac</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java集合分析03-LinkedList&quot;&gt;&lt;a href=&quot;#Java集合分析03-LinkedList&quot; class=&quot;headerlink&quot; title=&quot;Java集合分析03-LinkedList&quot;&gt;&lt;/a&gt;Java集合分析03-LinkedList&lt;/
      
    
    </summary>
    
    
    
      <category term="集合" scheme="http://lmwtuedu.cn/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Java集合分析02-Arraylist</title>
    <link href="http://lmwtuedu.cn/2018/09/25/2018-09-25-Java%E9%9B%86%E5%90%88%E5%88%86%E6%9E%9002-ArrayList/"/>
    <id>http://lmwtuedu.cn/2018/09/25/2018-09-25-Java集合分析02-ArrayList/</id>
    <published>2018-09-24T16:00:00.000Z</published>
    <updated>2019-08-15T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java集合分析02-ArrayList"><a href="#Java集合分析02-ArrayList" class="headerlink" title="Java集合分析02-ArrayList"></a>Java集合分析02-ArrayList</h1><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>常说，ArrayList的是数组实现的，我们很少看源码，那么就分析分析源码。</p><p>注： 代码基于JDK1.8版本。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span><br><span class="line">        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><p>ArrayList实际上是一个动态数组，容量可以动态的增长，其继承了AbstractList，实现了List，RandomAccess， Cloneable、Java.io.Serializable这些接口。</p><h4 id="RandAccess"><a href="#RandAccess" class="headerlink" title="RandAccess"></a>RandAccess</h4><p>RandAccess接口被 List 实现，表明了 List提供了随机访问的功能， 也就是通过下标的方式获取元素对象的功能。</p><ol><li>RandAccess之所以是标记接口，是该类本来就具备某项能力，使用接口对其进行标签化，便于其他的类对其进行识别(instanceof)</li><li>ArrayList 数组实现，本身就有通过下表随机访问任意元素； 那么细节上需要注意的是 随机访问下标 和 顺序下标的访问(LinkList)的不同了。 也就是为什么LinkList最好不要使用循环遍历，而是用迭代器的原因。 </li><li>实现了RandomAccess同时意味着一些算法可以通过类型判断进行一些针对性的优化，例子，Collection的shuffle方法。 </li></ol><p>简单说，如果实现了RandomAccess接口，就是下标遍历，反之迭代器遍历，实现了Cloneable，Java.io.Serializable意味着被克隆和序列化。</p><h3 id="构成函数"><a href="#构成函数" class="headerlink" title="构成函数"></a>构成函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty list with the specified initial capacity.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  initialCapacity  the initial capacity of the list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if the specified initial capacity</span></span><br><span class="line"><span class="comment"> *         is negative</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty list with an initial capacity of ten.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a list containing the elements of the specified</span></span><br><span class="line"><span class="comment"> * collection, in the order they are returned by the collection's</span></span><br><span class="line"><span class="comment"> * iterator.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c the collection whose elements are to be placed into this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Default initial capacity.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Shared empty array instance used for empty instances.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Shared empty array instance used for default sized empty instances. We</span></span><br><span class="line"><span class="comment">    * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when</span></span><br><span class="line"><span class="comment">    * first element is added.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The array buffer into which the elements of the ArrayList are stored.</span></span><br><span class="line"><span class="comment">    * The capacity of the ArrayList is the length of this array buffer. Any</span></span><br><span class="line"><span class="comment">    * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class="line"><span class="comment">    * will be expanded to DEFAULT_CAPACITY when the first element is added.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The size of the ArrayList (the number of elements it contains).</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure><p>分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Constructs an empty list with an initial capacity of ten.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>注解说： 分配了一个空的，初始化为 10； </p><p>elementData 对象是 Object[] 这就是为什么说是ArrayList的是数组实现了。</p><p>DEFAULTCAPACITY_EMPTY_ELEMENTDATA 是一个空的； 那么为什么说是初始化了一个10大小呢？我们查看一下成员变量的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The array buffer into which the elements of the ArrayList are stored.</span></span><br><span class="line"><span class="comment"> * The capacity of the ArrayList is the length of this array buffer. Any</span></span><br><span class="line"><span class="comment"> * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class="line"><span class="comment"> * will be expanded to DEFAULT_CAPACITY when the first element is added.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br></pre></td></tr></table></figure><p>注解： 分配了一个缓存，给 ArrayList 存储， 而这个缓存的大小就是ArrayList的大小， 如果空的ArrayList的初始化是，默认分配给 DEFAULTCAPACITY_EMPTY_ELEMENTDATA， 并且默认的大小DEFAULT_CAPACITY什么时候设置分配缓存大小呢呢？ 当第一个元素被添加的时候。</p><p>注意一点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Default initial capacity.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Shared empty array instance used for empty instances.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Shared empty array instance used for default sized empty instances. We</span></span><br><span class="line"><span class="comment">    * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when</span></span><br><span class="line"><span class="comment">    * first element is added.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>这个变量是 static变量，共享默认大小。</p><p>如图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fvlnwfzoqej30j40e6q5s.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><p>add 的方法有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span></span><br><span class="line"><span class="function"><span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span></span><br></pre></td></tr></table></figure><p>我们以分析add(E e) 为例子说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，使用成员变量: size 记录，elementData的存储的数量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The size of the ArrayList (the number of elements it contains).</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure><p>ensureCapacityInernal 它是用来扩容的，进行扩容检查的。</p><p>elementData[size++] = e 等效于 elementData[size] = e; size ++;</p><p>分析ensureCapacityInernal</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// 如果elementData 默认的是  DEFAULTCAPACITY_EMPTY_ELEMENTDATA, 那么</span></span><br><span class="line">   <span class="comment">// 比较DEFAULT_CAPACITY(10) 和 minCapacity 的大小，返回最大的</span></span><br><span class="line">   <span class="comment">// 如果elementData 不是 DEFAULTCAPACITY_EMPTY_ELEMENTDATA， 那么直接返回minCapacity</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">           <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> minCapacity;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// modCount的记录修改次数</span></span><br><span class="line">   <span class="comment">// 如果传过来的值大于初始长度 执行grow方法（参数为传过来的值）扩容</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       modCount++;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// overflow-conscious code</span></span><br><span class="line">       <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">           grow(minCapacity);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Increases the capacity to ensure that it can hold at least the</span></span><br><span class="line"><span class="comment">    * number of elements specified by the minimum capacity argument.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> minCapacity the desired minimum capacity</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// overflow-conscious code</span></span><br><span class="line">       <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 新的容量是在原有的基础上，+50% &gt;&gt;1 右移一位代表二分之一。</span></span><br><span class="line">       <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 如果新的容器小于最小容量，按照最小容量进行扩容</span></span><br><span class="line">       <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = minCapacity;</span><br><span class="line">       <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">       <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">       <span class="comment">// 调用工具类Arrays.copyOf进行扩容。</span></span><br><span class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="keyword">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class="line">       <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">       T[] copy = ((Object)newType == (Object)Object[].class)</span><br><span class="line">           ? (T[]) <span class="keyword">new</span> Object[newLength]</span><br><span class="line">           : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">       System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                        Math.min(original.length, newLength));</span><br><span class="line">       <span class="keyword">return</span> copy;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>分析一下 add（int index, E element）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Inserts the specified element at the specified position in this</span></span><br><span class="line"><span class="comment">    * list. Shifts the element currently at that position (if any) and</span></span><br><span class="line"><span class="comment">    * any subsequent elements to the right (adds one to their indices).</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> index index at which the specified element is to be inserted</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> element element to be inserted</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">       rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">       ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 将指定下表空出来，具体做法是index以及其后的所有元素都后移一位</span></span><br><span class="line">       System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                        size - index);</span><br><span class="line">       <span class="comment">// 将要添加的元素赋值到空出来的指定下标处</span></span><br><span class="line">       elementData[index] = element;</span><br><span class="line">       </span><br><span class="line">       size++;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * A version of rangeCheck used by add and addAll.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span>. <span class="comment">// 按照下表删除</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> <span class="comment">// 按照元素删除，会删除和参数匹配的第一个元素</span></span></span><br></pre></td></tr></table></figure><p>分析源码：remove(int index)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       rangeCheck(index);</span><br><span class="line"></span><br><span class="line">       modCount++;</span><br><span class="line">       E oldValue = elementData(index);</span><br><span class="line"> <span class="comment">// 计算出需要移动的元素个数，需要将后续的元素左移动一位 ，此处计算的是后续元素的位数</span></span><br><span class="line">       <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">         <span class="comment">// 将index位置的后续的所有元素左移动一位，覆盖index位置上的元素</span></span><br><span class="line">           System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                            numMoved);</span><br><span class="line">       <span class="comment">// 将最后的一个元素覆盖位null，GC回收</span></span><br><span class="line">       elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> oldValue;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Checks if the given index is in range.  If not, throws an appropriate</span></span><br><span class="line"><span class="comment">    * runtime exception.  This method does *not* check if the index is</span></span><br><span class="line"><span class="comment">    * negative: It is always used immediately prior to an array access,</span></span><br><span class="line"><span class="comment">    * which throws an ArrayIndexOutOfBoundsException if index is negative.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>分析源代码： remove(Object o)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Removes the first occurrence of the specified element from this list,</span></span><br><span class="line"><span class="comment">    * if it is present.  If the list does not contain the element, it is</span></span><br><span class="line"><span class="comment">    * unchanged.  More formally, removes the element with the lowest index</span></span><br><span class="line"><span class="comment">    * &lt;tt&gt;i&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">    * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">    * (if such an element exists).  Returns &lt;tt&gt;true&lt;/tt&gt; if this list</span></span><br><span class="line"><span class="comment">    * contained the specified element (or equivalently, if this list</span></span><br><span class="line"><span class="comment">    * changed as a result of the call).</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> o element to be removed from this list, if present</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this list contained the specified element</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">               <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   fastRemove(index);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">               <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                   fastRemove(index);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Private remove method that skips bounds checking and does not</span></span><br><span class="line"><span class="comment">    * return the value removed.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;     <span class="comment">// 下表移除的方法</span></span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">           System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                            numMoved);</span><br><span class="line">       elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>TODO 后续其他方法，分析….</p><ol><li>分析一下迭代器源码Iterator  // TODO 日期：2018.9.25</li></ol></blockquote></blockquote><h3 id="iterator分析"><a href="#iterator分析" class="headerlink" title="iterator分析"></a>iterator分析</h3><p>ArrayList获取数据的集中方法：举一个例子说明ArrayList中的遍历</p><p>我们来看一下ArrayList中的遍历，ArrayList支持三种遍历方式。</p><p>第一种：通过迭代器遍历，即通过Iterator去遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line">Iterator iter = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    value = (Integer)iter.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种：随机访问，通过索引值去遍历，因为ArrayList实现了RandomAccess接口，so，她支持通过索引值去随机访问元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">int</span> size = list.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">    value = (Integer)list.get(i);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三种：for循环遍历，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (Integer integ:list) &#123;</span><br><span class="line">    value = integ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>平常我们常用iterator遍历数据，常说迭代器。<br>为什么要用迭代器，常用的解释如下：它可以把访问逻辑从不同类型的集合抽象出来，从而避免向客户端爆了集合的内部结构. 这句话，第一眼看，真的没明白说的是啥。</p><p>平常我们获取数据如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arrays = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> value = arrays[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Arraylist也是这么处理的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++)&#123;</span><br><span class="line">String value = list.get(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式，我们总是预先知道了集合的内部结构，访问代码和集合本身是紧密耦合的，无法将访问逻辑从集合和客户端代码分离； 同时每一种集合对应的一种遍历方法，客户端代码无法复用。 实际应用中如何将两个集合进行整合是非常麻烦的。 terator模式腾空出世，它总是用同一种逻辑来遍历集合。使得客户端自身不需要来维护集合的内部结构，所有的内部状态都由Iterator来维护。客户端从不直接和集合类打交道，它总是控制Iterator，向它发送”向前”，”向后”，”取当前元素”的命令，就可以间接遍历整个集合。</p><p>“无法将访问逻辑从集合和客户端代码分离 ” 本人看到这句话的时候，没理解啥意思？ 作者是向表达：每次取之都需要与之紧密相关的原始对象吧？</p><p>“如何将两个集合整合” 本人理解：两个变成一个，访问方法都是一个。</p><p>分析一下Iterator的类源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns &#123;<span class="doctag">@code</span> true&#125; if the iteration has more elements.</span></span><br><span class="line"><span class="comment"> * (In other words, returns &#123;<span class="doctag">@code</span> true&#125; if &#123;<span class="doctag">@link</span> #next&#125; would</span></span><br><span class="line"><span class="comment"> * return an element rather than throwing an exception.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the iteration has more elements</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the next element in the iteration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the next element in the iteration</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchElementException if the iteration has no more elements</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes from the underlying collection the last element returned</span></span><br><span class="line"><span class="comment"> * by this iterator (optional operation).  This method can be called</span></span><br><span class="line"><span class="comment"> * only once per call to &#123;<span class="doctag">@link</span> #next&#125;.  The behavior of an iterator</span></span><br><span class="line"><span class="comment"> * is unspecified if the underlying collection is modified while the</span></span><br><span class="line"><span class="comment"> * iteration is in progress in any way other than by calling this</span></span><br><span class="line"><span class="comment"> * method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@implSpec</span></span></span><br><span class="line"><span class="comment"> * The default implementation throws an instance of</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> UnsupportedOperationException&#125; and performs no other action.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnsupportedOperationException if the &#123;<span class="doctag">@code</span> remove&#125;</span></span><br><span class="line"><span class="comment"> *         operation is not supported by this iterator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException if the &#123;<span class="doctag">@code</span> next&#125; method has not</span></span><br><span class="line"><span class="comment"> *         yet been called, or the &#123;<span class="doctag">@code</span> remove&#125; method has already</span></span><br><span class="line"><span class="comment"> *         been called after the last call to the &#123;<span class="doctag">@code</span> next&#125;</span></span><br><span class="line"><span class="comment"> *         method</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"remove"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>next : 返回迭代器刚越过的的元素的引用，返回值是Object的，需要强制转换成为自己需要的类型。</li><li>hasNext： 判断容器内部是否还有提供访问的元素。</li><li>remove：删除迭代器刚越过的的元素。</li></ul><p>注意： remove删除掉的元素，list的数据也一样会减少；两者不是拷贝，注意源码elementDat的都是同一个；<br>iterator只是换了一种遍历的方式而已，原始数据还是原来的，引用注意，不是拷贝，不是拷贝，不是拷贝。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Iterator it = c.iterator(); it.hasNext(); ) &#123;</span><br><span class="line">　　Object o = it.next();</span><br><span class="line">　　 <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面阐述了Iterator有一个很大的优点,就是我们不必知道集合的内部结果,集合的内部结构、状态由Iterator来维持，通过统一的方法hasNext()、next()来判断、获取下一个元素，至于具体的内部实现我们就不用关心了。但是作为一个合格的程序员我们非常有必要来弄清楚Iterator的实现。下面就ArrayList的源码进行分析分析:</p><p>ArrayList实现基于如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * An optimized version of AbstractList.Itr</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">     <span class="comment">// 记录下一个元素的索引位置</span></span><br><span class="line">       <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">       <span class="comment">// 记录上一个元素的索引位置</span></span><br><span class="line">       <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">       <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">       Itr() &#123;&#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> cursor != size;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">       <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">// checkForComodification()主要用来判断集合的修改次数是否合法，即用来判断遍历过程中集合是否被修改过。</span></span><br><span class="line">           checkForComodification();</span><br><span class="line">           <span class="comment">// 记录索引位置</span></span><br><span class="line">           <span class="keyword">int</span> i = cursor;</span><br><span class="line">           <span class="comment">// 如果获取元素大于集合元素个数，跑出异常</span></span><br><span class="line">           <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">           Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">           <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">           <span class="comment">// i是cursor，cursor = cursor +1</span></span><br><span class="line">           cursor = i + <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">return</span> (E) elementData[lastRet = i]; <span class="comment">// lastRet +1 ,且返回cursor元素</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">           checkForComodification();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">               cursor = lastRet;</span><br><span class="line">               lastRet = -<span class="number">1</span>;</span><br><span class="line">               expectedModCount = modCount;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>ArrayList的内部实现采用数组，所以我们只需要记录相应位置的索引即可.</p><p><strong>注意：</strong> </p><ul><li>modCount: 用于记录ArrayList集合的修改次数，初始化为0，每当集合被修改一次，例如add \ remove 等； modCount +1, 如果modCount不变，则表示集合内容没有被修改。该机制主要是用于实现ArrayList集合的快速失败机制，在Java的集合中，较大一部分集合是存在快速失败机制的；</li></ul><blockquote><p>TODO： 集合的快速失败机制</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>底层数组实现，默认构造方法的容量是10</li><li>扩容的长度是在原来的基础上加上 50% ,即 二分之一</li><li>实现了RandAccess的接口，底层又是数组</li><li>线程不安全，所有方法都没有加上锁，也不是同步方法，多线程下注意</li><li>顺序添加很方便</li><li>删除和插入需要负责数组，arrays.copyof System.copy 性能差一点</li></ul><p>注意： elementData 修饰符 transient ,序列化时候，忽略。</p><p>为什么这样子设计？</p><ol><li>element不总是满的，每次都需要序列化，浪费时间和空间</li><li>重写了writeObject 保证序列化的时候虽然不序列化全部 但是有的元素都序列化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Save the state of the &lt;tt&gt;ArrayList&lt;/tt&gt; instance to a stream (that</span></span><br><span class="line"><span class="comment">    * is, serialize it).</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@serialData</span> The length of the array backing the &lt;tt&gt;ArrayList&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">    *             instance is emitted (int), followed by all of its elements</span></span><br><span class="line"><span class="comment">    *             (each an &lt;tt&gt;Object&lt;/tt&gt;) in the proper order.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">       <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">       <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">       <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">       s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">       s.writeInt(size);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">           s.writeObject(elementData[i]);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>ArrayList和Vector的区别?</p><p><strong>标准答案</strong></p><p>ArrayList是线程不安全的，Vector是线程安全的<br>扩容时候ArrayList扩0.5倍，Vector扩1倍</p><p>那么问题来了<br>ArrayList有没有办法线程安全？<br>Collections工具类有一个synchronizedList方法<br>可以把list变为线程安全的集合，但是意义不大，因为可以使用Vector<br>Vector为什么是线程安全的？<br>老实讲，抛开多线程    它俩区别没多大，但是多线程下就不一样了，那么Vector是如何实现线程安全的，我们来看几个关键方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  modCount++;</span><br><span class="line">  ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">  elementData[elementCount++] = e;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  modCount++;</span><br><span class="line">  <span class="keyword">if</span> (index &gt;= elementCount)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line">  E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> numMoved = elementCount - index - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">    System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                     numMoved);</span><br><span class="line">  elementData[--elementCount] = <span class="keyword">null</span>; <span class="comment">// Let gc do its work</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制代码就代码实现上来说，和ArrayList并没有很多逻辑上的区别，但是在Vector的关键方法都使用了synchronized修饰.</p><h2 id="转载地址"><a href="#转载地址" class="headerlink" title="转载地址"></a>转载地址</h2><p><a href="https://juejin.im/post/5a58aa62f265da3e4d72a51b" target="_blank" rel="noopener">https://juejin.im/post/5a58aa62f265da3e4d72a51b</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java集合分析02-ArrayList&quot;&gt;&lt;a href=&quot;#Java集合分析02-ArrayList&quot; class=&quot;headerlink&quot; title=&quot;Java集合分析02-ArrayList&quot;&gt;&lt;/a&gt;Java集合分析02-ArrayList&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="集合" scheme="http://lmwtuedu.cn/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Java集合分析01</title>
    <link href="http://lmwtuedu.cn/2018/09/23/2018-09-23-Java%E9%9B%86%E5%90%88%E5%88%86%E6%9E%9001/"/>
    <id>http://lmwtuedu.cn/2018/09/23/2018-09-23-Java集合分析01/</id>
    <published>2018-09-22T16:00:00.000Z</published>
    <updated>2019-08-15T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java集合分析01"><a href="#Java集合分析01" class="headerlink" title="Java集合分析01"></a>Java集合分析01</h1><p>Java的集合是Java的提供的工具包, java.util.* 包含了常用的数据结构： 链表、队列、栈、数组、哈希表等。 List \ Set \ Map</p><p>注： 集合的实现是绕不开数据结构的。</p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>collection 接口是Set 、 Queue、 List的父接口。</p><p>画重点：</p><ul><li>Collection 是<strong>一组允许重复的对象</strong> 。</li><li>Set 的接口继承Collection，但<strong>不允许重复</strong>，使用自己内部的一个排序机制 。</li><li>List 接口继承Collection， <strong>允许重复</strong>a，以元素安插的次序来放置元素，不会重新排列。</li></ul><p>数据结构，在Collection 中主要是用的是<strong>线性表结构</strong> 不包含set； 所谓的线性表，指的是元素在逻辑上是线性的，例如数组、链表、队列，栈。 线性结构不仅仅是物理存储结构上线性（数组），而是逻辑线性（链表）。</p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>Collection 是无序可重复的接口，List继承了它的可重复性，但是与之不同的是List是有序的集合，</p><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>ArrayList是Java的顺序表的体现。</p><p>我们都知道ArrayList底层是用数组实现的， 数组在线性表结构中分类属于顺序表： 顺序表的数据元素存储是连续的，内存划分的区域也是连续的。</p><h3 id="LinkList"><a href="#LinkList" class="headerlink" title="LinkList"></a>LinkList</h3><p>LinkList是Java的链表的体现。</p><p>链表在物理上存储通常是非连续的、非顺序的方式存储，但是数据元素的逻辑顺序是连续的，实现方式是通过链表中的引用来实现。</p><p>我们常说 LinkList是链表实现，其实准确的说法是 ： LinkList的实现是双向链表实现。</p><p>关于链表，常用的有三种： 单向链表、 循环链表、 双向链表。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fvlm5ocbtjj30ik0gswiv.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>Stack是Vector的子类，实现了栈结构，是栈结构的代表。</p><p>栈和队列是特殊的线性表，或者说是受到限制的线性表，其限制是仅允许在线性表的尾部进行添加和删除操作，一端被称为栈顶，另一端称为栈底。 向一个栈添加新的元素叫做： 压栈， 删除元素叫做： 出栈。</p><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>Set 是 Collection 的另一个常用接口，其特点事不可重复，无序，但是 并不是完全无序，元素的存放是有一定规律的，只是没有下标序列表示元素的位置。</p><p>其实严格的说，set的元素存放的方式是： 散列的方式存放， 也就是通过计算hash的方式存放元素。</p><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>队列通常是指 “First in first Out” 的容器。 队列的头部是在队列中存放时间最长的元素，队列的尾部是保存在队列中存放时间最短的元素。 新元素插入 offer 到队列的尾部，访问元素poll 操作 会返回队列头部元素，通常，队列不允许随机访问队列中的元素。</p><p>Queue接口是对列的体现，在实现上是基本链表实现的，但是具体的实现类是LinkList，也就是说，Java通过Queue接口收窄了LinkList的访问权限，只是提供队列尾巴和队列头的操作，从而实现了队列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Queue queue = <span class="keyword">new</span> LinkList();s</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map不同于Collection，在Map中提供了一种映射关系，也就是我们常说的键值对。</p><ul><li>能够实现根据Key值快速查找Value</li><li>Map中的键值对以Entry类型的对象实例形式存在</li><li>键值Key值不可重复，Vaule值可以</li><li>每个键值最多能映射到每一个值</li></ul><blockquote><p>后续摘要，继续补充</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java集合分析01&quot;&gt;&lt;a href=&quot;#Java集合分析01&quot; class=&quot;headerlink&quot; title=&quot;Java集合分析01&quot;&gt;&lt;/a&gt;Java集合分析01&lt;/h1&gt;&lt;p&gt;Java的集合是Java的提供的工具包, java.util.* 包含了常用
      
    
    </summary>
    
    
    
      <category term="集合" scheme="http://lmwtuedu.cn/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Redis（01）笔记</title>
    <link href="http://lmwtuedu.cn/2018/09/20/2018-09-20-Redis%E7%AC%94%E8%AE%B0_01/"/>
    <id>http://lmwtuedu.cn/2018/09/20/2018-09-20-Redis笔记_01/</id>
    <published>2018-09-19T16:00:00.000Z</published>
    <updated>2019-08-15T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>#Redis笔记01</p><blockquote><p>工作中也常常用到redis，对Redis的使用也是停留在一些操作上面，工作上也遇到要用redis的场景，例如：单点登录、缓存数据库（热点数据）、高并发某些特定业务的优化等；一直忙于项目，没有时间整理，前段时间买了一本掘金 老钱的Redis，觉得不错，顺便整理一下redis的知识，如有错误地方，请指正。</p></blockquote><h3 id="基础数据结构"><a href="#基础数据结构" class="headerlink" title="基础数据结构"></a>基础数据结构</h3><ul><li>string: 字符串</li><li>list: 列表</li><li>set: 集合</li><li>hash: 哈希</li><li>zset: 有序集合</li></ul><p>封装了基本的线程池以及工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.darker.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> lj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/17 16:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span> lmwtuedu@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisPool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(RedisPool.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程池的配置，继承于apache common pool2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> JedisPoolConfig jedisPoolConfig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis的IP地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis的端口号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis的密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用连接实例的最大数目，默认值为8；</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxTotal;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxIdle;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待可用连接的最大时间，单位毫秒，</span></span><br><span class="line"><span class="comment">     * 默认值为-1，表示永不超时。如果超过等待时间，</span></span><br><span class="line"><span class="comment">     * 则直接抛出JedisConnectionException；</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> maxWaitMillis;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis的线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化Redis连接池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedisPool = <span class="keyword">new</span> JedisPool(jedisPoolConfig, ip, port, <span class="number">4000</span>, password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"First create JedisPool error : "</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Instance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Jedis <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回收redis</span></span><br><span class="line"><span class="comment">     * 注意：returnResource</span></span><br><span class="line"><span class="comment">     *      returnBrokenResource</span></span><br><span class="line"><span class="comment">     * 两种方法封装close</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Jedis jedis)</span></span>&#123;</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装了一个Manger的类工具，专门管理redis的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.darker.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> lj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/18 10:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span> lmwtuedu@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RedisPool redisPool;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisManager</span><span class="params">(RedisPool redisPool)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisPool = redisPool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Jedis <span class="title">getRedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisPool.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Jedis jedis)</span></span>&#123;</span><br><span class="line">       redisPool.close(jedis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  .....   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下基于基本的类型，给予操作，以及一些使用场景。</p><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p> 字符串的结构使用非常广泛，一个常见的用途就是<strong>缓存用户信息</strong>； 怎么缓存用户信息呢？ 例如用户信息是一个对象或者是一个JSON，推荐采用json，键值对方式容易扩张，然后序列化成字符串形式，然后塞进Redis缓存。 同样，取用户信息经过一次反序列化的过程。</p><p>Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，<font color="red">采用预分配冗余空间的方式</font>来减少内存的频繁分配。</p><blockquote><p>当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。</p></blockquote><p>这句话：”扩容都是加倍现有空间”。</p><p>字符串是由多个字节组成，每个字节又是由8个bit组成，如此便可以将一个字符串看成很多bit的组合，这便是 <em>bitmap(位图)</em> 数据结构。</p><p>Jedis提供关于String的操作Java的API有这些：set</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fvdj4jptm6j30ad03w0t4.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存储数据到缓存中，若key已存在则覆盖 value的长度不能超过1073741824 bytes (1 GB)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">set</span><span class="params">(String key, String value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存储数据到缓存中，并制定过期时间和当Key存在时是否覆盖。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nxxx </span></span><br><span class="line"><span class="comment"> *            nxxx的值只能取NX或者XX，如果取NX，则只有当key不存在是才进行set，如果取XX，则只有当key已经存在时才进行set</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> expx expx的值只能取EX或者PX，代表数据过期时间的单位，EX代表秒，PX代表毫秒。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> time 过期时间，单位是expx所代表的单位。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">set</span><span class="params">(String key, String value, String nxxx, String expx, <span class="keyword">long</span> time)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="String的应用场景"><a href="#String的应用场景" class="headerlink" title="String的应用场景"></a>String的应用场景</h4><p>1) 存储SQL的某一个字段</p><p>把Key值设计为：  <code>表名：主键名：主键值：字段名</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set user:id:1:email:123456@163.com</span><br></pre></td></tr></table></figure><p>2)存储对象</p><p>String类型支持任何格式的字符串，应用最多的就是存储JSON或其他对象格式的字符串，应用最多的就是存储JSON或其他对象格式化的字符串。(这种场景下推荐使用hash数据类型)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set user:id:1 &apos;[&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;zj&quot;,&quot;email&quot;:&quot;156577812@qq.com&quot;&#125;,&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;zj&quot;,&quot;email&quot;:&quot;156577812@qq.com&quot;&#125;]&apos;</span><br></pre></td></tr></table></figure><p>3) 生成自增id</p><p>当redis的string类型的值为整数形式时，redis可以把它当做是整数一样进行自增(incr)、自减(decr)操作。由于redis所有操作都是原子性的，所以<code>不必担心客户端连接时可能出现的事务</code>问题。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>Redis的列相当于Java语言的LinkedList，注意它是链表而不是数组。这意味着list的插入和删除操作非常快，时间复杂度为O(1), 但是索引很慢，时间复杂度为O(n).</p><p>如果再深入一点，你会发现Redis底层存储的还不是一个简单的linkedlist，而是称之为快速链表quicklist 的一个结构。</p><p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是 <code>ziplist</code> , 也是压缩列表。 它将所有的元素紧挨着一起存储，分配的是一块连续的内存。 当数据量比较多的时候才会改成 quicklist。 因为普通的链表需要的附加指针空间太大，会比较浪费时间，而且会加重内存的碎片化。 比如这个列表存的只是<code>int</code>类型的数据， 结构上还需要两个额外的指针 <code>prev</code> 和 <code>next</code>. 所以Redis将链表和 <code>ziplist</code>结合起来组成了 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 右进</span></span><br><span class="line"><span class="function">Long <span class="title">rpush</span><span class="params">(String key, String... string)</span></span>;</span><br><span class="line"><span class="comment">// 左进</span></span><br><span class="line"><span class="function">Long <span class="title">lpush</span><span class="params">(String key, String... string)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左出</span></span><br><span class="line"><span class="function">String <span class="title">lpop</span><span class="params">(String key)</span></span>;</span><br><span class="line"><span class="comment">// 右出</span></span><br><span class="line"><span class="function">String <span class="title">rpop</span><span class="params">(String key)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;String&gt; <span class="title">lrange</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="list数据类型的应用场景"><a href="#list数据类型的应用场景" class="headerlink" title="list数据类型的应用场景"></a>list数据类型的应用场景</h4><p>1) 消息队列</p><p>redis的list数据类型对于大部分使用者来说，是实现队列服务最为经济，最为简单方式。</p><p>2) “最新内容”</p><p>因为list结构的数据查询两端附近的数据性能非常好，所以适合一些需要获取最新数据的场景，比如新闻类应用的 “最新新闻”。</p><p>优化建议：<br>list是链表结构，所以如果在头部和尾部插入数据，性能非常高，不受链表长度影响；但是如果在链表中插入数据，性能就会越来越差。</p><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>Redis的字典相当于Java语言里面的HashMap，它是无序字典。 内部实现结构上同Java的HashMap也一致。 同样的数组 + 链表二位结构。 第一维 hash的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006tNbRwly1fv818grt5cj30au07m0t5.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>不同的是，Redis的字典的值只能是字符串，另外它们的rehash的方式不一样，因为Java的HashMap在字典很大的时候，rehash是个耗时的操作，需要一次性全部rehash。 Redis为了提高性能，不能堵塞服务，所以采取了渐进方式rehash策略。</p><p> <img src="https://ws1.sinaimg.cn/large/006tNbRwly1fv81g60s5tj30jl06bjs6.jpg" alt></p><p> 渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之。</p><p> hash 结构也可以用来存储用户信息，不同于字符串一次性需要<strong>全部序列化整个对象</strong>，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。</p><p> hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。</p><h4 id="hash数据类型的应用场景"><a href="#hash数据类型的应用场景" class="headerlink" title="hash数据类型的应用场景"></a>hash数据类型的应用场景</h4><p>hash 类型很像一个关系型数据库的数据表，hash 的 Key 是一个唯一值，Value 部分是一个 hashmap 的结构。</p><p>假设一张表结构如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/006tNbRwly1fvetx6nuoej30kn02gdfv.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>如果要用redis的hash结构存储，数据模型如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/006tNbRwly1fvetycmurxj30bv05gglv.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>hash数据类型在存储上述类型的数据时具有比string类型更加灵活、更快的优势。使用string类型存储，必然需要转换和解析json格式的字符串，即便不需要转换，在内存开销方面还是hash占优势。</p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>Redis的集合相当于Java语言里面的HashSet，它内部的键值对是无序的的唯一的，它的内部实现相当于一个特殊的字典，字典中所有的value都是NULL。</p><p>set 结构可以用来存储活动中奖的用户 ID，因为有去重功能，可以保证同一个用户不会中奖两次。</p><p>set数据类型是一个集合(没有排序，不重复)，可以对set类型的数据进行添加、删除、判断是否存在等操作(时间复杂度O(1))</p><p>set集合不允许数据重复，如果添加的数据在set中已经存在，将只保留一份。</p><p>set类型提供了多个set之间的聚合运算，如求交集、并集、补集；这些操作在redis的内部完成，效率很高。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fvft48n6qmj30d708ydg7.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>set 类型的特点是——不重复且无序的一组数据，并且具有丰富的计算功能，在一些特定的场景中可以高效的解决一般关系型数据库不方便做的工作。</p><h4 id="set的应用场景"><a href="#set的应用场景" class="headerlink" title="set的应用场景"></a>set的应用场景</h4><p>“共同好友列表”</p><p>　社交类应用中，获取两个人或多个人的共同好友，两个人或多个人共同关注的微博这样类似的功能，用 MySQL 的话操作很复杂，可以把每个人的好友 id 存到集合中，获取共同好友的操作就可以简单到一个取交集的命令就搞定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 这里为了方便阅读，把 id 替换成姓名</span><br><span class="line">sadd user:wade james melo paul kobe</span><br><span class="line">sadd user:james wade melo paul kobe</span><br><span class="line">sadd user:paul wade james melo kobe</span><br><span class="line">sadd user:melo wade james paul kobe</span><br><span class="line"></span><br><span class="line">// 获取 wade 和 james 的共同好友</span><br><span class="line">sinter user:wade user:james</span><br><span class="line">/* 输出：</span><br><span class="line"> *      1) &quot;kobe&quot;</span><br><span class="line"> *      2) &quot;paul&quot;</span><br><span class="line"> *      3) &quot;melo&quot;</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line"> // 获取香蕉四兄弟的共同好友</span><br><span class="line"> sinter user:wade user:james user:paul user:melo</span><br><span class="line"> /* 输出：</span><br><span class="line"> *      1) &quot;kobe&quot;</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line"> /*</span><br><span class="line">     类似的需求还有很多 , 必须把每个标签下的文章 id 存到集合中，可以很容易的求出几个不同标签下的共同文章；</span><br><span class="line"> 把每个人的爱好存到集合中，可以很容易的求出几个人的共同爱好。 </span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Long <span class="title">sadd</span><span class="params">(String key, String... member)</span></span>;</span><br><span class="line"><span class="function">Long <span class="title">sadd</span><span class="params">(<span class="keyword">byte</span>[] key, <span class="keyword">byte</span>[]... member)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h3><p>zset 可能是 Redis 提供的最为特色的数据结构，它也是在面试中面试官最爱问的数据结构。它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。</p><p>zset 可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。</p><p>zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。</p><p>java: zadd(…) 参数列表如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006tNbRwly1fvfud0h68jj30ce03wgm2.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Long <span class="title">zadd</span><span class="params">(String key, <span class="keyword">double</span> score, String member)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Long <span class="title">zadd</span><span class="params">(String key, <span class="keyword">double</span> score, String member, ZAddParams params)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Long <span class="title">zadd</span><span class="params">(String key, Map&lt;String, Double&gt; scoreMembers)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Long <span class="title">zadd</span><span class="params">(String key, Map&lt;String, Double&gt; scoreMembers, ZAddParams params)</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Redis笔记01&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工作中也常常用到redis，对Redis的使用也是停留在一些操作上面，工作上也遇到要用redis的场景，例如：单点登录、缓存数据库（热点数据）、高并发某些特定业务的优化等；一直忙于项目，没有时间整理，前段时间买了
      
    
    </summary>
    
    
    
      <category term="redis" scheme="http://lmwtuedu.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>闲说RPC_01</title>
    <link href="http://lmwtuedu.cn/2018/09/05/2018-09-05-%E9%97%B2%E8%AF%B4RPC_01/"/>
    <id>http://lmwtuedu.cn/2018/09/05/2018-09-05-闲说RPC_01/</id>
    <published>2018-09-04T16:00:00.000Z</published>
    <updated>2019-08-15T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>#闲说-RPC（一）</p><blockquote><p>我只是一个网络搬运工，客观的归纳整理。 如有侵权，请联系我</p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>Java</li><li>JDK1.8</li><li>IDEA</li><li>maven</li></ul><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>常言道听的多了就懂了，一老听同事RPC，我本人也懂得一些rpc的用法，例如一些开源框架阿里的dubbo，调度中心的工具zookeeper。 熟练的运用如何操作。通过spring只需简单的配置一些配置，例如：</p><p>服务端配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:application name=&quot;xxxxxx-rpc-service&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;dubbo:registry address=&quot;zookeeper://127.0.0.1:2181&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20881&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--&lt;dubbo:monitor protocol=&quot;registry&quot;/&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 系统 --&gt;</span><br><span class="line">&lt;bean id=&quot;xxxSystemService&quot; class=&quot;com.xxxxx.rpc.service.impl.UpmsSystemServiceImpl&quot;/&gt;</span><br><span class="line">&lt;dubbo:service interface=&quot;com.xxxxxx.rpc.api.xxxSystemService&quot; ref=&quot;upmsSystemService&quot; timeout=&quot;10000&quot;/&gt;</span><br></pre></td></tr></table></figure><p>客户端配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:application name=&quot;xxx-server&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;dubbo:registry file=&quot;./xxx-server-dubbo.cache&quot; address=&quot;zookeeper://127.0.0.1:2181&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 订阅服务 --&gt;</span><br><span class="line">&lt;dubbo:consumer check=&quot;false&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 系统 --&gt;</span><br><span class="line">&lt;dubbo:reference id=&quot;xxxSystemService&quot; interface=&quot;com.xxx.rpc.api.xxxSystemService&quot; mock=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure><p>我摘录了一些知乎的关于原理的回答：</p><p><a href="https://www.zhihu.com/question/25536695" target="_blank" rel="noopener">知乎rpc解释</a></p><h3 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h3><p>RPC：远程调用。通过RPC框架，使得我们可以像调用本地方法一样地调用远程机器上的方法：</p><p>1、本地调用某个函数方法</p><p>2、本地机器的RPC框架把这个调用信息封装起来（调用的函数、入参等），序列化(json、xml等)后，通过网络传输发送给远程服务器</p><p>3、远程服务器收到调用请求后，远程机器的RPC框架反序列化获得调用信息，并根据调用信息定位到实际要执行的方法，执行完这个方法后，序列化执行结果，通过网络传输把执行结果发送回本地机器</p><p>4、本地机器的RPC框架反序列化出执行结果，函数return这个结果</p><p>作者：Doing<br>链接：<a href="https://www.zhihu.com/question/25536695/answer/285844835" target="_blank" rel="noopener">https://www.zhihu.com/question/25536695/answer/285844835</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fuyhjsuwwdj30hv0adtah.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fuyhkql03nj30ij0b2ju7.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>具体的详细点击链接查看一些人对于原理的解释吧。</p><h3 id="归纳"><a href="#归纳" class="headerlink" title="归纳"></a>归纳</h3><p>知乎的一些回答，提到了一些概念东西，RPC的实现需要： 选择传输协议、协议传输层、注册中心选择。</p><ul><li><p>选择传输协议</p><p>高性能的rpc和良好的编码协议是分不开的。好的协议不仅耗用流量小，而且序列化和反序列化更快。<br>现在比较流行的协议thrift、protobuf、json、restful等。其中thrfit和protobuf性能都比较优异，而且占用空间较小，最重要是跨语言，具有语言平台无关性。美中不足就是他们都需要预先根据协议文件预先生成好代码。开发不流畅，但是我们可以自定义协议。像dubbo和motan一样。具体详细百度dubbo和motan</p></li></ul><ul><li><p>协议传输层</p><p>Netty框架不局限于rpc，更多的是作为一种网络协议的实现框架，例如HTTP，由于RPC需要高效的网络通信，就可能选择以Netty作为基础。 Netty提供异步的、事件驱动的网络应用程序架构和工具，用以快速开发高性能、高可靠的网络服务器和客户端程序。目前使用netty作为传输层的rpc框架有很多，例如dubbo motan等</p></li><li><p>注册中心的选择</p><p>现在有很多提供服务注册发现的服务，实现成本比较低的就是zookeeper，可以很容易的实现服务注册和服务发现的功能。</p></li></ul><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p> 以上都是对RPC的一些原理的一些东西的解释。接下来就请查看我基于一份别人写的开源项目，去剖析RPC的一些实现东东吧。具体详细见：闲说-RPC（二）</p><blockquote><p>一个流浪的码农，小主赏赐一口饭吃～</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#闲说-RPC（一）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我只是一个网络搬运工，客观的归纳整理。 如有侵权，请联系我&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/
      
    
    </summary>
    
    
    
      <category term="rpc" scheme="http://lmwtuedu.cn/tags/rpc/"/>
    
  </entry>
  
  <entry>
    <title>学习架构参考</title>
    <link href="http://lmwtuedu.cn/2018/08/29/2018-08-29-%E5%AD%A6%E4%B9%A0%E5%8F%82%E8%80%83%E8%AE%BE%E8%AE%A1%E6%9E%B6%E6%9E%84/"/>
    <id>http://lmwtuedu.cn/2018/08/29/2018-08-29-学习参考设计架构/</id>
    <published>2018-08-28T16:00:00.000Z</published>
    <updated>2019-08-15T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>##学习参考设计架构</p><p>在此收集的支付宝的系统架构图包含：清算、客服、处理、资金、财务等等，由于资料年限限制，仅供参考，但基本架构相信还是变化不大的。作为支付行业的龙头，架构系统值得学习！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuqeoxyex8j30ga0c742v.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuqepvq8eaj30jb0dltg8.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuqer16z5rj30kd0c10x8.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuqeroc5hlj30ki0f4thc.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuqesbxcb2j30kf0fgth7.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuqet7zlo5j30lj0go7bh.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuqeu14b2wj30mt0gfwo9.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuqevfexbqj30mk0g7qb4.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuqew6zyo0j30of0fs47s.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuqewwj9azj30kh0ejdl1.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuqexsew1kj30nd0giwq6.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuqeyi4uo1j30mc0g3aj0.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuqez5nymwj30nh0hfwnn.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuqezojjk5j30m40gnqf2.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuqf0iuidlj30mw0hjk26.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuqf169lslj30kp0g5q95.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##学习参考设计架构&lt;/p&gt;
&lt;p&gt;在此收集的支付宝的系统架构图包含：清算、客服、处理、资金、财务等等，由于资料年限限制，仅供参考，但基本架构相信还是变化不大的。作为支付行业的龙头，架构系统值得学习！&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
  
      
    
    </summary>
    
    
    
      <category term="code" scheme="http://lmwtuedu.cn/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>ELK搭建实时日志分析平台</title>
    <link href="http://lmwtuedu.cn/2018/07/26/2018-07-26-ELK(ElasticSearch,%20Logstash,%20Kibana)%E6%90%AD%E5%BB%BA%E5%AE%9E%E6%97%B6%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0/"/>
    <id>http://lmwtuedu.cn/2018/07/26/2018-07-26-ELK(ElasticSearch, Logstash, Kibana)搭建实时日志分析平台/</id>
    <published>2018-07-25T16:00:00.000Z</published>
    <updated>2019-08-15T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELK-ElasticSearch-Logstash-Kibana-搭建实时日志分析平台"><a href="#ELK-ElasticSearch-Logstash-Kibana-搭建实时日志分析平台" class="headerlink" title="ELK(ElasticSearch, Logstash, Kibana)搭建实时日志分析平台"></a>ELK(ElasticSearch, Logstash, Kibana)搭建实时日志分析平台</h1><p>在搜索ELK资料的时候，发现这篇文章比较好，于是摘抄一小段：<br>以下内容来自：<a href="http://baidu.blog.51cto.com/71938/1676798" target="_blank" rel="noopener">http://baidu.blog.51cto.com/71938/1676798</a></p><p>日志主要包括系统日志、应用程序日志和安全日志。系统运维和开发人员可以通过日志了解服务器软硬件信息、检查配置过程中的错误及错误发生的原因。经常分析日志可以了解服务器的负荷，性能安全性，从而及时采取措施纠正错误。<br>通常，日志被分散的储存不同的设备上。如果你管理数十上百台服务器，你还在使用依次登录每台机器的传统方法查阅日志。这样是不是感觉很繁琐和效率低下。当务之急我们使用集中化的日志管理，例如：开源的syslog，将所有服务器上的日志收集汇总。<br>集中化管理日志后，日志的统计和检索又成为一件比较麻烦的事情，一般我们使用grep、awk和wc等Linux命令能实现检索和统计，但是对于要求更高的查询、排序和统计等要求和庞大的机器数量依然使用这样的方法难免有点力不从心。<br>开源实时日志分析ELK平台能够完美的解决我们上述的问题，ELK由ElasticSearch、Logstash和Kiabana三个开源工具组成。官方网站：<a href="https://www.elastic.co/products" target="_blank" rel="noopener">https://www.elastic.co/products</a></p><p>•    Elasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</p><p>•    Logstash是一个完全开源的工具，他可以对你的日志进行收集、过滤，并将其存储供以后使用（如，搜索）。</p><p>•    Kibana 也是一个开源和免费的工具，它Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志。</p><p>—————————-摘抄内容结束——————————-</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftnb3g1co9j31c20xnatk.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="ELK平台搭建"><a href="#ELK平台搭建" class="headerlink" title="ELK平台搭建"></a>ELK平台搭建</h2><ul><li>系统环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System: Centos release 6.7 (Final)</span><br><span class="line">ElasticSearch: 2.1.0</span><br><span class="line">Logstash: 2.1.1</span><br><span class="line">Kibana: 4.3.0</span><br><span class="line">Java: openjdk version  &quot;1.8.0_65&quot;</span><br></pre></td></tr></table></figure><p>注：由于Logstash的运行依赖于Java环境， 而Logstash 1.5以上版本不低于java 1.7，因此推荐使用最新版本的Java。因为我们只需要Java的运行环境，所以可以只安装JRE，不过这里我依然使用JDK，请自行搜索安装。</p><p>ELK下载：<a href="https://www.elastic.co/downloads/" target="_blank" rel="noopener">https://www.elastic.co/downloads/</a></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1ftnb6wvlgcj31bc1eywv1.jpg" alt></p><p>##ElasticSearch<br>配置ElasticSearch：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf elasticsearch-2.1.0.tar.gz</span><br><span class="line">cd elasticsearch-2.1.0</span><br></pre></td></tr></table></figure><p>安装Head插件（Optional）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/plugin install mobz/elasticsearch-head</span><br></pre></td></tr></table></figure><p>然后编辑ES的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi config/elasticsearch.yml</span><br></pre></td></tr></table></figure><p>修改以下配置项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cluster.name=es_cluster</span><br><span class="line">node.name=node0</span><br><span class="line">path.data=/tmp/elasticsearch/data</span><br><span class="line">path.logs=/tmp/elasticsearch/logs</span><br></pre></td></tr></table></figure><p>#当前hostname或IP，我这里是centos2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">network.host=centos2</span><br><span class="line">network.port=9200</span><br></pre></td></tr></table></figure><p><strong><font color="red">错误修改</font></strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tKfTcgy1ftnb9r4r82j31c20jp78v.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong><font color="red">正确示范：</font></strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tKfTcgy1ftnbf0250yj30zv0b7n23.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>其他的选项保持默认，然后启动ES：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tKfTcgy1ftnbg68k0oj31ev0qiwt1.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong><font color="red">启动提示错误时：</font></strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftnbm1fzkkj31c215dtnc.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>可以看到，它跟其他的节点的传输端口为9300，接受HTTP请求的端口为9200。<br>使用ctrl+C停止。当然，也可以使用后台进程的方式启动ES：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch &amp;</span><br></pre></td></tr></table></figure><p>然后可以打开页面localhost:9200，将会看到以下内容：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftnbmq97p3j316p0mtq9a.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>返回展示了配置的cluster_name和name，以及安装的ES的版本等信息<br>刚刚安装的head插件，它是一个用浏览器跟ES集群交互的插件，可以查看集群状态、集群的doc内容、执行搜索和普通的Rest请求等。现在也可以使用它打开<a href="localhost:9200/_plugin/head" target="_blank" rel="noopener">localhost:9200/_plugin/head</a>页面来查看ES集群状态：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftnborznz2j31dr0lm45f.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>可以看到，现在，ES集群中没有index，也没有type，因此这两条是空的。</p><h2 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h2><p>Logstash的功能如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftnbr8l9dpj31g70o5wje.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>其实它就是一个收集器而已，我们需要为它指定Input和Output（当然Input和Output可以为多个）。由于我们需要把Java代码中Log4j的日志输出到ElasticSearch中，因此这里的Input就是Log4j，而Output就是ElasticSearch。<br>配置Logstash：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf logstash-2.1.1.tar.gz</span><br><span class="line">cd logstash-2.1.1</span><br></pre></td></tr></table></figure><p>编写配置文件(名字和位置可以随意，这里我放在config目录下，取名为log4j_to_es.conf)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir config</span><br><span class="line">vi config/log4j_to_es.conf</span><br></pre></td></tr></table></figure><p>输入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># For detail structure of this file</span><br><span class="line"># Set: https://www.elastic.co/guide/en/logstash/current/configuration-file-structure.html</span><br><span class="line">input &#123;</span><br><span class="line">  # For detail config for log4j as input, </span><br><span class="line">  # See: https://www.elastic.co/guide/en/logstash/current/plugins-inputs-log4j.html</span><br><span class="line">  log4j &#123;</span><br><span class="line">    mode =&gt; &quot;server&quot;</span><br><span class="line">    host =&gt; &quot;centos2&quot;</span><br><span class="line">    port =&gt; 4567</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">  #Only matched data are send to output.</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  # For detail config for elasticsearch as output, </span><br><span class="line">  # See: https://www.elastic.co/guide/en/logstash/current/plugins-outputs-elasticsearch.html</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    action =&gt; &quot;index&quot;            #The operation on ES</span><br><span class="line">    hosts  =&gt; &quot;centos2:9200&quot;     #ElasticSearch host, can be array.</span><br><span class="line">    index  =&gt; &quot;ec&quot;               #The index to write data to, can be any string.</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>logstash命令只有2个参数：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftnbsqgezaj313v0graey.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>因此使用agent来启动它（使用-f指定配置文件）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/logstash agent -f config/log4j_to_es.conf</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftnbv8aledj31kw0aa441.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>到这里，我们已经可以使用Logstash来收集日志并保存到ES中了，下面来看看项目代码。<br>Java项目<br>照例先看项目结构图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftnbvo9i1vj30m30naaeb.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>pom.xml，很简单，只用到了Log4j库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>log4j.properties，将Log4j的日志输出到SocketAppender，因为官网是这么说的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftnbwnt058j31hg0kl7g6.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO,console</span><br><span class="line"></span><br><span class="line"># for package com.demo.elk, log would be sent to socket appender.</span><br><span class="line">log4j.logger.com.demo.elk=DEBUG, socket</span><br><span class="line"></span><br><span class="line"># appender socket</span><br><span class="line">log4j.appender.socket=org.apache.log4j.net.SocketAppender</span><br><span class="line">log4j.appender.socket.Port=4567</span><br><span class="line">log4j.appender.socket.RemoteHost=centos2</span><br><span class="line">log4j.appender.socket.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.socket.layout.ConversionPattern=%d [%-5p] [%l] %m%n</span><br><span class="line">log4j.appender.socket.ReconnectionDelay=10000</span><br><span class="line"></span><br><span class="line"># appender console</span><br><span class="line">log4j.appender.console=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.target=System.out</span><br><span class="line">log4j.appender.console.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern=%d [%-5p] [%l] %m%n</span><br></pre></td></tr></table></figure><p>注意：这里的端口号需要跟Logstash监听的端口号一致，这里是4567。</p><p><font color="red">特别注意：工程的包名称</font></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftnbxs5ht3j31c208l0v7.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>Application.java，使用Log4j的LOGGER打印日志即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.demo.elk;</span><br><span class="line"></span><br><span class="line">import org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line">public class Application &#123;</span><br><span class="line">    private static final Logger LOGGER = Logger.getLogger(Application.class);</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">            LOGGER.error(&quot;Info log [&quot; + i + &quot;].&quot;);</span><br><span class="line">            Thread.sleep(500);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用Head插件查看ES状态和内容<br>运行Application.java，先看看console的输出（当然，这个输出只是为了做验证，不输出到console也可以的）：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftnc0t60enj31kw0endv5.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>再来看看ES的head页面：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftnc17fs0yj31kw0o5k5c.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>切换到Browser标签：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ftnc4792wij31kw0pm17i.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>单击某一个文档（doc），则会展示该文档的所有信息：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftnc4m5d3wj317k0tv7hy.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>可以看到，除了基础的message字段是我们的日志内容，Logstash还为我们增加了许多字段。而在<a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-log4j.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/current/plugins-inputs-log4j.html</a>中也明确说明了这一点：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftnc5fm6i6j31kw0lawx1.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>上面使用了ES的Head插件观察了ES集群的状态和数据，但这只是个简单的用于跟ES交互的页面而已，并不能生成报表或者图表什么的，接下来使用Kibana来执行搜索并生成图表。</p><p>##Kibana<br>配置Kibana:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf kibana-4.3.0-linux-x86.tar.gz</span><br><span class="line">cd kibana-4.3.0-linux-x86</span><br><span class="line">vi config/kibana.yml</span><br></pre></td></tr></table></figure><p>修改以下几项（由于是单机版的，因此host的值也可以使用localhost来代替，这里仅仅作为演示）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.port: 5601</span><br><span class="line">server.host: “centos2”</span><br><span class="line">elasticsearch.url: http://centos2:9200</span><br><span class="line">kibana.index: “.kibana”</span><br></pre></td></tr></table></figure><p>启动kibana：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/kibana</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tKfTcgy1ftnc745twvj31kw0fgtn5.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>用浏览器打开该地址：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftnc835w4pj31kw12s4bh.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>为了后续使用Kibana，需要配置至少一个Index名字或者Pattern，它用于在分析时确定ES中的Index。这里我输入之前配置的Index名字applog，Kibana会自动加载该Index下doc的field，并自动选择合适的field用于图标中的时间字段：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ftnc8guq3pj31kw11ualm.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>点击Create后，可以看到左侧增加了配置的Index名字：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftnc8t5shej31kw0xvdpv.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>接下来切换到Discover标签上，注意右上角是查询的时间范围，如果没有查找到数据，那么你就可能需要调整这个时间范围了，这里我选择Today：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftnc9831pnj31kw0u414r.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>接下来就能看到ES中的数据了：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tKfTcgy1ftnc9y6fkhj31kw11eapo.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>执行搜索看看呢：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftncacyi0ej31kw116wqb.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>点击右边的保存按钮，保存该查询为search_all_logs。接下来去Visualize页面，点击新建一个柱状图（Vertical Bar Chart），然后选择刚刚保存的查询search_all_logs，之后，Kibana将生成类似于下图的柱状图（只有10条日志，而且是在同一时间段的，比较丑，但足可以说明问题了：)  ）：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftncauatjsj31kw11bqcy.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>你可以在左边设置图形的各项参数，点击Apply Changes按钮，右边的图形将被更新。同理，其他类型的图形都可以实时更新。<br>点击右边的保存，保存此图，命名为search_all_logs_visual。接下来切换到Dashboard页面：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tKfTcgy1ftncb76eruj31kw0jaags.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>单击新建按钮，选择刚刚保存的search_all_logs_visual图形，面板上将展示该图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftncblehm1j31kw0ub79t.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>如果有较多数据，我们可以根据业务需求和关注点在Dashboard页面添加多个图表：柱形图，折线图，地图，饼图等等。当然，我们可以设置更新频率，让图表自动更新：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tKfTcgy1ftncbyu8qzj31kw0hlaio.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>如果设置的时间间隔够短，就很趋近于实时分析了。<br>到这里，ELK平台部署和基本的测试已完成。</p><p>参考：<br><a href="http://baidu.blog.51cto.com/71938/1676798" target="_blank" rel="noopener">http://baidu.blog.51cto.com/71938/1676798</a><br><a href="http://blog.csdn.net/cnweike/article/details/33736429" target="_blank" rel="noopener">http://blog.csdn.net/cnweike/article/details/33736429</a></p><p>来自： <a href="http://my.oschina.net/itblog/blog/547250" target="_blank" rel="noopener">http://my.oschina.net/itblog/blog/547250</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ELK-ElasticSearch-Logstash-Kibana-搭建实时日志分析平台&quot;&gt;&lt;a href=&quot;#ELK-ElasticSearch-Logstash-Kibana-搭建实时日志分析平台&quot; class=&quot;headerlink&quot; title=&quot;ELK(
      
    
    </summary>
    
    
    
      <category term="reprint" scheme="http://lmwtuedu.cn/tags/reprint/"/>
    
      <category term="code" scheme="http://lmwtuedu.cn/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>爆雷之后 中产惊惶</title>
    <link href="http://lmwtuedu.cn/2018/07/26/2018-08-06-%E7%88%86%E9%9B%B7%E4%B9%8B%E5%90%8E%20%E4%B8%AD%E4%BA%A7%E6%83%8A%E6%83%B6/"/>
    <id>http://lmwtuedu.cn/2018/07/26/2018-08-06-爆雷之后 中产惊惶/</id>
    <published>2018-07-25T16:00:00.000Z</published>
    <updated>2019-08-15T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爆雷之后-中产惊惶"><a href="#爆雷之后-中产惊惶" class="headerlink" title="爆雷之后 中产惊惶"></a>爆雷之后 中产惊惶</h2><p>昏暗的灯光下，程⽣在电脑前跟各地难友沟通。他在杭州拱墅区的一所廉价宾馆已经住了20多天，每天所做的事就是想尽各种办法把自己的本金讨回。</p><p>财富小镇P2P平台的这一串爆雷，撕破了脆弱的中产幻觉。他们不仅损失了百万投资，体面和尊严也突然成了奢侈品。</p><p>7月25日，杭州的温度高达37度。苏州的家庭主妇李霞、广州的创业者程生、湖南的大学生张颖以及北京的保姆张彩娥，以一种怪异的方式，聚集到京杭大运河附近一家廉价旅馆。</p><p>他们自称P2P爆雷潮中的‌‌“难民‌‌”，在过去的一两年内，将家庭或个人的所有积蓄，2万到100万不等，投入到了杭州号称服务新中产的P2P平台投融家。让他们猝不及防的是，平台突然爆雷了。过去几天里，他们顶着烈日或午后忽然而至的暴雨，像无头苍蝇一样，奔走于杭州各个区，寻找追回财产的任何一丝可能性。</p><p>他们好像什么都有，但丧之也不过一夜之间。数以万计家庭的数十亿财富，突然蒸发，所有人被生活抛到了从未到达的境地。很多人从没想过自己会与维权扯上关系，体面和尊严突然成了奢侈品。</p><p>突如其来的爆雷</p><p>李霞是从苏州到了杭州后，才知道‌”爆雷‌‌“这个词的，‌‌”感觉天都塌了‌‌“。回忆起爆雷当天的情形，她情绪依然激动。这个家庭主妇可能是最早发现平台不对劲的投资者之一。7月9日那天是周一，早餐之后，丈夫去上班，女儿放暑假在家玩iPad，她例行打开投融家APP查看投资的情况，却发现登陆界面出现闪退。</p><p>这是过去不曾有的情形。李霞一直很放心投融家，自2016年7月接触以来，平台的任何异动都会提前发布公告。‌‌”这次没有任何通知，平台突然变得不稳定，这很不正常。‌‌“</p><p>押注了家庭的全部积蓄以及父母的10万公积金，平台的任何风吹草动都能引起李霞的警觉。她马上翻到在线客服页面，打算咨询客服。</p><p>客服界面也出现了异常。理应是工作时间，对话框却挂出一行红字：‌‌”当前无客服在线。客服工作时间：工作日09：00<del>21：00 非工作日09：00</del>17：30‌‌“。李霞心里咯噔了一下，立即拨打客服热线。</p><p>400开头的电话始终无人接听。中午，下午，晚上，她重复了多次。一夜辗转反侧，次日清晨，李霞重拨时，听筒里传来了冰冷的提示——‌‌”您所拨打的电话号码已被注销‌‌“。‌‌”这么快就把客服电话就注销了，公司跑路了？‌‌“李霞意识到出了问题，整个人慌了神。</p><p>余额不能提现，到期的标的没有回款，客服电话无人接听。分布在各地的投资者此前并无任何沟通渠道，APP内的投友交流区突然变成了投资客们的维权联络区。一些人踊跃建群，希望收集更多的公司信息。有人回忆，自己在7月5日还有回款，但只提出了利息，只差了几天就能避开雷区；也有人反映，7月6日投的标的没能成功生成合同。投融系另一款产品多多理财的员工，7月9日在多多理财官网上发出消息，称多多理财失去控制，员工被拖欠工资社保，引导投资人报警。</p><p>种种迹象指向了公司崩盘。</p><p>有投资者坐不住，直接飞到了投融家总部所在地杭州，其中包括浙江衢州的程生和女友。</p><p>7月9日，程生的女友在投融家平台购买的十几个标的里，正好有一个当天到期。往常标的到期后，本金和收益都会在上午九点返到个人账户，但那天到了下午，账户依然毫无动静。半个月来的奔波和睡眠不足，在程生脸上留下了大大的黑眼圈。30岁的程生做过服装批发生意，两年前转辗到广州，目前正在创业，100万元几乎是他们能拿出的全部积蓄。‌‌”她一提到这事就哭，我也是爆雷后才知道投入这么大。‌‌“程生说。</p><p>他们到杭州后，立马赶往投融家的办公室。它位于杭州市拱墅区财富小镇的核心位置，投融家所关联的投融长富集团占据了一栋大楼的12~17层，从楼梯的窗户远眺，能看到千年川流不息的京杭大运河。历史上，运河曾给杭州带来了源源不断的财富。</p><p>7月9日傍晚，程生在这里看到的却是一片混乱。办公室空无一人，A4纸印的各类文件撒了一地，办公桌抽屉大开，饮料瓶和各种杂物到处都是。守了半天一无所获后，他只好去派出所报案。接下来的几天，投融长富涌来了来自全国的投资者，等着他们的除了紧锁的办公室，只剩下还没来得及撤走的公司宣传用易拉宝。红色的展板一派喜庆，上面还在庆祝6月份公司业绩破100亿。</p><p>投融系前理财经理冯佳觉得最残酷的是，赔了的不只是自己的钱。父母、朋友和客户的钱都套进去了，这让她背负了巨大的道德压力。‌‌”我觉得我没法再过好了‌‌“，冯佳这些天里瘦了7斤。杭州7月的气温天天在36度以上，她却时不时会打个寒颤。</p><p>她是金融行业的老人。2011年互联网金融行业刚刚起步时，她开始从业，自认对选公司和选产品都很谨慎，‌‌”当初E租宝想招我，我一看他们一天内更新的借款人数量就觉得不靠谱，哪里来这么多人要借钱呢。‌‌“冯佳告诉别人，自己避开过不少坑。</p><p>一年前，冯佳任职于投融系旗下的某家子公司，并逐步买入了一些公司的产品，父母的养老金加上自己的存款，总计投入95万元。当时，一些亲戚朋友和客户向她咨询过理财产品，最终通过她购买了投融系的理财产品，总额有好几百万元。</p><p>7月9日一早，一位老客户告知她，投融长富旗下的一款产品本该当天到期，却未收到本息。她一惊，转身就致电前同事，对方告诉她，‌‌”老板联系不上了‌‌“。电话挂断后，冯佳浑身发软。朋友开车送她回家，下车时她双腿使不上劲，摔了一跤。半个多月里，冯佳时不时感到一阵恍惚，总忍不住拍打手臂确认自己不是在做梦，‌‌”我不敢相信这一切会发生在我的身上‌‌“。</p><p>也有人在7月9日这天毫无知觉。杭州本地人武连是在13日才得知爆雷消息，他投过9个平台，投融家是爆雷的第一家。‌‌”投融家注册用户有145万，现在知道的受害者据说有几万人，还有些标没有到期的人，估计还不知道投融家已经爆雷了。‌‌“李霞说。</p><p>不少人从外地赶赴杭州，‌‌”我死也要死个明白‌‌“。‌‌”从前我来杭州是来旅游的，现在变成了到处被人赶。‌‌“李霞也带着女儿走上了维权讨债之路。他们在盛夏的杭州像无头苍蝇一样，挤在廉价旅馆里等着消息，一有消息，立即赶到可能会带来转机的现场。</p><p>慢慢建立的信任</p><p>‌‌”信任崩塌了，还有什么能相信呢？‌‌“李霞经常越说越激动，突如其来的P2P违约雷暴让很多人产生了幻灭感。</p><p>许多人经常被追问，为什么要把身家性命押注到一家互联网金融平台上。‌‌<strong>”我就是信任它呀‌‌“</strong>，<strong><font color="red">几乎所有投资者都用信任来解释自己的投资行为</font></strong>。</p><p>李霞是从一个公众号的推荐中知道了投融家的存在，像她一样加入维权行列的武连则是从杭州本地的电台节目交通91.8上知道了它。他们都再三强调了投融家背后的上市公司投融长富的背景，认为这让公司的抗风险能力更高，产品更规范。</p><p>李霞认为自己已经非常谨慎了。她两年前开始投资投融家产品，和多数投资者一样，最初额度都很小，几千块试水，周期不长，密切留意平台的到账时间。两年来，产品回款及提现几乎是秒到账。‌‌”非常准，就慢慢信任它了。‌‌“</p><blockquote><p>套路玩法1：初步建立信任，秒到账，周期短，慢慢建立信任链</p></blockquote><p>投融家平台非常注意对用户的运营和维护。2017年2月正值农历新年，李霞收到了投融家发来的包裹，里面是一个紫砂保温杯。‌‌”一周年时给投资者送的小礼品，公司有这个文化还挺用心的。‌‌“她没有用过那个紫砂保温杯，却因此对投融家的信任度更高了。</p><blockquote><p>套路玩法2:对用户邮寄小的礼物，杯子、公仔、键盘、鼠标、鼠标垫、行李箱、背包、剃须刀； 此套路常常出现在生活中，办理信用卡上。 人都是需要被爱的，进一步建立此公司满靠谱，挺用心的。</p></blockquote><p>她还留意到，平台经常会提前几天发出服务器运维的公告，包括某些银行充值或提现的服务指引公告。这些细节让她形成了一个印象：投融家在意用户的感受，平台的可控性高，不会无缘无故出问题。李霞的投资额度越来越大，时间周期也逐渐变长，最终她把父母的十几万存款与自己十几年的积蓄都放了进去。</p><blockquote><p>套路玩法3: 公告指示：引导用户一些操作，基本操作技能，在乎用户体验，让用户感受可控性高</p></blockquote><p>有人相信自己是拿到了内幕消息的。程生的女友是金融从业者，有位朋友是杭州某家银行的管理层，‌‌”他自己买了，然后推荐给我们‌‌“。在这种微妙的类似内幕消息的心理暗示下，程生家里的现金陆续被放进了投融家。‌‌”其实她也希望分散一下风险，所以分成了十几个标，在不同的时间段买的。‌‌“程生认为，一旦相信了这个平台，投一半和投全部几乎没有区别，有闲钱了就投。</p><blockquote><p>套路玩法4: 所谓的“内幕消息”，公司职员购买公司产品，金融从业者，高管～～， “听起别人的推荐” 一口相传，朋友推荐，这样比自己推销更可靠～～</p></blockquote><p>武连也以为自己站在了安全警戒线内。他是本地人，有各种消息渠道，一些信息和迹象让他相信，这是家‌‌”跟上面关系很好‌‌“的公司。在投融家的公众号上，政府官员考察的信息被当做新闻推送，像武连这样的投资者将之视作政府的背书。</p><blockquote><p>套路玩法5: 跟所谓的“关系” 政府搞好关系，当地媒体推送，以及媒体的传播～～ 借助外部优秀的形象包装自己，如上市公司，靠山央企，国家保障～～</p></blockquote><p>维权者中，还有一些本不具备投资知识的人‌‌”听了高档人的建议‌‌“，也杀了进去。张彩娥瞒着家人赶到了杭州，她家在河南，在北京做家政，在投融系平台总共投了十五万元。2017年儿子买车想要钱，她没给，想再多存点，‌‌”如果是低档人说的，我可能就不投了‌‌“。</p><blockquote><p>套路玩法6: “高档人推荐”， 眼红所谓别人的利益，都想去从中分一杯羹，就好比撸羊毛的策略～</p></blockquote><p>也有人觉得自己做足了功课，是理性投资者。张颖刚满20岁，还在念大三，自己打工存下了两万多元。她考过证券从业资格证、投资顾问证，还打算考CPA。投资之前，她仔细比较了一些机构给各个网贷平台的打分，最终挑选了收益率相对安全、分数在前30的投融家。‌‌”我避开了很多雷，从来没想到还会被坑。‌‌“张颖在几天的时间里脸上长了不少痘痘，她没告诉家人这一切，唯一庆幸的是自己还没毕业没有更多钱来投资。</p><blockquote><p>套路玩法7: 我以为我避开了很多雷区，其实下一步就是‘深渊’。</p></blockquote><p>资深从业者冯佳相信自己看公司的眼光，‌‌”我会用安全感来形容那个时候的公司。‌‌“她还记得投融长富2017年9月入驻拱墅区财富小镇时公司意气风发的场景。当时，新的办公室在特色小镇中心位置，五层里有一层据说要开辟为咖啡厅，专门接待各路投资者。办公区显眼的位置，有一面墙全部是投融系公司获得的奖杯和勋章，董事长在台上演讲，踌躇满志，一切看上去欣欣向荣。</p><p>‌‌”看到那一切，我觉得老板是一个非常想干实事的人，一切才刚刚开始。‌‌“她觉得即使未来有风险也应该能撑四五年，所以投了两年期的产品，也向朋友和家人介绍了一些产品。</p><blockquote><p>套路玩法8: 这让我突然想到了，中国的贾老板。 会做PPT的大佬，以及会开发布会的大佬</p></blockquote><p>杭州人王淑珍的境遇类似于冯佳的客户和朋友。她听说业务员自己也购买了投融家产品，‌‌”业务员自己也买了，开车接送我，对我很好。‌‌“68岁的王淑珍认为，业务员总不可能买亏，于是放心地分三次总计投入了70万元。</p><p>来自亲友的推荐、内幕消息、一些互金公司指数排行、上市公司的光环、地方政府背书甚至对自身投资能力的自信，都是投资者选择某家P2P平台的理由。</p><p>一些投资者会拿P2P平台和余额宝作对比，收益率被再三提及。他们不认为自己是在赌博，觉得理性的投资应该被保护。‌‌”余额宝的收益也有过百分之六七，我们比余额宝高不了多少的，没有超过行业水平的。‌‌“投融家平台上标的7%~9%之间的收益率，偶尔做活动，加赠1%的收益，但这种情况极少。</p><blockquote><p>保护： 你所谓的保护，其实我想呵呵，亏吃了，你就要认； 出来混，迟早要还～～ </p></blockquote><p>‌‌”如果收益率超过15%，我肯定不敢投了。‌‌“李霞说。过去几年里，银行储蓄贬值几乎是人尽皆知的事，有人反问了一句，‌‌”除了P2P我们还能投资什么？‌‌“</p><p>毫无征兆的倒塌？</p><p>整个家庭十几年的积蓄被自己投到了一个P2P平台，虽然能归结为信任。但这群投资者有一个无法面对的问题。</p><p>‌‌”你怪自己吗？‌‌“</p><p>坐在旅馆床上的李霞听到这句话，情绪突然失控。她双手掩面，抽泣起来。‌‌”怎么能不怪自己，我本来什么都有，有房有车，现在怎么弄成这样，像个难民。‌‌“她抽噎着，肩膀不能自制地颤动，她的女儿就在隔壁房间，高烧刚刚退去。前一天晚上，她们住的廉价旅馆大床房里挤了八九个人，地毯上铺着几床被子，桌子上放着早晨没吃完的咸菜和包子。窗外阳光热辣，但不远处能看到一团乌云，盛夏的暴雨正在酝酿。</p><p>难友抱团维权，为了节约成本他们多人合住。最高时一个房间住着9个人，分摊每人几十元的房费，只希望能等到最好的消息。</p><p>一切真的毫无征兆吗？逐渐平静之后，李霞开始回想整个事情的经过，想起了被她疏忽的蛛丝马迹。</p><p>年初，丈夫留意到监管收紧，提醒李霞注意风险，但没有引起她的警觉。6月初，投融家在APP中发布了一则诱人的活动：‌‌”跨越百亿，感恩加息1%‌‌“（简称‌‌”跨百亿‌‌“）。愚人节前后，它的交易额刚刚突破90亿。‌‌”跨百亿‌‌“推出之后短短一周之内，平台吸收资金超10亿。因为加息的诱惑，李霞非但没有将到期的20万元提现，反倒追投了20万元。</p><blockquote><p>套路玩法9: 监管加紧，最后收割一波，贪念往往是最好的诱饵，所以感恩加息1%</p></blockquote><p>‌‌”跨百亿‌‌“期间，‌‌”迷局‌‌“已经露出端倪。例如，平台上突然涌现出许多标的，随时都可以投标。此前，这是不可想象的事。通常情况下，平台每天只有两次抢标的时间，类似于准点秒杀，有些标的一经挂出，几分钟内就会被‌‌”秒光‌‌“。</p><p>李霞恍然发现，不知道从什么时候开始，自己已经不再看任何标的合同，不知道借款人是谁，也不知道借款的原因。但是，在小额试水初期，原本从事行政工作的她会悉心研究每次投标的合同细则，评估项目风险。</p><blockquote><p>优秀的习惯，需要长期保持，别让利益或者时间的流逝，慢慢蒙蔽了双眼，最后可能是压死自己的一根稻草；其实常常我们注册一些东西，或者一些关于利益的，我们都没有好好读过～～</p></blockquote><p>出事之后，李霞才仔细查看了标的内容——几乎都是关于净水器的，这令她感到不可思议。净水器几乎成了一个梗，杭州拱墅区小河派出所门口，维权的投资客们彼此打招呼时会问，‌‌”你也买了净水器？‌‌“</p><p>6月底，投融家平台上演了荒诞的一幕，包括教师、会计、工程师、家庭主妇、保姆等成千上万人，一周之内砸10亿资金，疯狂投资净水器。‌‌”标的极有可能是假的，<strong>投融家在自融</strong>，试想想，谁需要买那么多净水器？‌‌“李霞懊丧地说。</p><p>投资者们没有察觉的风险预警并不少。</p><p><font color="red">投融家‌‌”跨百亿‌‌“活动开始那天，小米推荐的车贷平台‌‌”小灰熊金服‌‌“宣告清盘；此前3天，河南的P2P平台金牌理财发布停业公告。闷雷滚滚，没有人觉得他人的不幸与自己有关。</font></p><p>6月11日，在投融长富的总部大楼里，投融家为交易额破百亿举办了一场庆祝会，CEO在内的高管悉数到场，并邀请了两位投资人，他们代表了多数中产家庭，从小额开始，缓慢建立信任，最终重仓投融家。在各色蛋糕、曲奇、水果和鲜榨果汁的甜美香气里，投融长富副总裁付奇打了一手温情牌：‌‌”这是一次家庭的聚会。‌‌“这些信息都通过微信公众号与APP传递给了投资人——我们平台一切都好。</p><p>另一个被投资者频繁提及的障眼法是‌‌”备案‌‌“。在投融家APP中较显眼的位置，至今还放着一则宣传信息，公司正在进行一项覆盖整个行业的P2P网络借贷备案。这种资质背书，让李霞和程生们觉得又给平台上了一重保险，让平台变得更规范了。</p><blockquote><p>不停的加码的同时，不停的给用户打安定剂，稳定用户，准备跑路；玩法很简单，但是…</p></blockquote><p>但实际上，早在6月14日，多家主流媒体报道，整个行业原本定于6月底前完成的P2P网络借贷备案工作已整体后延。中国银行保险监督管理委员会普惠金融部主任李均锋曾在‌‌”第十届陆家嘴论坛‌‌“接受采访时表示，整个行业的备案工作年内可能不能完成。</p><p>投融家爆雷至今，程生等人都不知道公司备案的具体情况，也没有细致去了解过实际情况。到爆雷之时，投资者们始终相信平台融资额增加会有利于备案工作的完成。‌‌”（在当时）我们甚至产生与平台共进退的荣誉感。‌‌“程生情绪有些复杂。</p><p>整个行业的沉疴也成了不理性投资孳生的土壤。P2P和各类理财平台狂飙猛进的那几年，作为身在其中的员工，冯佳甚至感觉到有些触目惊心，‌‌”任何投资都有风险，但我无法向客户提示风险。‌‌“她刚入行的时候，互金公司会对销售人员进行产品风险培训，在客户沟通阶段也会提示风险。‌‌”但实际情况是，理财经理一说风险，客户掉头就走，这就是国人的理财心理。‌‌“</p><p>现实教育了冯佳，大部分的理财者都没有理性的预期，‌‌”他们只接受稳赚不赔，本息一样都不能少。‌‌“长此以往，为了客户留存，几乎所有平台的理财经理都不再提示潜在的风险。</p><p>在一些理财顾问那里，投资者已经习惯把自己的积蓄全盘托付，坐在家里，等待每月的利息如期到账。像冯佳一样的理财顾问们，也习惯了用‌‌”没问题‌‌“‌‌”我自己也投的，比较稳‌‌“来告知风险。风险是个概率事件，只要它未曾发生，它仿佛就不存在。在大部分的理财平台上，风险提示的埋点都特别深，投融家平台的设置也是如此。</p><p>酒店里挂着一件印有‌‌”还钱‌‌“两字的t恤，全国各地的难友制作了200件衣服以此得到有关部门重视，但似乎没有得到效果。</p><p>一些维权的投资者遇到对风险的疑问时，语气会变得急促。‌‌”我是和平台发生交易，就算看了也没有用，责任在平台。‌‌“说这话时，一位投资者语速加快，声音提高。与之相矛盾的是，和大部分的投资者一样，她知道P2P理论上只是信息中介。</p><p>‌‌”疏忽‌‌“的的确不止李霞一人。王淑珍在杭州一栋老式居民楼里摊开总计70万元的3份合同时，眼睛几乎要眯成一条缝才能艰难找到转账记录。‌‌”我看不清合同上的字‌‌“，王淑珍认为，她签订的合同等同于高一点利息的银行定存。细如蝼蚁的字号对她已经是不小的障碍，名目繁杂的条例她则根本没有打开看过。</p><p>看似毫无征兆的倒塌，可能更是一场缓慢的‌‌”合谋‌‌“。在通胀、孩子教育投入、养老医疗等压力的裹挟下，许多人前赴后继地将自己的半生积蓄投进了P2P。他们如温水煮青蛙般，逐渐放松警惕并日益‌‌”疏忽‌‌“，怀抱微妙的自欺与侥幸心态，如同在浓雾的夜晚开车，被扑朔迷离的光亮迷惑，最终走向了盛夏的雷暴。</p><blockquote><p>“合谋”： 通货膨胀，  教育投入， 养老的医疗， 房产的上涨～～。温水煮青蛙，自欺以及侥幸心态</p></blockquote><p>被打乱的生活，被打醒的中产幻觉</p><p>李霞和程生都还在杭州的廉价旅馆里捱日子。他们住的房间已经从9楼搬到7楼。7层的墙壁被涂成了玫粉色，部分墙灰已经剥落，午后阳光斜射进来的时候，甬道就像血色洞窟。</p><p>程生的心情已经逐渐平复下来。他的100万元投入里，有50万元要在9月用来偿还此前的贷款，他的女友时常因为自责而情绪崩溃。为了缓解她的压力，程生经常汇总各类信息，这也让他成了从各地赶来杭州的‌‌”难友‌‌“们某种程度上的精神支撑。</p><p>但对未来能做什么，他也没有明确的计划，‌‌”只能走一步看一步‌‌“。两天前，程生与女朋友商定，如果一切途径都走不通，就一起徒步去色达。‌‌”求人不行，求己不行，那就只能求佛了。‌‌“他还算年轻，喜欢徒步，生活的一记惊雷他仿佛还熬得住。</p><p>对家里有老有小的李霞而言，这一切撕开了脆弱的中产幻觉。正值暑假，李霞的一天本应该是规律又有点单调的。早晨给老公做早餐，上午辅导女儿做作业，下午再带着孩子画画，晚上十点多就能睡觉。她几乎把基础生活支出之外的储蓄，全部投入投融家，稳定的回款曾给她带来安全感。</p><blockquote><p>财富在自己手中才是安全感，我命由我，不由天～</p></blockquote><p>‌‌”爆雷‌‌“后，李霞带着女儿来到了杭州，本来正在旅游的他们发生了意外，生活轨迹发生了变化。</p><p>现在一切都乱了。那40万元里除了父母的养老金，还有要给孩子报英语班、画画班的钱。‌‌”全家只有我丈夫一人上班，本来想给孩子报个钢琴班，现在也只能压缩这些计划了。‌‌“她每天只顾得上在各个群里探听各种消息，没有心力给孩子辅导作业，小女孩经常一个人被留在宾馆看动画片。</p><p>她还担心热度消退，像此前所有新闻热点一样，最终不了了之。她不希望同伴决心动摇，甚至不愿意一起行动的伙伴将不利于维权的信息告诉身在外地的人。‌‌”这么突然的财产蒸发，也没有人管这样的平台，影响的都是中间阶层，会出事的。‌‌“李霞有点咬牙切齿。</p><p>冯佳也有了改变。‌‌”我之前觉得自己很独立‌‌“，她自诩独立女性，按照自己的意志生活，收入可观，喜欢旅行。她钟情于小城清迈，那是邓丽君去世的地方。‌‌”现在觉得这就是一场中产的幻觉。‌‌“</p><p>她希望自己能好好哭一场。为了缩减开支，她可能没法再住在现在的房子，投融系之后干了近一年的工作也丢了。上司知道她此前的公司爆雷，没说别的，只问她，‌‌”你还能在这行做吗？你打算怎么做？‌‌“</p><p>她的确对自己产生了怀疑。‌‌”不只是从业背景有污点的问题，而是客户的钱砸在里面了，这意味着我七年攒的资源都没有了。‌‌“</p><p>从7月9日知道消息，到真正报警，冯佳拖了十天。她花了三天才给所有投资了的朋友客户打完电话，每次打电话前要做很久的心理准备，经常讲到一半，整个人情绪崩溃。</p><p>她不愿意立即报警，也尽量压着客户朋友别太早报警。‌‌”逾期和提现困难有时候是正常的，如果投资人施压过多，老板跑路，才是致命的问题。‌‌“那几天，她把自己关在家里，不放过任何一点信息，‌‌”每天都在想，老板是去找钱了，也许平台还能运转，也许还有转机。脑子里时刻都在上演一部连续剧。‌‌“她甚至产生过一种自私的期望，平台只要撑过10月份，她就可以拿回自己和客户朋友们的钱。7月20日，她得知投融长富的老板李振军早在7月初就已出境，这才彻底死心。</p><p>在咖啡馆里，冯佳斩钉截铁地说：‌‌”我不再那么相信自己的专业、能力，甚至根本不知道还可以相信什么。‌‌“她开始怀疑自己能否独自应对生活的风险，‌‌”也许我该去找个人结婚生子了。‌‌“</p><p>这场风暴对中产以下家庭的打击，也许更为致命。王淑珍生活节俭，闷热的夏夜依然舍不得开空调，见我们时，桌上的饭菜散发出了异味。她的家庭本已危机四伏。大儿子还在殡仪馆，八月份墓地才能安置妥当。年过三十的小儿子至今未婚，多年的积蓄被她砸进理财产品。她原本指望到期之后取现，将一家人住的老房子装修一下，但现在一切都是泡影。</p><p>王淑珍把一生的积蓄70万，全投资到投融系的产品里，如今已经血本无归。如果不是该公司的员工一直的推荐和心软地签了合同，这波爆雷潮可能就与她无关。</p><p>维权群里，不时有‌‌”更惨‌‌“的消息传来：有人因此离了婚，有人中风了，有人举债加杠杆投资，据说还有人挪用了公款……</p><p>截至7月30日，有媒体统计传出爆雷的P2P平台超过250家，以投融家为例注册用户规模在145万人，目前影响人数数万人，这场盛夏的雷暴影响的人数难以预估。</p><p>7月底的黄昏时分，财富小镇华灯初上，远洋大厦楼前几百米的位置，音乐喷泉已经升起，新中产家庭的夜生活刚刚开始。商场橱窗里摆出新一季的服装，咖啡很香，蛋糕很甜，音乐时髦又愉快。挂着‌‌”投融长富‌‌“四个字的招牌，已不再亮灯，相较于周边的大厦有点黯淡失色。</p><p>冯佳坐在喷泉前的石凳上茫然看着欢闹的人群，‌‌”我已经不是三周前的那个我了。‌”对身陷其中的人而言，这场遭遇是一场大考。而广场中心，嬉闹的孩子正不顾一切冲进喷泉中。往来的人们正享受着繁荣的都市生活，他们对几百米外正发生的雷暴一无所知。</p><blockquote><p>国人思想：事不关己，高高挂起～～ 其实都是有点可悲的，包括我们自己</p></blockquote><p>（文中人物皆为化名）<a href="https://botanwang.com/articles/201808/%E7%88%86%E9%9B%B7%E4%B9%8B%E5%90%8E%7C%E4%B8%AD%E4%BA%A7%E6%83%8A%E6%83%B6.html" target="_blank" rel="noopener">https://botanwang.com/articles/201808/%E7%88%86%E9%9B%B7%E4%B9%8B%E5%90%8E%7C%E4%B8%AD%E4%BA%A7%E6%83%8A%E6%83%B6.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;爆雷之后-中产惊惶&quot;&gt;&lt;a href=&quot;#爆雷之后-中产惊惶&quot; class=&quot;headerlink&quot; title=&quot;爆雷之后 中产惊惶&quot;&gt;&lt;/a&gt;爆雷之后 中产惊惶&lt;/h2&gt;&lt;p&gt;昏暗的灯光下，程⽣在电脑前跟各地难友沟通。他在杭州拱墅区的一所廉价宾馆已经住了20多
      
    
    </summary>
    
    
    
      <category term="reprint" scheme="http://lmwtuedu.cn/tags/reprint/"/>
    
      <category term="life" scheme="http://lmwtuedu.cn/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>SQL如何支持TLS1.2</title>
    <link href="http://lmwtuedu.cn/2018/07/20/2018-07-20-SQL%E5%A6%82%E4%BD%95%E6%94%AF%E6%8C%81TLV1.2/"/>
    <id>http://lmwtuedu.cn/2018/07/20/2018-07-20-SQL如何支持TLV1.2/</id>
    <published>2018-07-19T16:00:00.000Z</published>
    <updated>2019-08-15T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL如何支持TLS1-2"><a href="#SQL如何支持TLS1-2" class="headerlink" title="SQL如何支持TLS1.2"></a>SQL如何支持TLS1.2</h1><p>近期工作需要送检项目被扫描处以下漏洞：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tKfTcgy1ftf6esgntej30sl0l141u.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>注意： solution给出的方案是update；当时我看到这个句话时，我内心时崩溃的以及一脸的问好❓❓</p><p>更新，更新What？</p><p>丢给公司的技术支持先查询了（因为我是第一次遇见此问题，手头还有其他项目要忙）； 其他项目忙完已经是两个星期之后，刚忙完手头其他项目（公司对此项目比较重视）； 领导领导的上级来了，来了一顿逼叨逼叨的，说了一大堆； 唉，呀， 我是那种不干活的人吗？ 来了一句“你处理问题能力有问题？” “WTF？？？” 怀疑我的能力，默默的收拾一下，来吧，搞定此bug漏洞所在！有点扯远了，来吧，言归正传！</p><p>环境：</p><ul><li>Windows7（64位系统 4G内存）</li><li>SQL2005 </li><li>我司送检软件</li></ul><p>查询了一下：</p><ol><li>此漏洞是啥？<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftf76b6r68j30oh0b840r.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ol><p>此漏洞对OpenSSL协议有问题？ SSL3？ 那我软件协议是啥版本？ 能支持啥版本呢？ 排查对象<br>还有 针对 CBC模式的呢？？？ 我得搞清楚用了哪些东西（协议以及算法）</p><p>链接🔗<a href="https://segmentfault.com/a/1190000012731888" target="_blank" rel="noopener">常见的几种SSL/TLS漏洞及攻击方式</a></p><p>Google以及百度，查询到有这样的一个软件：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftf7iba2c9j30n00by0xl.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>对对对，专门针对IIS的一款非常棒棒哒的神器；可以很直观的设置协议<br>看见木有： protocols： 协议； ciphers : 密码（算法）； hash：哈希； KeyExchange：密钥交换；</p><p>我们需要设置如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/006tNc79gy1ftg4vmjo1qj30om0j9wfu.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tNc79gy1ftg4vmsrl4j30om0j9wgf.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>CipherSuites的选择是根据什么来决定的呢？ 是根据系统的加密套件决定的；加密套件哪里寻找呢？</p><p>windows 系统下有一个命令： gpedit.msc</p><p>SSL的组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">确定安全套接字层(SSL)使用的密码套件。</span><br><span class="line"></span><br><span class="line">如果启用此设置，则 SSL 密码套件将按指定的顺序进行排列。</span><br><span class="line"></span><br><span class="line">如果禁用或不配置此设置，则将使用出厂默认密码套件顺序。</span><br><span class="line"></span><br><span class="line">SSL2、SSL3、TLS 1.0 和 TLS 1.1 密码套件:</span><br><span class="line"></span><br><span class="line">TLS_RSA_WITH_AES_128_CBC_SHA</span><br><span class="line">TLS_RSA_WITH_AES_256_CBC_SHA</span><br><span class="line">TLS_RSA_WITH_RC4_128_SHA</span><br><span class="line">TLS_RSA_WITH_3DES_EDE_CBC_SHA</span><br><span class="line">TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA_P256</span><br><span class="line">TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA_P384</span><br><span class="line">TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA_P521</span><br><span class="line">TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA_P256</span><br><span class="line">TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA_P384</span><br><span class="line">TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA_P521</span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA_P256</span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA_P384</span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA_P521</span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA_P256</span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA_P384</span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA_P521</span><br><span class="line">TLS_DHE_DSS_WITH_AES_128_CBC_SHA</span><br><span class="line">TLS_DHE_DSS_WITH_AES_256_CBC_SHA</span><br><span class="line">TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA</span><br><span class="line">TLS_RSA_WITH_RC4_128_MD5</span><br><span class="line">SSL_CK_RC4_128_WITH_MD5</span><br><span class="line">SSL_CK_DES_192_EDE3_CBC_WITH_MD5</span><br><span class="line">TLS_RSA_WITH_NULL_SHA</span><br><span class="line">TLS_RSA_WITH_NULL_MD5</span><br><span class="line"></span><br><span class="line">TLS 1.2 SHA256 和 SHA384 密码套件:</span><br><span class="line"></span><br><span class="line">TLS_RSA_WITH_AES_128_CBC_SHA256</span><br><span class="line">TLS_RSA_WITH_AES_256_CBC_SHA256</span><br><span class="line">TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256</span><br><span class="line">TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P384</span><br><span class="line">TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P521</span><br><span class="line">TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256</span><br><span class="line">TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P384</span><br><span class="line">TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P521</span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256_P256</span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256_P384</span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256_P521</span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384_P384</span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384_P521</span><br><span class="line">TLS_DHE_DSS_WITH_AES_128_CBC_SHA256</span><br><span class="line">TLS_DHE_DSS_WITH_AES_256_CBC_SHA256</span><br><span class="line">TLS_RSA_WITH_NULL_SHA256</span><br><span class="line"></span><br><span class="line">TLS 1.2 ECC GCM 密码套件:</span><br><span class="line"></span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256_P256</span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256_P384</span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256_P521</span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384_P384</span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384_P521</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如何修改此设置:</span><br><span class="line"></span><br><span class="line">1. 打开一个空白写字板文档。</span><br><span class="line"></span><br><span class="line">2. 复制可用套件的列表并将其粘贴到该文档中。</span><br><span class="line"></span><br><span class="line">3. 按正确顺序排列套件；删除不想使用的所有套件。</span><br><span class="line"></span><br><span class="line">4. 在每个套件名称的末尾键入一个逗号(最后一个套件名称除外)。确保没有嵌入空格。</span><br><span class="line"></span><br><span class="line">5. 删除所有换行符，以便密码套件名称位于单独的一个长行上。</span><br><span class="line"></span><br><span class="line">6. 将密码套件行复制到剪贴板，然后将其粘贴到编辑框中。最大长度为 1023 个字符。</span><br></pre></td></tr></table></figure><p>为了防止被一些扫描软件扫描出一些什么 TLV POOOLED的这种漏洞；所以我建议你配置TLS1.2 ECC GCM 密码套件； 与之使用的软件也要支持才行，否者OpenSSL进行会话密钥协商的时候，会出错！</p><p>SQL2016的数据连接的时候，采用OpenSSL的连接，其实说白了就是走的是HTTPS；如果你不信，可以点击打开浏览器查看百度的协议是啥：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/006tNc79gy1ftgah4km3fj30ho0bqq4u.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>所以我们配置TLS1.2的时候只配置 GCM的密码套件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TLS 1.2 ECC GCM 密码套件:</span><br><span class="line"></span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256_P256</span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256_P384</span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256_P521</span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384_P384</span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384_P521</span><br></pre></td></tr></table></figure><p>这样在漏洞扫描的时候，是绝对不会出现 TLS POOLED的漏洞的！</p><p>那其他的漏洞原理是如何设置还有修复的呢？？</p><p>网上查阅过一记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line"># Copyright 2016, Alexander Hass</span><br><span class="line"># http://www.hass.de/content/setup-your-iis-ssl-perfect-forward-secrecy-and-tls-12</span><br><span class="line">#</span><br><span class="line"># Version 1.7</span><br><span class="line"># - Windows Version compare failed. Get-CimInstance requires Windows 2012 or later.</span><br><span class="line"># Version 1.6</span><br><span class="line"># - OS version detection for cipher suites order.</span><br><span class="line"># Version 1.5</span><br><span class="line"># - Enabled ECDH and more secure hash functions and reorderd cipher list.</span><br><span class="line"># - Added Client setting for all ciphers.</span><br><span class="line"># Version 1.4</span><br><span class="line"># - RC4 has been disabled.</span><br><span class="line"># Version 1.3</span><br><span class="line"># - MD5 has been disabled.</span><br><span class="line"># Version 1.2</span><br><span class="line"># - Re-factored code style and output</span><br><span class="line"># Version 1.1</span><br><span class="line"># - SSLv3 has been disabled. (Poodle attack protection)</span><br><span class="line">  </span><br><span class="line">Write-Host &apos;Configuring IIS with SSL/TLS Deployment Best Practices...&apos;</span><br><span class="line">Write-Host &apos;--------------------------------------------------------------------------------&apos;</span><br><span class="line">  </span><br><span class="line"># Disable Multi-Protocol Unified Hello</span><br><span class="line">New-Item &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\Multi-Protocol Unified Hello\Server&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\Multi-Protocol Unified Hello\Server&apos; -name Enabled -value 0 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\Multi-Protocol Unified Hello\Server&apos; -name &apos;DisabledByDefault&apos; -value 1 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-Item &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\Multi-Protocol Unified Hello\Client&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\Multi-Protocol Unified Hello\Client&apos; -name Enabled -value 0 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\Multi-Protocol Unified Hello\Client&apos; -name &apos;DisabledByDefault&apos; -value 1 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">Write-Host &apos;Multi-Protocol Unified Hello has been disabled.&apos;</span><br><span class="line">  </span><br><span class="line"># Disable PCT 1.0</span><br><span class="line">New-Item &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\PCT 1.0\Server&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\PCT 1.0\Server&apos; -name Enabled -value 0 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\PCT 1.0\Server&apos; -name &apos;DisabledByDefault&apos; -value 1 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-Item &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\PCT 1.0\Client&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\PCT 1.0\Client&apos; -name Enabled -value 0 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\PCT 1.0\Client&apos; -name &apos;DisabledByDefault&apos; -value 1 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">Write-Host &apos;PCT 1.0 has been disabled.&apos;</span><br><span class="line">  </span><br><span class="line"># Disable SSL 2.0 (PCI Compliance)</span><br><span class="line">New-Item &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Server&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Server&apos; -name Enabled -value 0 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Server&apos; -name &apos;DisabledByDefault&apos; -value 1 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-Item &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Client&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Client&apos; -name Enabled -value 0 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Client&apos; -name &apos;DisabledByDefault&apos; -value 1 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">Write-Host &apos;SSL 2.0 has been disabled.&apos;</span><br><span class="line">  </span><br><span class="line"># NOTE: If you disable SSL 3.0 the you may lock out some people still using</span><br><span class="line"># Windows XP with IE6/7. Without SSL 3.0 enabled, there is no protocol available</span><br><span class="line"># for these people to fall back. Safer shopping certifications may require that</span><br><span class="line"># you disable SSLv3.</span><br><span class="line">#</span><br><span class="line"># Disable SSL 3.0 (PCI Compliance) and enable &quot;Poodle&quot; protection</span><br><span class="line">New-Item &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Server&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Server&apos; -name Enabled -value 0 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Server&apos; -name &apos;DisabledByDefault&apos; -value 1 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-Item &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Client&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Client&apos; -name Enabled -value 0 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Client&apos; -name &apos;DisabledByDefault&apos; -value 1 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">Write-Host &apos;SSL 3.0 has been disabled.&apos;</span><br><span class="line">  </span><br><span class="line"># Add and Enable TLS 1.0 for client and server SCHANNEL communications</span><br><span class="line">New-Item &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server&apos; -name &apos;Enabled&apos; -value &apos;0xffffffff&apos; -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server&apos; -name &apos;DisabledByDefault&apos; -value 0 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-Item &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Client&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Client&apos; -name &apos;Enabled&apos; -value &apos;0xffffffff&apos; -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Client&apos; -name &apos;DisabledByDefault&apos; -value 0 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">Write-Host &apos;TLS 1.0 has been enabled.&apos;</span><br><span class="line">  </span><br><span class="line"># Add and Enable TLS 1.1 for client and server SCHANNEL communications</span><br><span class="line">New-Item &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server&apos; -name &apos;Enabled&apos; -value &apos;0xffffffff&apos; -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server&apos; -name &apos;DisabledByDefault&apos; -value 0 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-Item &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Client&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Client&apos; -name &apos;Enabled&apos; -value &apos;0xffffffff&apos; -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Client&apos; -name &apos;DisabledByDefault&apos; -value 0 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">Write-Host &apos;TLS 1.1 has been enabled.&apos;</span><br><span class="line">  </span><br><span class="line"># Add and Enable TLS 1.2 for client and server SCHANNEL communications</span><br><span class="line">New-Item &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server&apos; -name &apos;Enabled&apos; -value &apos;0xffffffff&apos; -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server&apos; -name &apos;DisabledByDefault&apos; -value 0 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-Item &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client&apos; -name &apos;Enabled&apos; -value &apos;0xffffffff&apos; -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client&apos; -name &apos;DisabledByDefault&apos; -value 0 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">Write-Host &apos;TLS 1.2 has been enabled.&apos;</span><br><span class="line">  </span><br><span class="line"># Re-create the ciphers key.</span><br><span class="line">New-Item &apos;HKLM:SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers&apos; -Force | Out-Null</span><br><span class="line">  </span><br><span class="line"># Disable insecure/weak ciphers.</span><br><span class="line">$insecureCiphers = @(</span><br><span class="line">  &apos;DES 56/56&apos;,</span><br><span class="line">  &apos;NULL&apos;,</span><br><span class="line">  &apos;RC2 128/128&apos;,</span><br><span class="line">  &apos;RC2 40/128&apos;,</span><br><span class="line">  &apos;RC2 56/128&apos;,</span><br><span class="line">  &apos;RC4 40/128&apos;,</span><br><span class="line">  &apos;RC4 56/128&apos;,</span><br><span class="line">  &apos;RC4 64/128&apos;,</span><br><span class="line">  &apos;RC4 128/128&apos;</span><br><span class="line">)</span><br><span class="line">Foreach ($insecureCipher in $insecureCiphers) &#123;</span><br><span class="line">  $key = (Get-Item HKLM:\).OpenSubKey(&apos;SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers&apos;, $true).CreateSubKey($insecureCipher)</span><br><span class="line">  $key.SetValue(&apos;Enabled&apos;, 0, &apos;DWord&apos;)</span><br><span class="line">  $key.close()</span><br><span class="line">  Write-Host &quot;Weak cipher $insecureCipher has been disabled.&quot;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"># Enable new secure ciphers.</span><br><span class="line"># - RC4: It is recommended to disable RC4, but you may lock out WinXP/IE8 if you enforce this. This is a requirement for FIPS 140-2.</span><br><span class="line"># - 3DES: It is recommended to disable these in near future. This is the last cipher supported by Windows XP.</span><br><span class="line"># - Windows Vista and before &apos;Triple DES 168&apos; was named &apos;Triple DES 168/168&apos; per https://support.microsoft.com/en-us/kb/245030</span><br><span class="line">$secureCiphers = @(</span><br><span class="line">  &apos;AES 128/128&apos;,</span><br><span class="line">  &apos;AES 256/256&apos;,</span><br><span class="line">  &apos;Triple DES 168&apos;</span><br><span class="line">)</span><br><span class="line">Foreach ($secureCipher in $secureCiphers) &#123;</span><br><span class="line">  $key = (Get-Item HKLM:\).OpenSubKey(&apos;SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers&apos;, $true).CreateSubKey($secureCipher)</span><br><span class="line">  New-ItemProperty -path &quot;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\$secureCipher&quot; -name &apos;Enabled&apos; -value &apos;0xffffffff&apos; -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">  $key.close()</span><br><span class="line">  Write-Host &quot;Strong cipher $secureCipher has been enabled.&quot;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"># Set hashes configuration.</span><br><span class="line">New-Item &apos;HKLM:SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Hashes&apos; -Force | Out-Null</span><br><span class="line">New-Item &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Hashes\MD5&apos; -Force | Out-Null</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Hashes\MD5&apos; -name Enabled -value 0 -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">  </span><br><span class="line">$secureHashes = @(</span><br><span class="line">  &apos;SHA&apos;,</span><br><span class="line">  &apos;SHA256&apos;,</span><br><span class="line">  &apos;SHA384&apos;,</span><br><span class="line">  &apos;SHA512&apos;</span><br><span class="line">)</span><br><span class="line">Foreach ($secureHash in $secureHashes) &#123;</span><br><span class="line">  $key = (Get-Item HKLM:\).OpenSubKey(&apos;SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Hashes&apos;, $true).CreateSubKey($secureHash)</span><br><span class="line">  New-ItemProperty -path &quot;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Hashes\$secureHash&quot; -name &apos;Enabled&apos; -value &apos;0xffffffff&apos; -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">  $key.close()</span><br><span class="line">  Write-Host &quot;Hash $secureHash has been enabled.&quot;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"># Set KeyExchangeAlgorithms configuration.</span><br><span class="line">New-Item &apos;HKLM:SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\KeyExchangeAlgorithms&apos; -Force | Out-Null</span><br><span class="line">$secureKeyExchangeAlgorithms = @(</span><br><span class="line">  &apos;Diffie-Hellman&apos;,</span><br><span class="line">  &apos;ECDH&apos;,</span><br><span class="line">  &apos;PKCS&apos;</span><br><span class="line">)</span><br><span class="line">Foreach ($secureKeyExchangeAlgorithm in $secureKeyExchangeAlgorithms) &#123;</span><br><span class="line">  $key = (Get-Item HKLM:\).OpenSubKey(&apos;SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\KeyExchangeAlgorithms&apos;, $true).CreateSubKey($secureKeyExchangeAlgorithm)</span><br><span class="line">  New-ItemProperty -path &quot;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\KeyExchangeAlgorithms\$secureKeyExchangeAlgorithm&quot; -name &apos;Enabled&apos; -value &apos;0xffffffff&apos; -PropertyType &apos;DWord&apos; -Force | Out-Null</span><br><span class="line">  $key.close()</span><br><span class="line">  Write-Host &quot;KeyExchangeAlgorithm $secureKeyExchangeAlgorithm has been enabled.&quot;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"># Set cipher suites order as secure as possible (Enables Perfect Forward Secrecy).</span><br><span class="line">$os = Get-WmiObject -class Win32_OperatingSystem</span><br><span class="line">if ([System.Version]$os.Version -lt [System.Version]&apos;10.0&apos;) &#123;</span><br><span class="line">  Write-Host &apos;Use cipher suites order for Windows 2008R2/2012/2012R2.&apos;</span><br><span class="line">  $cipherSuitesOrder = @(</span><br><span class="line">    &apos;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P521&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P384&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P521&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P384&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA_P521&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA_P384&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA_P256&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA_P521&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA_P384&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA_P256&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384_P521&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384_P384&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256_P521&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256_P384&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256_P256&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384_P521&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384_P384&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256_P521&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256_P384&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256_P256&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA_P521&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA_P384&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA_P256&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA_P521&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA_P384&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA_P256&apos;,</span><br><span class="line">    &apos;TLS_RSA_WITH_AES_256_GCM_SHA384&apos;,</span><br><span class="line">    &apos;TLS_RSA_WITH_AES_128_GCM_SHA256&apos;,</span><br><span class="line">    &apos;TLS_RSA_WITH_AES_256_CBC_SHA256&apos;,</span><br><span class="line">    &apos;TLS_RSA_WITH_AES_128_CBC_SHA256&apos;,</span><br><span class="line">    &apos;TLS_RSA_WITH_AES_256_CBC_SHA&apos;,</span><br><span class="line">    &apos;TLS_RSA_WITH_AES_128_CBC_SHA&apos;,</span><br><span class="line">    &apos;TLS_RSA_WITH_3DES_EDE_CBC_SHA&apos;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">  Write-Host &apos;Use cipher suites order for Windows 10/2016 and later.&apos;</span><br><span class="line">  $cipherSuitesOrder = @(</span><br><span class="line">    &apos;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA&apos;,</span><br><span class="line">    &apos;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA&apos;,</span><br><span class="line">    &apos;TLS_RSA_WITH_AES_256_GCM_SHA384&apos;,</span><br><span class="line">    &apos;TLS_RSA_WITH_AES_128_GCM_SHA256&apos;,</span><br><span class="line">    &apos;TLS_RSA_WITH_AES_256_CBC_SHA256&apos;,</span><br><span class="line">    &apos;TLS_RSA_WITH_AES_128_CBC_SHA256&apos;,</span><br><span class="line">    &apos;TLS_RSA_WITH_AES_256_CBC_SHA&apos;,</span><br><span class="line">    &apos;TLS_RSA_WITH_AES_128_CBC_SHA&apos;,</span><br><span class="line">    &apos;TLS_RSA_WITH_3DES_EDE_CBC_SHA&apos;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">$cipherSuitesAsString = [string]::join(&apos;,&apos;, $cipherSuitesOrder)</span><br><span class="line"># One user reported this key does not exists on Windows 2012R2. Cannot repro myself on a brand new Windows 2012R2 core machine. Adding this just to be save.</span><br><span class="line">New-Item &apos;HKLM:\SOFTWARE\Policies\Microsoft\Cryptography\Configuration\SSL\00010002&apos; -ErrorAction SilentlyContinue</span><br><span class="line">New-ItemProperty -path &apos;HKLM:\SOFTWARE\Policies\Microsoft\Cryptography\Configuration\SSL\00010002&apos; -name &apos;Functions&apos; -value $cipherSuitesAsString -PropertyType &apos;String&apos; -Force | Out-Null</span><br><span class="line">  </span><br><span class="line">Write-Host &apos;--------------------------------------------------------------------------------&apos;</span><br><span class="line">Write-Host &apos;NOTE: After the system has been rebooted you can verify your server&apos;</span><br><span class="line">Write-Host &apos;      configuration at https://www.ssllabs.com/ssltest/&apos;</span><br><span class="line">Write-Host &quot;--------------------------------------------------------------------------------`n&quot;</span><br><span class="line">  </span><br><span class="line">Write-Host -ForegroundColor Red &apos;A computer restart is required to apply settings. Restart computer now?&apos;</span><br><span class="line">Restart-Computer -Force -Confirm</span><br></pre></td></tr></table></figure><p>注意提示： 有些cipherSuitesOrder已经是弱的，或者已经是漏洞的算法；<br>注意上面提到的一些内容，只是作为参考其深入原理。</p><p>我在操作的过程中查阅到了一些问题：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tNc79gy1ftgb1s4xejj30gm07b3zx.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>因为我发现我设置通信协议为 TLS1.2 之后 SQL的客户端连接访问木有问题； 但是我的程序跑不起来了；坑爹了，到底哪里有问题了；就查阅到可能不支持TLS1.2；就是上述的截图；地址🔗<a href="http://kenhamady.com/cru/archives/2867" target="_blank" rel="noopener">http://kenhamady.com/cru/archives/2867</a></p><p>原来它娘的不支持TLS1.2 走的是TLS1.0； 哎呀，有点坑爹呀，木办法，继续得查询资料Google到这样子的一份资料：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/006tNc79gy1ftgbdxg8znj30pf02cwfc.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>需要安装新的驱动程序，然后才能通过新的语法去连接SQL高版本支持的TLS1.2；</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tNc79gy1ftgbf9a2hsj30px0b4acy.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>驱动连接的下载地址：<a href="https://docs.microsoft.com/en-us/sql/connect/oledb/oledb-driver-for-sql-server?view=sql-server-2017#3-microsoft-ole-db-driver-for-sql-server-msoledbsql" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/sql/connect/oledb/oledb-driver-for-sql-server?view=sql-server-2017#3-microsoft-ole-db-driver-for-sql-server-msoledbsql</a></p><p>有点特别强调： SQL2005版本是无法支持TLS1.2的；所以它是有TLS1.0的漏洞 TLS POOLED的；</p><p>希望我写的东西，能帮到一些童鞋理解一些里面的东西～～～～</p><p>说白了很简单： 下载SQL20016的数据库，好好安装；完成之后下载客户端2017或者其他支持TLS1.2的都行，最好是最新版本，为什么捏？因为新的东西支持的算法以及协议会比较完善；不会太多漏洞；但是也是有风险的，例如一些语法可能不支持了，需要修改你程序的一些代码才能兼容和运行起来； 然后下载新的连接驱动；那么，就基本OK了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SQL如何支持TLS1-2&quot;&gt;&lt;a href=&quot;#SQL如何支持TLS1-2&quot; class=&quot;headerlink&quot; title=&quot;SQL如何支持TLS1.2&quot;&gt;&lt;/a&gt;SQL如何支持TLS1.2&lt;/h1&gt;&lt;p&gt;近期工作需要送检项目被扫描处以下漏洞：&lt;/p&gt;
&lt;f
      
    
    </summary>
    
    
    
      <category term="reprint" scheme="http://lmwtuedu.cn/tags/reprint/"/>
    
      <category term="code" scheme="http://lmwtuedu.cn/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>SQL2005 配置SSL证书流程</title>
    <link href="http://lmwtuedu.cn/2018/06/14/2018-06-14-SQL2005%20%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6%E6%B5%81%E7%A8%8B/"/>
    <id>http://lmwtuedu.cn/2018/06/14/2018-06-14-SQL2005 配置SSL证书流程/</id>
    <published>2018-06-13T16:00:00.000Z</published>
    <updated>2019-08-15T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL2005-配置SSL证书流程"><a href="#SQL2005-配置SSL证书流程" class="headerlink" title="SQL2005 配置SSL证书流程"></a>SQL2005 配置SSL证书流程</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>本人负责公司项目，送检公安部的时候，SQL2005的数据库被检测出如下问题，需要修复证书制作问题，查阅问题，特整理出来供大家参考。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fsapuuv5vpj30sd0ikn0d.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fsaqbln8q9j30sm0hrwh3.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>说明： 安装的SQL2005的数据库，自带动生成的证书是RSA1024和SHA-1的算法；SHA-1的算法已经被视为弱哈希算法（2017一月份）。所以我们得自己制作一张RSA1024以上的SHA256以上的证书，而且要是服务器的证书；</p><h2 id="制作流程"><a href="#制作流程" class="headerlink" title="制作流程"></a>制作流程</h2><p>检测环境： windows7 64位系统；</p><p>制作环境： windows7 64位系统；</p><h3 id="启动系统的ISS"><a href="#启动系统的ISS" class="headerlink" title="启动系统的ISS"></a>启动系统的ISS</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fsaqntm1pzj30bv0brgn2.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>说明： 安装SQL2005数据库的时候，如果报的任何错误和警告⚠️都需要认真查看和解决！ SQL2005数据库安装提前启动ISS服务，我本人操作时，先开启windos功能； web管理器的里面全部开启，万维网的也全部开启； （先不管有木有用，反正你也不清楚安装过程那些需要哪些不需要，先全部开放，后续如果不需要再关闭）； 有人可能会问，为什么不先安装后续解决开启； 呃，因为安装过程中软件会建立一些联系关系呀，例如路径之类的，注册表之类的，没有开启，它如何寻找到哪里呢？ 所以本人不建议你先安装而不去开启这些服务（这都是本人踩过很多坑总结的）；还有一点就是SQL的卸载很麻烦；所以争取一次搞定，不出现任何问题。前人已经帮你栽树，你只需乘凉就好啦！</p><h3 id="SQL安装"><a href="#SQL安装" class="headerlink" title="SQL安装"></a>SQL安装</h3><ol><li>具体安装流程我就不细说了，注意我截图的内容，强调二个位置（公司技术支持竟然不知道区别，得拉出去打屁屁）；</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fsaqvxmvjij3072071glu.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>SQL Server Management Studio 是客户端的登陆界面；</p><p>SQL Server Configuration Management才是SQL的服务设置界面</p><h3 id="制作证书"><a href="#制作证书" class="headerlink" title="制作证书"></a>制作证书</h3><ul><li><p>前提安装VS2010的环境，因为只有VS2010的才支持SHA256之后的哈希算法；VS2008只支持MD5和SHA1（我司编译器，哎呀，讨厌死微软一套了）</p></li><li><p>如果你们的公司有证书服务器的话，可以略过此步骤啦，没有得继续查看哟</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fsar5b5oc7j30io0cyt9o.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fsarb6077bj30oo07bglx.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fsarb6077bj30oo07bglx.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li>证书安装到ISS服务</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fsarc43h0zj313s0iytby.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li>自己制作的证书只适合测试用，不受CA信赖，所以需要注册到根证书池；双击安装到证书池</li></ul><h3 id="SQL2005注册表查看替换SQL默认证书"><a href="#SQL2005注册表查看替换SQL默认证书" class="headerlink" title="SQL2005注册表查看替换SQL默认证书"></a>SQL2005注册表查看替换SQL默认证书</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fsarfk4qtaj31ba0qan0w.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li><p>Certificate 的存储的事证书的指纹哈希值；即IIS服务器证书的指纹哈希值</p></li><li><p>安装之后重新启动SQL的服务器程序；通过配置查看证书是否成功</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fsare1d8x1j314r0gndij.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li><p>如果报错，或者启动不了，说明CN的制作的名称与SQL的ServerName的名称不一样，最好的方式事查看 SQL的日志 ERRORLOG的文件，里面有一行数据会显示server name的名称；我们需要记录，用于制作证书作为 CN的名称；</p></li><li><p>也可查看注册表</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fsarf448n5j319u0q30x4.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="重新链接SQL2005"><a href="#重新链接SQL2005" class="headerlink" title="重新链接SQL2005"></a>重新链接SQL2005</h3><ul><li>注意服务器启动项</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fsarkpaq8qj312n0db0vp.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li>如果你是普通用户，请以管理员的身份运行程序（我司技术支持不知道如何用管理员身份运行，打屁屁）； 右键点击运行程序，选择管理员运行；</li></ul><h3 id="OK，SQL2005-的SSL配置完成"><a href="#OK，SQL2005-的SSL配置完成" class="headerlink" title="OK，SQL2005 的SSL配置完成"></a>OK，SQL2005 的SSL配置完成</h3><ul><li>用户可以明文链接</li><li>用户可以用SSL证书链接</li><li>用户可以用window程序登陆链接</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><font color="red">不分先后顺序，对我解决我自己的问题，提供很大帮助和思路</font></li></ul><p>【资料参考】：<br><a href="https://blogs.msdn.microsoft.com/apgcdsd/2011/03/21/sql-server-1-sql-server-connection-encyption/" target="_blank" rel="noopener">https://blogs.msdn.microsoft.com/apgcdsd/2011/03/21/sql-server-1-sql-server-connection-encyption/</a></p><p>【内容截图显示】：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fsarpm3q3hj31c10fzgv7.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>[参考资料]<br>SQL制作证书流程：<br><a href="https://blogs.msdn.microsoft.com/apgcdsd/2011/01/19/how-tosql-server/" target="_blank" rel="noopener">https://blogs.msdn.microsoft.com/apgcdsd/2011/01/19/how-tosql-server/</a></p><p>【参考资料】<br><a href="https://docs.microsoft.com/zh-cn/sql/tools/configuration-manager/protocols-for-mssqlserver-properties-flags-tab?view=sql-server-2017" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/sql/tools/configuration-manager/protocols-for-mssqlserver-properties-flags-tab?view=sql-server-2017</a></p><p>【内容截图】<br>证书内容截图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fsarrbk4shj31c10q3u00.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>如何查找证书<br>【参考资料】<br><a href="https://support.microsoft.com/en-us/help/318605/how-sql-server-uses-a-certificate-when-the-force-protocol-encryption-o" target="_blank" rel="noopener">https://support.microsoft.com/en-us/help/318605/how-sql-server-uses-a-certificate-when-the-force-protocol-encryption-o</a></p><p>bug漏洞：<br>5号： SSLv3 Padding Oracle On Downgraded Legacy Encryption Vulnerability(POOLE)<br>6号： TLS Padding Oracle Information Disclosure Vulnerability(TLS POODLE)<br>【参考资料】<br><a href="https://blog.csdn.net/u011078940/article/details/51554210" target="_blank" rel="noopener">https://blog.csdn.net/u011078940/article/details/51554210</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fsarrxsavqj31c10gpgy0.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>修改修改SQL的注册键值<br>【参考资料】<br><a href="http://stackoverflow.org.cn/front/ask/view?ask_id=660021" target="_blank" rel="noopener">http://stackoverflow.org.cn/front/ask/view?ask_id=660021</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fsarsqn0vhj31c1195b29.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>还有一点要注意的是：CN的名称； 如果CN的名称和主机不一样注意修改：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fsarta15z2j31c10qm4qp.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>证书从哪里来？<br>制作证书的流程：<br>【资料参考】<br>【网站】<br><a href="https://blogs.msdn.microsoft.com/apgcdsd/2011/01/19/how-tosql-server/" target="_blank" rel="noopener">https://blogs.msdn.microsoft.com/apgcdsd/2011/01/19/how-tosql-server/</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fsartql8bfj31c10oan8p.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>注意:<br>selfssl.exe 制作的证书默认的哈希算法是SHA-1； 不能修改，而SHA-1已经在2017年已经被判定为不安全哈希算法；因此不能制作RSA2048SHA256的证书。<br>只能通过makeCert的方式进行制作。</p><p>而通过makecert制作的时候，makecert的版本也要注意，VS2008版本只能制作MD5和SHA1的；VS2010的版本才可以制作SHA256以上的版本；<br>【参考资料】<br><a href="https://msdn.microsoft.com/zh-cn/library/bfsktky3(v=vs.100).aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/zh-cn/library/bfsktky3(v=vs.100).aspx</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fsarwmmuvhj31c10mqdwx.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>注意此版本信息查阅：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fsasc3zsa9j31c1088acb.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>证书制作好了之后，就是安装证书：</p><p>链接地址参考：</p><p><a href="http://stackoverflow.org.cn/front/ask/view?ask_id=660021" target="_blank" rel="noopener">http://stackoverflow.org.cn/front/ask/view?ask_id=660021</a></p><p><a href="https://blog.csdn.net/u011078940/article/details/51554210" target="_blank" rel="noopener">https://blog.csdn.net/u011078940/article/details/51554210</a></p><p><a href="https://blogs.msdn.microsoft.com/apgcdsd/2011/01/19/how-tosql-server/" target="_blank" rel="noopener">https://blogs.msdn.microsoft.com/apgcdsd/2011/01/19/how-tosql-server/</a></p><p><a href="https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-1.1/bfsktky3(v=vs.71)" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-1.1/bfsktky3(v=vs.71)</a></p><p><a href="https://www.microsoft.com/en-us/download/confirmation.aspx?id=17275" target="_blank" rel="noopener">https://www.microsoft.com/en-us/download/confirmation.aspx?id=17275</a></p><p><a href="https://docs.microsoft.com/zh-cn/sql/tools/configuration-manager/protocols-for-mssqlserver-properties-flags-tab?view=sql-server-2017" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/sql/tools/configuration-manager/protocols-for-mssqlserver-properties-flags-tab?view=sql-server-2017</a></p><p><a href="https://blogs.msdn.microsoft.com/apgcdsd/2011/03/21/sql-server-1-sql-server-connection-encyption/" target="_blank" rel="noopener">https://blogs.msdn.microsoft.com/apgcdsd/2011/03/21/sql-server-1-sql-server-connection-encyption/</a></p><p><a href="https://support.microsoft.com/en-us/help/316898/how-to-enable-ssl-encryption-for-an-instance-of-sql-server-by-using-mi" target="_blank" rel="noopener">https://support.microsoft.com/en-us/help/316898/how-to-enable-ssl-encryption-for-an-instance-of-sql-server-by-using-mi</a></p><p><a href="https://social.technet.microsoft.com/Forums/ie/en-US/f9dfdf68-df16-45c6-a349-72b3129f97fc/how-to-generate-a-csr-in-iis-75-with-sha2-algorithm?forum=winserversecurity" target="_blank" rel="noopener">https://social.technet.microsoft.com/Forums/ie/en-US/f9dfdf68-df16-45c6-a349-72b3129f97fc/how-to-generate-a-csr-in-iis-75-with-sha2-algorithm?forum=winserversecurity</a></p><p><a href="https://blog.csdn.net/wuwo333/article/details/53020403" target="_blank" rel="noopener">https://blog.csdn.net/wuwo333/article/details/53020403</a></p><p><a href="https://www.cnblogs.com/daxueba-ITdaren/p/4635784.html" target="_blank" rel="noopener">https://www.cnblogs.com/daxueba-ITdaren/p/4635784.html</a></p><p><a href="https://technet.microsoft.com/en-us/library/dd632629.aspx" target="_blank" rel="noopener">https://technet.microsoft.com/en-us/library/dd632629.aspx</a></p><p><a href="https://stackoverflow.com/questions/36817627/ssl-certificate-missing-from-dropdown-in-sql-server-configuration-manager" target="_blank" rel="noopener">https://stackoverflow.com/questions/36817627/ssl-certificate-missing-from-dropdown-in-sql-server-configuration-manager</a></p><p><a href="https://msdn.microsoft.com/zh-sg/library/bfsktky3(v=vs.100)" target="_blank" rel="noopener">https://msdn.microsoft.com/zh-sg/library/bfsktky3(v=vs.100)</a></p><p><a href="https://msdn.microsoft.com/zh-sg/library/bfsktky3(v=vs.100)" target="_blank" rel="noopener">https://msdn.microsoft.com/zh-sg/library/bfsktky3(v=vs.100)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SQL2005-配置SSL证书流程&quot;&gt;&lt;a href=&quot;#SQL2005-配置SSL证书流程&quot; class=&quot;headerlink&quot; title=&quot;SQL2005 配置SSL证书流程&quot;&gt;&lt;/a&gt;SQL2005 配置SSL证书流程&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="reprint" scheme="http://lmwtuedu.cn/tags/reprint/"/>
    
      <category term="code" scheme="http://lmwtuedu.cn/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>前后端API交互如何保证数据安全性</title>
    <link href="http://lmwtuedu.cn/2018/06/08/2018-06-08-%E5%89%8D%E5%90%8E%E7%AB%AFAPI%E4%BA%A4%E4%BA%92%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E6%80%A7%EF%BC%9F/"/>
    <id>http://lmwtuedu.cn/2018/06/08/2018-06-08-前后端API交互如何保证数据安全性？/</id>
    <published>2018-06-07T16:00:00.000Z</published>
    <updated>2019-08-15T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前后端API交互如何保证数据安全性？"><a href="#前后端API交互如何保证数据安全性？" class="headerlink" title="前后端API交互如何保证数据安全性？"></a>前后端API交互如何保证数据安全性？</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前后端分离的开发方式，我们以接口为标准来进行推动，定义好接口，各自开发自己的功能，最后进行联调整合。无论是开发原生的APP还是webapp还是PC端的软件,只要是前后端分离的模式，就避免不了调用后端提供的接口来进行业务交互。</p><p>网页或者app，只要抓下包就可以清楚的知道这个请求获取到的数据，这样的接口对爬虫工程师来说是一种福音，要抓你的数据简直轻而易举。</p><p>数据的安全性非常重要，特别是用户相关的信息，稍有不慎就会被不法分子盗用，所以我们对这块要非常重视，容不得马虎。</p><h2 id="如何保证API调用时数据的安全性？"><a href="#如何保证API调用时数据的安全性？" class="headerlink" title="如何保证API调用时数据的安全性？"></a>如何保证API调用时数据的安全性？</h2><ul><li><p>通信使用https</p></li><li><p>请求签名，防止参数被篡改</p></li><li><p>身份确认机制，每次请求都要验证是否合法</p></li><li><p>APP中使用ssl pinning防止抓包操作</p></li><li><p>对所有请求和响应都进行加解密操作</p></li><li><p>等等方案…….</p></li></ul><h2 id="对所有请求和响应都进行加解密操作"><a href="#对所有请求和响应都进行加解密操作" class="headerlink" title="对所有请求和响应都进行加解密操作"></a>对所有请求和响应都进行加解密操作</h2><p>方案有很多种，当你做的越多，也就意味着安全性更高，今天我跟大家来介绍一下对所有请求和响应都进行加解密操作的方案，即使能抓包，即使能调用我的接口，但是我返回的数据是加密的，只要加密算法够安全，你得到了我的加密内容也对我没什么影响。</p><p>像这种工作最好做成统一处理的，你不能让每个开发都去关注这件事情，如果让每个开发去关注这件事情就很麻烦了，返回数据时还得手动调用下加密的方法，接收数据后还得调用下解密的方法。</p><p>为此，我基于Spring Boot封装了一个Starter, 内置了AES加密算法。GitHub地址如下：</p><p><a href="https://github.com/yinjihuan/spring-boot-starter-encrypt" target="_blank" rel="noopener">https://github.com/yinjihuan/spring-boot-starter-encrypt</a></p><p>先来看看怎么使用，可以下载源码，然后引入即可，然后在启动类上增加@EnableEncrypt注解开启加解密操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@EnableEncrypt</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class App &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加加密的key配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.encrypt.key=abcdef0123456789</span><br><span class="line">spring.encrypt.debug=false</span><br></pre></td></tr></table></figure><ul><li><p>spring.encrypt.key：加密key，必须是16位</p></li><li><p>spring.encrypt.debug：是否开启调试模式,默认为false,如果为true则不启用加解密操作</p></li></ul><p>为了考虑通用性，不会对所有请求都执行加解密，基于注解来做控制</p><p>响应数据需要加密的话，就在Controller的方法上加@Encrypt注解即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Encrypt</span><br><span class="line">@GetMapping(&quot;/list&quot;)</span><br><span class="line">public Response queryNews(String city) &#123;</span><br><span class="line">    return Response.ok(city);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们访问/list接口时，返回的数据就是加密之后base64编码的格式。</p><p>还有一种操作就是前段提交的数据，分为2种情况，一种是get请求，这种暂时没处理，后面再考虑，目前只处理的post请求，基于json格式提交的方式，也就是说后台需要用@RequestBody接收数据才行, 需要解密的操作我们加上@Decrypt注解即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Decrypt</span><br><span class="line">@PostMapping(&quot;/save&quot;)</span><br><span class="line">public Response savePageLog(@RequestBody PageLogParam logParam, HttpServletRequest request) &#123;</span><br><span class="line">    pageLogService.save(logParam);</span><br><span class="line">    return Response.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加了@Decrypt注解后，前端提交的数据需要按照AES加密算法，进行加密，然后提交到后端，后端这边会自动解密，然后再映射到参数对象中。</p><p>上面讲解的都是后端的代码，前端使用的话我们以js来讲解，当然你也能用别的语言来做，如果是原生的安卓app也是用java代码来处理。</p><p>前段需要做的就2件事情：</p><ul><li><p>统一处理数据的响应，在渲染到页面之前进行解密操作</p></li><li><p>当有POST请求的数据发出时，统一加密</p></li></ul><p>js加密文件请参考我GitHub中encrypt中的aes.js,crypto-js.js,pad-zeropadding.js</p><p>我们以axios来作为请求数据的框架，用axios的拦截器来统一处理加密解密操作</p><p>首先还是要封装一个js加解密的类，需要注意的是加密的key需要和后台的对上，不然无法相互解密，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var key  = CryptoJS.enc.Latin1.parse(&apos;abcdef0123456789&apos;);</span><br><span class="line">var iv   = CryptoJS.enc.Latin1.parse(&apos;abcdef0123456789&apos;);</span><br><span class="line">// 加密</span><br><span class="line">function EncryptData(data) &#123;</span><br><span class="line">    var srcs = CryptoJS.enc.Utf8.parse(data);</span><br><span class="line">    var encrypted = CryptoJS.AES.encrypt(srcs, key, &#123;</span><br><span class="line">        mode : CryptoJS.mode.ECB,</span><br><span class="line">        padding : CryptoJS.pad.Pkcs7</span><br><span class="line">    &#125;);</span><br><span class="line">    return encrypted.toString();</span><br><span class="line">&#125;</span><br><span class="line">// 解密</span><br><span class="line">function DecryptData(data) &#123;</span><br><span class="line">    var stime = new Date().getTime();</span><br><span class="line">    var decrypt = CryptoJS.AES.decrypt(data, key, &#123;</span><br><span class="line">        mode : CryptoJS.mode.ECB,</span><br><span class="line">        padding : CryptoJS.pad.Pkcs7</span><br><span class="line">    &#125;);</span><br><span class="line">    var result = JSON.parse(CryptoJS.enc.Utf8.stringify(decrypt).toString());</span><br><span class="line">    var etime = new Date().getTime();</span><br><span class="line">    console.log(&quot;DecryptData Time:&quot; + (etime - stime));</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>axios拦截器中统一处理代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 添加请求拦截器</span><br><span class="line">axios.interceptors.request.use(function (config) &#123;</span><br><span class="line">    // 对所有POST请加密，必须是json数据提交，不支持表单</span><br><span class="line">    if (config.method == &quot;post&quot;) &#123;</span><br><span class="line">        config.data = EncryptData(JSON.stringify(config.data));</span><br><span class="line">    &#125;</span><br><span class="line">    return config;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line">// 添加响应拦截器</span><br><span class="line">axios.interceptors.response.use(function (response) &#123;</span><br><span class="line">    // 后端返回字符串表示需要解密操作</span><br><span class="line">    if(typeof(response.data) == &quot;string&quot;)&#123;</span><br><span class="line">        response.data = DecryptData(response.data);</span><br><span class="line">    &#125;</span><br><span class="line">    return response;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>到此为止，我们就为整个前后端交互的通信做了一个加密的操作，只要加密的key不泄露，别人得到你的数据也没用，问题是如何保证key不泄露呢？</p><p>服务端的安全性较高，可以存储在数据库中或者配置文件中，毕竟在我们自己的服务器上，最危险的其实就时前端了，app还好，可以打包，但是要防止反编译等等问题。</p><p>如果是webapp则可以依赖于js加密来实现，下面我给大家介绍一种动态获取加密key的方式，只不过实现起来比较复杂，我们不上代码，只讲思路：</p><p>加密算法有对称加密和非对称加密，AES是对称加密，RSA是非对称加密。之所以用AES加密数据是因为效率高，RSA运行速度慢,可以用于签名操作。</p><p>我们可以用这2种算法互补，来保证安全性，用RSA来加密传输AES的秘钥，用AES来加密数据，两者相互结合，优势互补。</p><p>其实大家理解了HTTPS的原理的话对于下面的内容应该是一看就懂的，HTTPS比HTTP慢的原因都是因为需要让客户端与服务器端安全地协商出一个对称加密算法。剩下的就是通信时双方使用这个对称加密算法进行加密解密。</p><ol><li><p>客户端启动，发送请求到服务端，服务端用RSA算法生成一对公钥和私钥，我们简称为pubkey1,prikey1，将公钥pubkey1返回给客户端。</p></li><li><p>客户端拿到服务端返回的公钥pubkey1后，自己用RSA算法生成一对公钥和私钥，我们简称为pubkey2,prikey2，并将公钥pubkey2通过公钥pubkey1加密，加密之后传输给服务端。</p></li><li><p>此时服务端收到客户端传输的密文，用私钥prikey1进行解密，因为数据是用公钥pubkey1加密的，通过解密就可以得到客户端生成的公钥pubkey2</p></li><li><p>然后自己在生成对称加密，也就是我们的AES,其实也就是相对于我们配置中的那个16的长度的加密key,生成了这个key之后我们就用公钥pubkey2进行加密，返回给客户端，因为只有客户端有pubkey2对应的私钥prikey2，只有客户端才能解密，客户端得到数据之后，用prikey2进行解密操作，得到AES的加密key,最后就用加密key进行数据传输的加密，至此整个流程结束。</p></li></ol><p>##spring-boot-starter-encrypt原理<br>最后我们来简单的介绍下spring-boot-starter-encrypt的原理吧，也让大家能够理解为什么Spring Boot这么方便，只需要简单的配置一下就可以实现很多功能。</p><p>启动类上的@EnableEncrypt注解是用来开启功能的,通过@Import导入自动配置类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@Import(&#123;EncryptAutoConfiguration.class&#125;)</span><br><span class="line">public @interface EnableEncrypt &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EncryptAutoConfiguration中配置请求和响应的处理类，用的是Spring中的RequestBodyAdvice和ResponseBodyAdvice，在Spring中对请求进行统计处理比较方便。如果还要更底层去封装那就要从servlet那块去处理了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@Component</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@EnableConfigurationProperties(EncryptProperties.class)</span><br><span class="line">public class EncryptAutoConfiguration &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 配置请求解密</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public EncryptResponseBodyAdvice encryptResponseBodyAdvice() &#123;</span><br><span class="line">        return new EncryptResponseBodyAdvice();</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 配置请求加密</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public EncryptRequestBodyAdvice encryptRequestBodyAdvice() &#123;</span><br><span class="line">        return new EncryptRequestBodyAdvice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过RequestBodyAdvice和ResponseBodyAdvice就可以对请求响应做处理了，大概的原理就是这么多了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前后端API交互如何保证数据安全性？&quot;&gt;&lt;a href=&quot;#前后端API交互如何保证数据安全性？&quot; class=&quot;headerlink&quot; title=&quot;前后端API交互如何保证数据安全性？&quot;&gt;&lt;/a&gt;前后端API交互如何保证数据安全性？&lt;/h1&gt;&lt;h2 id=&quot;前
      
    
    </summary>
    
    
    
      <category term="reprint" scheme="http://lmwtuedu.cn/tags/reprint/"/>
    
      <category term="code" scheme="http://lmwtuedu.cn/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>累死你的不是工作，而是工作方法</title>
    <link href="http://lmwtuedu.cn/2018/05/18/2018-05-18-%E7%B4%AF%E6%AD%BB%E4%BD%A0%E7%9A%84%E4%B8%8D%E6%98%AF%E5%B7%A5%E4%BD%9C%EF%BC%8C%E8%80%8C%E6%98%AF%E5%B7%A5%E4%BD%9C%E6%96%B9%E6%B3%95/"/>
    <id>http://lmwtuedu.cn/2018/05/18/2018-05-18-累死你的不是工作，而是工作方法/</id>
    <published>2018-05-17T16:00:00.000Z</published>
    <updated>2019-08-15T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="累死你的不是工作，而是工作方法"><a href="#累死你的不是工作，而是工作方法" class="headerlink" title="累死你的不是工作，而是工作方法"></a>累死你的不是工作，而是工作方法</h2><p>我们一直都认为，如果一个人智商情商正常、学习和工作意愿高，就一定能出成绩。</p><p>然而，我带过很多人，也招过很多人，却发现一个奇怪的现象：有一些人，十分有意愿学习，非常努力，智商情商也都正常，然而工作产出却非常低，甚至不如很多资质低于他们的人。</p><p>我一直百思不得其解，一度怀疑自己看人不准。直到前阵子看到吴军的这段叙述，才幡然醒悟，仔细回想了这些人的工作方式，将他们与产出高的人相比，发现他们无一例外都存在这三个问题：</p><h3 id="问题1：只关注任务，不关注目标"><a href="#问题1：只关注任务，不关注目标" class="headerlink" title="问题1：只关注任务，不关注目标"></a>问题1：只关注任务，不关注目标</h3><p>假如你的老板正在飞机上，还有1小时落地，下来之后需要给客户做一个重要汇报，而你需要给他做一份PPT。但因为你错估了时间，导致PPT草草做完，而且发现其中一些数据没有，你怎么办？</p><p> 低效人士的做法是：疯狂地找数据，最后可能数据有了，然而PPT没有来得及做完，或者质量不高。</p><p> 一般人的做法是：找人帮自己一起找数据。</p><p> 而最高效的那些人，会根据老板此次汇报的目的，判断这些数据在其中的作用大小，如果作用不大，那么就把时间花在完善重要页数、而不是找数据上，如果很关键，那么就找其他人帮忙，或者找一些替代数据。</p><p> 这三类人之间的差距，其实就是任务导向与目标导向的差距。</p><p>  我此前的咨询公司，在做高潜人才研究的时候，有个发现：高潜力的人才是有共性的，具备这些共性的人，几乎做什么都能做好，而不具备的，几乎做任何工作都会障碍重重。</p><p> 这其中，有一项共性就是Result-driven（结果驱动）。那些高产出的人，未必动作更快，而是更善于判断，什么事情对结果是最有效的，然后，用尽一切办法保证结果达成，而不是死守着原有的工作任务。</p><p> 实际上，结果驱动不仅仅是一种工作习惯，更是一种思维方式。这种以终为始的思维模式，是我自己刻意训练的最有用的思维模式之一。</p><p> 比如思维训练营里，有学员问我：如何让自己对一个行业有真知灼见？</p><p> 想想看，如果是你，会如何回答？</p><p>我的回答方式，是反问她：具备真知灼见的目的是什么呢？是想让客户更加信任你、还是想让老板看到你的进步？</p><p> 假设你是希望客户信任你，觉得你懂他，那你要做的，就是看这个行业里的客户有什么痛点，然后针对这几个痛点，下功夫研究和分析，有更多洞见，然后借机沟通出去。了解一个行业，是一个太大的话题，没有目标，根本无从下手。</p><p> 所以，没有结果驱动的思维，而仅仅死守着工作任务，最终就是，出工不出活儿。</p><h3 id="问题2：应激式工作，而非统筹式工作"><a href="#问题2：应激式工作，而非统筹式工作" class="headerlink" title="问题2：应激式工作，而非统筹式工作"></a>问题2：应激式工作，而非统筹式工作</h3><p>如果你观察周围的同事，会发现，整天风风火火、急得上蹿下跳、各种任务来回切换的人，有时候产出并不高。看他们工作，就好像打地鼠一样，打完一个，另一个又冒上来，连看的人都跟着焦虑起来。</p><p> 而另一类人，他们做事专注、条理清晰、看起来很淡定，但最后，多困难的事儿都默默搞定了。</p><p> 两者的差别就在于，第一类人总是应激式工作。他们每天起来的第一件事，不是规划当天的工作，而是马上投入工作，以至于到了下班之后，发现还有很多事情没做完，而没做完的，可能又是最重要的。</p><p> 另外，领导临时给个任务、客户临时有个要求、同事临时要个数据，他们都会停下手里的事情，去忙这些，最终，在任务的切换上花费了巨大的精力。</p><p> 我跟公司的运营打过一个比方：假设你每项工作任务平均半小时可以做完，而任务之间的切换通常也要半小时，如果你经常一项不做完就切换到下一项，就算每个任务中途切换一次吧，那就意味着，8小时的工作时间，你至少有4小时都花在任务切换上了。</p><p> 这种应激式工作方式无疑是低效的，那什么才是高效的呢？统筹式工作。</p><p> 真正的统筹式工作，有几个特征：</p><p><strong>特征一，有计划地工作</strong></p><p> 我通常周日晚上就会排好下周每天的工作，而每天早上会排好当天的工作。而且，任务清单在工作的时候一直开着、实时更新，完成一项删掉一项，临时增加一项就插入相应的时间段，当天完不成的、非紧急的任务，我就改成第二天的日期。</p><p> 这种方式，会让自己很有掌控感，多少事情来了，都不会乱了阵脚。</p><p> 当然，在做计划的时候，你需要为高价值问题分配最多专门的时间。我此前特地写过一篇文章，就提到，大部分人在80%的时间里都是做无用功，根本原因就是没搞清楚真正要解决的问题。这6个问题，可以帮你省80%的无用功。</p><p><strong>特征二，形成自己固定的时间习惯</strong></p><p> 比如我的习惯是，在上午做需要烧脑的事情、在交通工具上听书、在饭后效率不高的时候集中回复微信消息和留言、在等人的时候构思下篇文章主题、在疲劳的时候刷一下公众号、在傍晚的时候跟团队开会、在晚上做一个简单总结。</p><p> 这种习惯，一方面把不同难度的工作跟自己的效率波峰波谷相匹配，达到效率最大化；另一方面，我会清楚地知道，5分钟、10分钟、30分钟，对我来说分别可以干什么，这样就不会一有碎片时间，就习惯性地刷朋友圈了。</p><p><strong>特征三，及时记录、每天总结</strong></p><p> 当你正在工作的时候，老板布置了一个任务、客户又来了一个问题，你会如何呢？很多人就直接扑到临时任务上去了，但真正好的做法是，如果不是十万火急，你可以快速用关键词记在笔记本上，不需要任何思考，然后马上回到刚才的任务，做完再看笔记本。</p><p> 另外，你在一天当中，学到了什么、犯了什么错误，当时也要记下来，因为过了那个时候，你很快就会忘，然后继续犯这个错误。当然，这些记录，晚上都需要进行整理。</p><p> 我曾说过，此前8年多的顾问生涯里，成长最快的那半年，我每天都坚持写工作日记。</p><p> 另外，记录还有一个好处，就是可以减轻大脑负担。每天的例行工作、自己常犯的错误，这些都可以列清单。你的大脑是用来思考的，是很宝贵的，别把一支笔就可以做的事情，强加给你的大脑来做。</p><h3 id="问题3：几乎从不“偷懒”"><a href="#问题3：几乎从不“偷懒”" class="headerlink" title="问题3：几乎从不“偷懒”"></a>问题3：几乎从不“偷懒”</h3><p>“懒癌”是第一生产力。仔细盘点一下，我们哪样创新不是因为懒呢？不想走路，有了汽车；不想爬楼，有了电梯；不想打扫，有了扫地机器人……</p><p>工作中的大部分事情，并不是一次性的，而是持续的，那么就可以在第一次做的时候，搭好框架。</p><p> 比如，我让运营每周做一次数据分析，这个事情是重复性的，所以高效的做法是：建一张excel表格，把固定需要分析的参数都做好公式，每周只需要把导出来的源数据贴进去，刷新之后参数就出来，然后只需要看参数来得出结论。</p><p> 当然，这里所说的偷懒，不仅是善用工具，还包括善用他人。</p><p> 比如，你从来没做过数据分析，那么就先去找找前人怎么做的；比如，你有自己的团队或者实习生，那就不要做任何他们就可以做的事情；再比如，去运营社群，摸索出一套群主激励机制，比你自己去做群主，要高效得多。</p><p>所以，这三个让你Work Smart的工作方式，听起来难吗？一点也不，而且你很可能也听说过。但是，为什么很多人做不到呢？我观察下来，有几个障碍：</p><h3 id="障碍1：工作环境所限。"><a href="#障碍1：工作环境所限。" class="headerlink" title="障碍1：工作环境所限。"></a>障碍1：工作环境所限。</h3><p> 很多人的工作性质，就不是结果导向型的，而是任务导向型的。他的工作岗位要求他做的，就是完成任务，至于背后的出发点，不需要知道。而且，领导有可能就是考核努力、考核苦劳，而不是考核产出。</p><p> 实际上，工作性质对一个人的思维方式、行为习惯的影响，大到超乎想象。</p><p>你去看，刚毕业的时候，一个学校一个专业的同学，看起来差不多，但过了几年，你会发现，只要接触一个人几分钟，听他说几句话，就能大致判断出他的职业。</p><p> 再极端一些的，多年前我曾经因为要帮客户设计流程，去他们的产线观察生产过程，在噪音极大、灯光昏暗的厂房里，我看着流水线工人机械地盯着机器、等待换箱，几个小时下来，我自己也开始反应迟钝、敏锐度下降了。</p><h3 id="障碍2：没有资深的人辅导。"><a href="#障碍2：没有资深的人辅导。" class="headerlink" title="障碍2：没有资深的人辅导。"></a>障碍2：没有资深的人辅导。</h3><p> 从开头的案例可以看出，Google工程师那么优秀的一群人，在从校园进入公司之后，也需要有经验的人辅导。</p><p> 但很多公司并不像Google那样，重视对新人工作方式的培养，将Work Smart提到非常高的位置。</p><p> 他们往往只重视教员工What（需要做哪些事情、用什么工具等等），却没有How（如何聪明地做这些事情）和Why（这些事情对公司、对客户有什么帮助、要达到何种目的），导致员工的聪明才干发挥不出来，没有成就感。</p><h3 id="障碍3：思维方式固化。"><a href="#障碍3：思维方式固化。" class="headerlink" title="障碍3：思维方式固化。"></a>障碍3：思维方式固化。</h3><p> 一部分人，会在工作多年之后，发现工作性质和工作环境的负面影响，醒悟过来想要改变。</p><p> 然而，从学校踏入社会的这几年，是思维和工作方式形成的关键几年，如果任务导向、应激式努力、闷头蛮干的工作方式在大脑中固化了，形成了下意识思维，是很难扭转过来的。</p><p> 我带过几个人，此前的工作经历都是任务式、应激式的，在跟他们合作的时候，的确能够感受到他们与自己固有思维作斗争的痛苦与挣扎，然而，并不是每个人最终都能挣扎出来、突破自我的。</p><p> 所以，年轻时候的工作选择，你选择的不只是一份工作，而是一种思维习惯、工作方式、价值观甚至生活方式。</p><p> 在初入职场的几年，处于何种工作环境、跟谁一起工作、被谁辅导工作，足以影响你的下半辈子。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;累死你的不是工作，而是工作方法&quot;&gt;&lt;a href=&quot;#累死你的不是工作，而是工作方法&quot; class=&quot;headerlink&quot; title=&quot;累死你的不是工作，而是工作方法&quot;&gt;&lt;/a&gt;累死你的不是工作，而是工作方法&lt;/h2&gt;&lt;p&gt;我们一直都认为，如果一个人智商情商正
      
    
    </summary>
    
    
    
      <category term="reprint" scheme="http://lmwtuedu.cn/tags/reprint/"/>
    
      <category term="work" scheme="http://lmwtuedu.cn/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>今日头条》再被整肃　“内涵段子”永久关停</title>
    <link href="http://lmwtuedu.cn/2018/04/12/2018-04-12-%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1%E2%80%94%E5%86%85%E6%B6%B5%E6%AE%B5%E5%AD%90/"/>
    <id>http://lmwtuedu.cn/2018/04/12/2018-04-12-今日头条—内涵段子/</id>
    <published>2018-04-11T16:00:00.000Z</published>
    <updated>2019-08-15T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>##《今日头条》再被整肃　“内涵段子”永久关停</p><p><a href="https://botanwang.com/articles/201804/%E5%86%8D%E8%AF%9A%E6%81%B3%E7%9A%84%E9%81%93%E6%AD%89%E4%B9%9F%E6%94%B9%E5%8F%98%E4%B8%8D%E4%BA%86%E5%91%BD%E8%BF%90.html" target="_blank" rel="noopener">再诚恳的道歉也改变不了命运</a></p><blockquote><p>佛曰：再诚恳的道歉也改变不了命运</p></blockquote><p>今日头条创始人、CEO 张一鸣的致歉信成为今日热点，张老板的道歉信写得极其诚恳，完全不像一个工程师的手笔，严重怀疑是某知名写手的代笔。他在致歉信中说：‌‌“我真诚地向监管部门致歉，向用户及同事们道歉。从昨天下午接到监管部门的通知到现在，我一直处在自责和内疚之中，一夜未眠。产品走错了路，出现了与社会主义核心价值观不符的内容，没有贯彻好舆论导向，接受处罚，所有责任在我。我们片面注重增长和规模，却没有及时强化质量和责任，忽视了引导用户获取正能量信息的责任。对承担企业社会责任，弘扬正能量，把握正确的舆论导向认识不够，思想上缺乏重视。一直以来，我们过分强调技术的作用，却没有意识到，技术必须要用社会主义核心价值观来引导，传播正能量，符合时代要求，尊重公序良俗。‌‌”他还声称今日头条将永久关停‌‌“内涵段子‌‌”客户端软件及公众号，还说要强化总编辑责任制，全面纠正算法和机器审核的缺陷，不断强化人工运营和审核，将现有6000人的运营审核队伍，扩大到10000 人。</p><p>作为一个成功的知名互联网企业的老总，张老板的道歉信已经到了声泪俱下诚惶诚恐卑躬屈膝的程度，让人几乎不忍卒读心生同情了。建议研究企业史的朋友好好保存这份致歉信，它是了解当下营商环境和企业家生存法则的经典文献，其史料价值也许不亚于四十年前小岗村农民要求包产到户的血手印文书。据说改革开放都四十年了，此国做企业的还动辄得罪，动不动就要写检讨过关，也难怪境外势力血口喷人说咱们搞的不是市场经济了。至于咱这里搞的是啥子经济，经济学家们有各种忽悠，看了张老板今天的检讨，我突然恍然大悟：原来我们搞的是检讨经济。</p><p>在朋友圈，看到张鸣老师调侃道：‌‌“原来以为张一鸣比我多个‌‌‘一’，牛逼大了。现在看来，他还不如我，我只是在小时候写检讨，他都这个岁数了，还在写检讨。‌‌”确实，张一鸣同志比起有点反骨的知识人，这个检讨够低声下气的，可是那么大的企业摆在人家手心里，不服软还真不行，张鸣老师是一人吃饱全家不饿，张一鸣同志却是身家性命全靠D恩，我辈本是蓬蒿人，岂能摧眉折腰事权贵？不得不感叹，在赵家</p><p>村当老板，真是窝囊憋屈得很，想站着把钱挣，实在很难，想学《白鹿原》中的白嘉轩那样挺直腰杆，可是任凭你多么有经营才华，一不小心就有绑匪的铁棒抽来，直接把你干趴下！</p><p>去年春节跟我90后的侄儿聊天，得知他在某直播公司做经纪，我说：那你得小心，你这个行业是打擦边球的，很可能因为低俗就被端掉。侄儿确信心满满的说：我们不谈政治，我支持某大大，不会有事的。我说：不是你不谈政治<em>政</em>治就不关心你，互联网头上一直悬着把剑，你知道网信办么？他说：我不知道，我不关心这个。话到这里，聊天就基本聊死了。作为长辈，虽然心里骂了他三声傻逼，可还是不忍心骂出口。</p><p>我都没法跟他讲去年我在看守*所遇到的一个哥们的故事。那哥们在深圳办了一个网络公司，也是搞三俗</p><p>的，打擦边球，靠放不露点的AV 短视频赚取网民的充值点播费，短短几个月就通过第三方支付收到几</p><p>千万的分成。结果全公司几十人被一锅端，这哥们现在面临着巨额诈骗罪起诉，在里面苦等着一审开庭。在里面经常听他闲聊创业之苦，平民百姓，无背景，无资源，赚钱难，只有捞偏门，打擦边球。只是可怜他老婆和一岁的女儿，不知道以后怎么办。每每谈及，他总是泪下。</p><p>最近和广州一个企业家朋友聊天，他做实体曾经很成功，早已亿万身价，谈及现在的经营环境，他说：现在跟我打球的老板越来越多了，大家都不知道以后该干嘛怎么干了。真是春江水暖鸭先知，谁说今天的老板们为富不仁犬儒混沌了，他们每天在泥水里打滚，水深水浅水冷水暖最敏感，珠三角的老板们都如此，其他地区的老板就不用说了。</p><p>鲁迅先生曾说：‌‌“中国历来只经历了两个时代，一个是暂时坐稳了奴隶的时代，一个是想做奴隶而不可得</p><p>的时代。‌‌”鲁夫子要是活在此时代，怕也只能再次如此感叹了，或者，他感叹都发不出了，早已经在里面啃窝窝头了。</p><p>不过，我相信在张老板此番真诚的检讨之后，他的奴才宝座暂时是可以坐稳一阵的，毕竟，乖宝宝才有好饭吃，至于以后如何，那只有天晓得了。</p><p>延伸阅读：黄云腾：告别内涵再见段友（三声）</p><p>内涵段子关停的消息，是在4月10日下午——这个平静的周二下午——传到了大伟的耳朵里。</p><p>大伟把手机打开，点击内涵段子的应用图标。手忙脚乱没有让应用打开的速度变得更快。应用上的短视频和段子依旧，不过，评论里有人证实了这个伤感的消息。有人晒出了官方通知的截图。上面写着，</p><p>由于‌‌“导向不正、格调低俗‌‌”，内涵段子将被永久关停。</p><p>永久关停——意味着‌‌“内涵段子‌‌”客户端软件及公众号将被无限期关闭。行政机构还要求内涵段子的母公司字节跳动举一反三，全面清理类似视听节目产品。</p><p>大伟今年23岁，使用内涵段子已经5年，生活在江苏无锡。这个平台确实长期存在着打擦边球的黄色或其它违规内容，是吸引很多人来到这里获得某种快乐的直接原因。</p><p>但关停的消息来得很突兀，没有人被事先通知，特别是长期乐在其中的段友。</p><p>5年时间里，大伟的闲暇时间几乎都在这款应用上度过，他会在上面看搞笑的视频和段子，和人对暗号。大伟用了自己的车之后，立即在网上买了一款‌‌“内涵段子‌‌”的车贴，贴在自己的车上。当车堵在路中间，或者需要等红灯，大伟时常可以听到同道中人在车尾鸣笛——节奏相同的、一长两短的‌‌“滴-滴滴‌‌”声。</p><p>这是段友们在人海茫茫中互相辨认的明证，也是彼此心照不宣的一张身份证。此时此刻你在微博等社交平台上，还可以搜到无数这样段友相认的视频。</p><p>5年过去了，大伟还记得自己从内涵段子认识段友，和段友见面的心情。那是一种找到了组织的感觉，就好像漂流在大海上的船只终于跟上了自己的船队。</p><p>2018年的4月，中国很多地方冷热交替，阴晴不定。有些事情的解决方案，注定是一种鸵鸟哲学。这五年时间里，大伟说，他的每一台手机，开机时装的第一个APP，都是内涵段子。</p><p>他把手机打开，发了一条微博，自从有了内涵段子，大伟已经很久没有再用微博。他写下，‌‌“你不仅仅是个app，你更是我的青春‌‌”。</p><p>‌‌“啤酒小龙虾，段友是一家‌‌”</p><p>在7点41分的时候，段友的另一个聚集地，内涵段子贴吧里陷入一片混乱。消息已经传开。有人不愿相信，发帖还在询问，‌‌“真的就这样了吗？‌‌”</p><p>百度贴吧上，很多人也都有类似的疑问和震惊。名为‌‌“内涵段子‌‌”的百度贴吧在大伟接到消息不久后就和另外一个名为‌‌“段友之家吧‌‌”的贴吧合并，超过100万的大伟们在吧内逡巡，时不时发出‌‌“应该何去何从‌‌”的疑问和零星略显激烈的抗议声。</p><p>在两篇置顶的帖子中，其中一篇便是劝告大家理性发言。</p><p>作为今日头条的第二款独立产品，内涵段子诞生于2012年。在它诞生前后，没人可以想到这款产品可以迸发出这么大的能量，也没有人可以预估这款产品和它衍生的群体——段友，会成为中文互联网世界中一个隐秘但坚实的群体。</p><p>但是，这一切的的确确发生了。从湖南到新疆，再从山西到浙江，DJ到学生，形形色色的人都有可能是内涵段子的一份子。</p><p>4月6日，一个长沙望城的女孩在微博上晒出了望城段友聚会的视频。在这份7分钟的视频中，画面中有20余人站成一排，所有人的汽车后面都贴了内涵段子的车贴。</p><p>段友的交往方式遍布全国的各个地区社群，他们有着一套自己的社交体系和行为规矩。例如，‌‌“滴~滴滴‌‌”这个一长两短的汽车喇叭声，和内涵段子的车贴作为互相识别的标识；类似口号有‌‌“啤酒小龙虾，段友是一家‌‌”、‌‌“轻风吹杨柳，敢问是段友‌‌”、‌‌“天王盖地虎，小鸡炖蘑菇‌‌”等等。</p><p>内涵段子最开始是被设计为今日头条用户的导流入口。今日头条CEO张一鸣曾经坦言，内涵段子和它的‌‌“大哥‌‌”搞笑囧图都是这种思路的产物。</p><p>‌‌“我们要覆盖很多形式；我们要覆盖很多平台，有手机有PC ……其实这些产品（内涵段子），都涵盖了之前的想法，只不过以一种比较接地气的想法诞生。因为当时的移动互联网发展非常快，我们希望快速推出产品，以获取用户来验证想法。‌‌”</p><p>承接百思不得姐和糗事百科的内涵段子，从一开始就立足于接地气和满足快乐。在某种程度上，这种以段子和搞笑视频为主的快乐消解了严肃的意义，从而显得low或低俗——在最大程度上，它却可以让人们拥有对同一事物的相同视角或认同感。</p><p>《内涵段子》这首歌，如今在网易云音乐上评论已经突破9000条。这首歌是内涵段子的非官方主题曲。创作者程炳杰之前是沈阳音乐学院的学生。他最初只是把这首歌上传到内涵段子里——这个集成文字、图片于一体的应用，在上线视频功能后拉动了一波上传热潮，此后让视频成为内涵段子中内容分发的主要形式。</p><p>程炳杰的歌曲最终获得了17万个赞，并因此获得了将其灌录成唱片的机会。在这首歌里，程炳杰写道，‌‌“看到段子带给我们的/不止微笑眼泪/让太多的内涵让你我体会/内涵的不止是段子还有每个人的美。‌‌”</p><p>这股凝聚力也拉动整个应用得以向社区转变。娇姐和楠哥是来自长沙的一对情侣，因为内涵段子而结识。2017年6月，他们在长沙梅溪湖进行段友聚会。一位段友带了台无人机，他们借此拿着对讲机指挥航拍汽车双闪。后来，航拍段友车队就在社区里流行起来。</p><p>他们也会一起聚起来做公益，为长沙失聪的孩子们送去玩偶公仔、课桌椅子、和画具。2017年12月，拥有900人规模的甘肃段友俱乐部来到甘肃斜坡希望小学，为学前班到六年级的孩子，带来了92套服装、68套学习用品和若干体育用品。</p><p>‌‌“APP不在，人还在‌‌”</p><p>无论是在乐山、介休、平梁，还是新榆、铜陵，你都可以看见同样的场景：汽车的亮光打在路边，几十辆汽车排成几排，无人机在空中航拍，汽车边的人们都露出某种上扬的、熟悉的笑容。像某种回声又或者一种微弱的响应，熟悉的声音响了起来，‌‌“滴—滴滴……‌‌”</p><p>更大的不确定性一直存在于这种段友自发性的行动之中，后者也始终处于被注意的状态之下。</p><p>今天晚上20点，海门公安在微博上发布通告称，发现有部分人员通过网络召集的形式自行组织‌‌“抖友‌‌”聚集活动，活动地点均选择在道路及一些公共场所，涉嫌触犯法律。</p><p>这封通告还提到，根据《中华人民共和国集会游行示威法》，公安机关可以对负责人和直接负责人处以警告或者十五日以下拘留。</p><p>此前，西安市也曾对段友在部分路段鸣笛做出罚款处理。不过，相比这种温和的处理手段，海门似乎有意对‌‌“抖友‌‌”聚会进行定性，来将其规范在合理合规的官方体系。</p><p>今年，今日头条在官方监管中被认为具有了更强烈的危险性。从去年年底到今天，今日头条已经被官方处罚五次。今年3月29日，今日头条因为违规‌‌“二跳‌‌”，被人民日报定性为‌‌“不安分、不守法‌‌”。昨天下午3点，今日头条被要求从各互联网应用商店暂停下载。在这次处罚里，今日头条被要求暂停下载服务3周，时间从4月9日15时起至4月30日15时止。</p><p>在张一鸣的话术中，2018年本来是今日头条在社会责任发力的一年。‌‌“2018对我们已满六年的企业来说……作为一个社会的一分子，一家平台型企业来说，我们希望在企业社会责任这一块能做更多的事情。‌‌”</p><p>前不久，张一鸣在今年年初清华大学的一次分享中还谈道，‌‌“过去我们更多关心业务的成长，现在我们希望对管理团队，对业务负责人提出更高的要求。不仅关心业务，不仅关心全球化，也能够有更开阔的视角去认识、承担更多的企业社会责任。‌‌”</p><p>这个故事需要更稳定的产品壁垒和防御体系支撑。在今天晚上，人民网发布微评，‌‌“产品不能沦为算法的奴隶‌‌”，今日头条因此得到了‌‌“外科手术式‌‌”监管。以西瓜视频、火山小视频、抖音、悟空问答、内涵段子为矩阵的今日头条，也将不得不因此面临产品环节缺失与舆论审判的双重压力。</p><p>今晚，抖音发布公告称将在本周第一期反沉迷系统。用户连续使用90分钟后将被提醒用户注意时间。此外，抖音还提供由用户设定密码开启的时间锁功能，一旦单日使用时长累计达到2小时，系统将自动锁定，用户需要重新输入密码才能继续使用。</p><p>由于售假，以及多地出现模仿抖音视频受伤事件，抖音不得不采取这类应急措施，用以维护产品和正在形成的‌‌“抖友‌‌”的社群稳定。</p><p>虽然在很多段友中存在着对抖音的鄙视传统，但是在内涵段子最后的时间里，很多段友相约在抖音重逢。就在刚刚，抖音已经无法查看留言评论，也因为服务维护而参与留言。</p><p>倒回到晚上5点23分的时候，一封帖子开始得到吧友响应。那是一位吧友上传了官方通知关停的截图。这位有着7.1年吧龄的吧友，把帖子的标题取成‌‌“段友们，再最后对一遍暗号‌‌”。这就是这封帖子的全部和残留在段友们——千千万万的大伟们，眼中最后的一抹温情记忆——一切都在不言中。</p><p>现在，在内涵段子的首页是关停公告，首页的视频永远停留在了同一条，标题是‌‌“厉害了，我的…‌‌”</p><p>（注：文中大伟为化名）</p><p>我们在内涵段子里看到的十句留言</p><p>‌‌“一觉醒来，家TM没了。‌‌”</p><p>‌‌“今后唯一能笑的地方都灰飞烟灭了。‌‌”</p><p>‌‌“巅峰诞生虚伪的拥护，黄昏见证虔诚的信徒。‌‌”</p><p>‌‌“4.10内涵空难。‌‌”</p><p>‌‌“内涵段子最后一个刷新出来的是一句话，厉害了我的国。‌‌”</p><p>‌‌“我不会卸载，我等着你。‌‌”</p><p>‌‌“如果多年以后我孩子问我，爸爸内涵段子是什么组织，我会微笑并自豪着说那是我的青春。‌‌”</p><p>‌‌“内涵一日不死，抖音永远是太子，结果真的死了。‌‌”</p><p>‌‌“有多少人像我一样拿起手机不知道该干嘛了。‌‌”</p><p>‌‌“APP不在了，但是我们车友还在，路上还能遇见段友，请记住，滴~滴滴。‌‌”</p><blockquote><p>结束语： 赚钱的方式永远都在刑法里，你要触动它吗？</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##《今日头条》再被整肃　“内涵段子”永久关停&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://botanwang.com/articles/201804/%E5%86%8D%E8%AF%9A%E6%81%B3%E7%9A%84%E9%81%93%E6%AD%89%E4%B
      
    
    </summary>
    
    
    
      <category term="reprint" scheme="http://lmwtuedu.cn/tags/reprint/"/>
    
      <category term="consumption" scheme="http://lmwtuedu.cn/tags/consumption/"/>
    
  </entry>
  
  <entry>
    <title>Java跨平台读取本机硬件信息</title>
    <link href="http://lmwtuedu.cn/2018/04/02/2018-04-02-Java%E8%B7%A8%E5%B9%B3%E5%8F%B0%E8%AF%BB%E5%8F%96%E6%9C%AC%E6%9C%BA%E7%A1%AC%E4%BB%B6%E4%BF%A1%E6%81%AF/"/>
    <id>http://lmwtuedu.cn/2018/04/02/2018-04-02-Java跨平台读取本机硬件信息/</id>
    <published>2018-04-01T16:00:00.000Z</published>
    <updated>2019-08-15T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java跨平台读取本机硬件信息"><a href="#Java跨平台读取本机硬件信息" class="headerlink" title="Java跨平台读取本机硬件信息"></a>Java跨平台读取本机硬件信息</h3><p>最近做一个授权项目，需要查询各种系统的硬件信息，例如CPU、MAC等等。 于是各种google了一下，查询到了Sigar这个工具。</p><p><a href="http://sourceforge.net/projects/sigar/files/latest/download?source=files" target="_blank" rel="noopener">sigar-1.6.4.zip下载地址</a></p><ul><li>maven</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.fusesource&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;sigar&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>非Maven：直接拷贝下载压缩包中的Sigar.jar 到你的项目lib目录</li></ul><h3 id="添加sigar本地库到-java-library-path"><a href="#添加sigar本地库到-java-library-path" class="headerlink" title="添加sigar本地库到 java.library.path"></a>添加sigar本地库到 java.library.path</h3><p>sigar API 依赖本地库文件工作的，内部通过java.library.path加载本地库文件。 本地库文件根据不同的平台，有下面这些文件。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tNc79gy1fpychr574vj30cx0ecdhz.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>我试着将这些文件放在classpath下（src/main/resources）或者通过 sigar-dist 依赖的方式加载都以失败告终。网上有篇<a href="http://arviarya.wordpress.com/2013/09/22/sigar-access-operating-system-and-hardware-level-information/" target="_blank" rel="noopener">博客</a> 讲如何通过解压 sigar-dist 依赖的方式，来组织 java.library.path，但是整个配置太过复杂。</p><p>最终我想到个办法是:</p><p>将 sigar 的本地库文件放在 src/main/resources/sigar 目录下，还是的 classpath 下<br>通过 java api 读取 sigar 路径，并将路径追加到 java.library.path中。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.darker.util.sigar;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * helper class to check the operating system this Java VM runs in</span><br><span class="line"> * http://stackoverflow.com/questions/228477/how-do-i-programmatically-determine-operating-system-in-java</span><br><span class="line"> * compare to http://svn.terracotta.org/svn/tc/dso/tags/2.6.4/code/base/common/src/com/tc/util/runtime/Os.java</span><br><span class="line"> * http://www.docjar.com/html/api/org/apache/commons/lang/SystemUtils.java.html</span><br><span class="line"> */</span><br><span class="line">public final class OsCheck &#123;</span><br><span class="line">    /**</span><br><span class="line">     * types of Operating Systems</span><br><span class="line">     */</span><br><span class="line">    public enum OSType &#123;</span><br><span class="line">        Windows, MacOS, Linux, Other</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected static OSType detectedOS;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * detected the operating system from the os.name System property and cache</span><br><span class="line">     * the result</span><br><span class="line">     *</span><br><span class="line">     * @returns - the operating system detected</span><br><span class="line">     */</span><br><span class="line">    public static OSType getOperatingSystemType() &#123;</span><br><span class="line">        if (detectedOS == null) &#123;</span><br><span class="line">            String OS = System.getProperty(&quot;os.name&quot;, &quot;generic&quot;).toLowerCase();</span><br><span class="line">            if (OS.indexOf(&quot;win&quot;) &gt;= 0) &#123;</span><br><span class="line">                detectedOS = OSType.Windows;</span><br><span class="line">            &#125; else if ((OS.indexOf(&quot;mac&quot;) &gt;= 0) || (OS.indexOf(&quot;darwin&quot;) &gt;= 0)) &#123;</span><br><span class="line">                detectedOS = OSType.MacOS;</span><br><span class="line">            &#125; else if (OS.indexOf(&quot;nux&quot;) &gt;= 0) &#123;</span><br><span class="line">                detectedOS = OSType.Linux;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                detectedOS = OSType.Other;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return detectedOS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.darker.util.sigar;</span><br><span class="line"></span><br><span class="line">import com.google.common.io.Resources;</span><br><span class="line">import org.hyperic.sigar.Sigar;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author gaohui</span><br><span class="line"> * @date 13-11-27 19:43</span><br><span class="line"> */</span><br><span class="line">public class SigarUtil &#123;</span><br><span class="line"></span><br><span class="line">    public final static Sigar sigar = initSigar();</span><br><span class="line"></span><br><span class="line">    private static Sigar initSigar() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String file = Resources.getResource(&quot;sigar/.sigar_shellrc&quot;).getFile();</span><br><span class="line">            File classPath = new File(file).getParentFile();</span><br><span class="line"></span><br><span class="line">            String path = System.getProperty(&quot;java.library.path&quot;);</span><br><span class="line">            if (OsCheck.getOperatingSystemType() == OsCheck.OSType.Windows) &#123;</span><br><span class="line">                path += &quot;;&quot; + classPath.getCanonicalPath();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                path += &quot;:&quot; + classPath.getCanonicalPath();</span><br><span class="line">            &#125;</span><br><span class="line">            System.setProperty(&quot;java.library.path&quot;, path);</span><br><span class="line"></span><br><span class="line">            return new Sigar();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ol><li>平常我们编译各种平台下的库时，如何解决跨平的问题？ </li><li>sigar这部分的开源设计代码是否值得我们学习他的设计模式？</li><li></li></ol><h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><p><a href="https://blog.csdn.net/u013474568/article/details/52250908" target="_blank" rel="noopener">sigar使用示例</a></p><p><a href="https://blog.csdn.net/c446984928/article/details/50739873" target="_blank" rel="noopener">java项目中使用Sigar获取系统信息</a></p><p><a href="http://bastengao.com/blog/2013/12/using-sigar-in-maven-project.html" target="_blank" rel="noopener">在 maven 项目中使用 sigar</a></p><p><a href="https://gist.github.com/bastengao/7853455" target="_blank" rel="noopener">源码参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java跨平台读取本机硬件信息&quot;&gt;&lt;a href=&quot;#Java跨平台读取本机硬件信息&quot; class=&quot;headerlink&quot; title=&quot;Java跨平台读取本机硬件信息&quot;&gt;&lt;/a&gt;Java跨平台读取本机硬件信息&lt;/h3&gt;&lt;p&gt;最近做一个授权项目，需要查询各种系统
      
    
    </summary>
    
    
    
      <category term="code" scheme="http://lmwtuedu.cn/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>吉他的音阶</title>
    <link href="http://lmwtuedu.cn/2018/04/01/2018-04-01-%E5%90%89%E4%BB%96%E7%9A%84%E9%9F%B31234567%E7%9A%84%E5%BC%B9%E6%B3%95/"/>
    <id>http://lmwtuedu.cn/2018/04/01/2018-04-01-吉他的音1234567的弹法/</id>
    <published>2018-03-31T16:00:00.000Z</published>
    <updated>2019-08-15T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="吉他的音1234567的弹法"><a href="#吉他的音1234567的弹法" class="headerlink" title="吉他的音1234567的弹法"></a>吉他的音1234567的弹法</h3><p>请看  C调音阶图：</p><p>示例：“1”的音在5弦三品上。“2”的音在5弦五品上，“3”的音在4弦二品上，“4”的音在4弦四品上，“5”的音在3弦空弦上，“6”的音在3弦二品上，“7”的音在3弦空弦上。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fpxmeojnvnj30go06aq3n.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>从上往下依次为一弦（最细）到六弦（最粗）。从左到右是一品到二十一品。</p><p>空弦音表示在此弦的空弦上弹奏左手不需要按弦。例如3弦空弦音是“5”，表示3弦空弦时拨动后发出是“5”的音。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;吉他的音1234567的弹法&quot;&gt;&lt;a href=&quot;#吉他的音1234567的弹法&quot; class=&quot;headerlink&quot; title=&quot;吉他的音1234567的弹法&quot;&gt;&lt;/a&gt;吉他的音1234567的弹法&lt;/h3&gt;&lt;p&gt;请看  C调音阶图：&lt;/p&gt;
&lt;p&gt;示例：“
      
    
    </summary>
    
    
    
      <category term="life" scheme="http://lmwtuedu.cn/tags/life/"/>
    
      <category term="guitar" scheme="http://lmwtuedu.cn/tags/guitar/"/>
    
  </entry>
  
</feed>
